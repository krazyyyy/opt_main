{"ast":null,"code":"export default async function depositFunc(web, wallet_address, algo_amt) {\n  var raw = {\n    \"sender_wallet\": wallet_address,\n    \"algo_amt\": algo_amt\n  };\n  var requestOptions = {\n    method: 'POST',\n    body: JSON.stringify(raw),\n    redirect: 'follow',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  fetch(\"http://127.0.0.1:5000/blockchain/deposit\", requestOptions).then(response => response.text()).then(async result => {\n    await tryExecuteTx(web, result);\n  }).catch(error => console.log('error', error));\n}\nasync function tryExecuteTx(web, txnParams) {\n  try {\n    const txnParameters = Array.isArray(txnParams) ? txnParams : [txnParams];\n    return await web.executeTx(txnParameters);\n  } catch (e) {\n    console.error('Transaction Failed', e);\n    throw e;\n  }\n}","map":{"version":3,"names":["depositFunc","web","wallet_address","algo_amt","raw","requestOptions","method","body","JSON","stringify","redirect","headers","fetch","then","response","text","result","tryExecuteTx","catch","error","console","log","txnParams","txnParameters","Array","isArray","executeTx","e"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/api/deposit.js"],"sourcesContent":["\r\n\r\nexport default async function depositFunc(web, wallet_address, algo_amt) {\r\n    var raw = {\r\n          \"sender_wallet\": wallet_address,\r\n          \"algo_amt\": algo_amt\r\n        }\r\n\r\n    var requestOptions = {\r\n      method: 'POST',\r\n      body: JSON.stringify(raw),\r\n      redirect: 'follow',\r\n      headers : {\r\n          'Content-Type' : 'application/json'\r\n      }\r\n    };\r\n    fetch(\"http://127.0.0.1:5000/blockchain/deposit\", requestOptions)\r\n    .then(response => response.text())\r\n    .then(async result => {\r\n      await tryExecuteTx(web, result)\r\n    })\r\n    .catch(error => console.log('error', error));\r\n  }  \r\n\r\nasync function tryExecuteTx(web, txnParams) {\r\n  try {\r\n      const txnParameters = Array.isArray(txnParams)\r\n          ? txnParams\r\n          : [txnParams];\r\n      return await web.executeTx(txnParameters);\r\n  } catch (e) {\r\n      console.error('Transaction Failed', e);\r\n      throw e;\r\n  }\r\n}"],"mappings":"AAEA,eAAe,eAAeA,WAAW,CAACC,GAAG,EAAEC,cAAc,EAAEC,QAAQ,EAAE;EACrE,IAAIC,GAAG,GAAG;IACJ,eAAe,EAAEF,cAAc;IAC/B,UAAU,EAAEC;EACd,CAAC;EAEL,IAAIE,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC;IACzBM,QAAQ,EAAE,QAAQ;IAClBC,OAAO,EAAG;MACN,cAAc,EAAG;IACrB;EACF,CAAC;EACDC,KAAK,CAAC,0CAA0C,EAAEP,cAAc,CAAC,CAChEQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAC,MAAMG,MAAM,IAAI;IACpB,MAAMC,YAAY,CAAChB,GAAG,EAAEe,MAAM,CAAC;EACjC,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC;AAC9C;AAEF,eAAeF,YAAY,CAAChB,GAAG,EAAEqB,SAAS,EAAE;EAC1C,IAAI;IACA,MAAMC,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,GACxCA,SAAS,GACT,CAACA,SAAS,CAAC;IACjB,OAAO,MAAMrB,GAAG,CAACyB,SAAS,CAACH,aAAa,CAAC;EAC7C,CAAC,CAAC,OAAOI,CAAC,EAAE;IACRP,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEQ,CAAC,CAAC;IACtC,MAAMA,CAAC;EACX;AACF"},"metadata":{},"sourceType":"module"}