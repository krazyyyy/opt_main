{"ast":null,"code":"import { Buffer } from 'buffer';\nimport * as txnBuilder from './transaction';\nimport * as nacl from './nacl/naclWrappers';\nimport * as encoding from './encoding/encoding';\nimport * as address from './encoding/address';\nimport * as utils from './utils/utils';\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\n/**\n * Aux class for group id calculation of a group of transactions\n */\nexport class TxGroup {\n  constructor(hashes) {\n    this.name = 'Transaction group';\n    this.tag = Buffer.from('TG');\n    if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n      const errorMsg = `${hashes.length.toString()} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE.toString()}`;\n      throw Error(errorMsg);\n    }\n    this.txGroupHashes = hashes;\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    const txgroup = {\n      txlist: this.txGroupHashes\n    };\n    return txgroup;\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(txgroupForEnc) {\n    const txn = Object.create(this.prototype);\n    txn.name = 'Transaction group';\n    txn.tag = Buffer.from('TG');\n    txn.txGroupHashes = [];\n    for (const hash of txgroupForEnc.txlist) {\n      txn.txGroupHashes.push(Buffer.from(hash));\n    }\n    return txn;\n  }\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  }\n}\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @returns Buffer\n */\nexport function computeGroupID(txns) {\n  const hashes = [];\n  for (const txn of txns) {\n    const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n    hashes.push(tx.rawTxID());\n  }\n  const txgroup = new TxGroup(hashes);\n  const bytes = txgroup.toByte();\n  const toBeHashed = Buffer.from(utils.concatArrays(txgroup.tag, bytes));\n  const gid = nacl.genericHash(toBeHashed);\n  return Buffer.from(gid);\n}\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @param from - optional sender address specifying which transaction return\n * @returns possible list of matching transactions\n */\nexport function assignGroupID(txns, from) {\n  const gid = computeGroupID(txns);\n  const result = [];\n  for (const txn of txns) {\n    const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n    if (!from || address.encodeAddress(tx.from.publicKey) === from) {\n      tx.group = gid;\n      result.push(tx);\n    }\n  }\n  return result;\n}\nexport default TxGroup;","map":{"version":3,"mappings":"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","names":["Buffer","txnBuilder","nacl","encoding","address","utils","ALGORAND_MAX_TX_GROUP_SIZE","TxGroup","constructor","hashes","from","length","errorMsg","toString","Error","txGroupHashes","get_obj_for_encoding","txgroup","txlist","from_obj_for_encoding","txgroupForEnc","txn","Object","create","prototype","name","tag","hash","push","toByte","encode","computeGroupID","txns","tx","instantiateTxnIfNeeded","rawTxID","bytes","toBeHashed","concatArrays","gid","genericHash","assignGroupID","result","encodeAddress","publicKey","group"],"sourceRoot":"","sources":["../../src/group.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}