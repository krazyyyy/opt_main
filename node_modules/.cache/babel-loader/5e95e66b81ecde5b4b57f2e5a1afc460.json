{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Optimum-Staking-main\\\\Optimum-Staking-main\\\\frontend\\\\src\\\\components\\\\Form.js\",\n  _s = $RefreshSig$();\n/* global BigInt */\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Dialog, DialogTitle } from '@mui/material';\nimport { ButtonTypes, TEN_BILLION } from '../constants/constants';\nimport SwapVertIcon from '@mui/icons-material/SwapVert';\nimport { deposit, expectedOPTAmount } from '../utils/deposit';\nimport { computeAlgoWithdrawAmtFromOPT, withdraw } from '../utils/withdraw';\nimport { FEE_ADDR, getAssetHolding, OptAppID, OptAsaID } from '../utils/common';\nimport CustomTextField from './CustomTextField';\nimport { connect } from 'react-redux';\nimport { addError, addSuccess } from '../redux/feedback_reducer';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  getApplicationAddress\n} = require('algosdk');\nfunction Form(props) {\n  _s();\n  const [openModal, setOpenModal] = useState(true);\n  const handleCloseModal = () => setOpenModal(false);\n  const [algoAmt, setAlgoAmt] = useState(undefined);\n  const [opt, setOpt] = useState(undefined);\n  const [amtError, setAmtError] = useState('');\n  const [optError, setOptError] = useState('');\n  const [isOPTEdit, setIsOPTEdit] = useState(false);\n  const [isAlgoEdit, setIsAlgoEdit] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [userASAHolding, setUserASAHolding] = useState(0);\n  const [isBackdropActive, setBackdropActive] = useState(false);\n  const [algoExchangeAmt, setAlgoExchangeAmt] = useState(1);\n  const [OPTExchangeAmt, setOPTExchangeAmt] = useState(1);\n  useEffect(() => {\n    props.closeModal(openModal);\n    getOPTBalanceOfUser();\n    getAlgoExchangeAmt();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [openModal]);\n  useEffect(() => {\n    async function computeOPT() {\n      if (algoAmt) {\n        setLoading(true);\n        let opt = +(await expectedOPTAmount(algoAmt * 1e6, props.selected_network, props.admin_addr));\n        if (opt === 0) {\n          // no prior deposit\n          const appAccAddr = getApplicationAddress(OptAppID(props.selected_network));\n          const optHoldingOfApp = await getAssetHolding(appAccAddr, OptAsaID(props.selected_network), props.selected_network);\n          if (BigInt(optHoldingOfApp.amount) === TEN_BILLION) {\n            opt = algoAmt;\n          }\n        }\n        setLoading(false);\n        return setOpt(opt);\n      } else {\n        setLoading(false);\n        return setOpt('');\n      }\n    }\n    if (isAlgoEdit) {\n      computeOPT();\n    }\n  }, [algoAmt, isAlgoEdit]);\n  useEffect(() => {\n    async function computeAlgo() {\n      if (opt) {\n        if (userASAHolding < opt) {\n          setOptError('Insufficient balance, not enough OPT in your account ');\n        }\n        setLoading(true);\n        const calculatedAmt = parseInt(await computeAlgoWithdrawAmtFromOPT(props.admin_addr, OptAppID(props.selected_network), OptAsaID(props.selected_network), opt, props.selected_network).catch(error => props.addError(error.message))) / 1e6;\n        setLoading(false);\n        return setAlgoAmt(calculatedAmt);\n      } else {\n        setLoading(false);\n        return setAlgoAmt('');\n      }\n    }\n    if (isOPTEdit) {\n      computeAlgo();\n    }\n  }, [opt, isOPTEdit]);\n  const SwapIcon = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"swap_icon_container\",\n    style: {\n      marginTop: amtError || optError ? '1rem' : 0\n    },\n    children: /*#__PURE__*/_jsxDEV(SwapVertIcon, {\n      className: \"swap_icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n  const handleClick = async () => {\n    await getAlgoExchangeAmt();\n    if (props.type === ButtonTypes.DEPOSIT) {\n      if (!algoAmt) {\n        setAmtError('Please provide the algos to be deposited.');\n      } else {\n        setBackdropActive(true);\n        deposit(props.web, props.address, algoAmt * 1e6, props.selected_network, props.admin_addr).then(() => {\n          setBackdropActive(false);\n          props.addSuccess(`Your ${algoAmt} Algos is deposited successfully.`);\n          handleCloseModal();\n        }).catch(error => {\n          setBackdropActive(false);\n          props.addError(error.message);\n        });\n      }\n    } else {\n      if (!opt) {\n        setOptError('Please provide OPT to be withdrawn.');\n      } else {\n        setBackdropActive(true);\n        withdraw(props.web, props.address, FEE_ADDR, opt, props.selected_network, props.admin_addr).then(() => {\n          setBackdropActive(false);\n          props.addSuccess(`Your ${opt} OPT is exchanged successfully.`);\n          handleCloseModal();\n        }).catch(error => {\n          setBackdropActive(false);\n          props.addError(error.message);\n        });\n      }\n    }\n  };\n  async function getOPTBalanceOfUser() {\n    const balance = await getAssetHolding(props.address, OptAsaID(props.selected_network), props.selected_network);\n    const amt = (balance === null || balance === void 0 ? void 0 : balance.amount) / 1e6;\n    if (isNaN(amt)) {\n      setUserASAHolding(0);\n    } else setUserASAHolding(amt !== null && amt !== void 0 ? amt : 0);\n  }\n  async function getAlgoExchangeAmt() {\n    await getOPTExchangeAmt();\n    await expectedOPTAmount(1e6, props.selected_network, props.admin_addr).then(amt => {\n      setAlgoExchangeAmt(amt);\n    }).catch(error => {\n      console.log(error);\n      setAlgoExchangeAmt(1);\n    });\n  }\n  async function getOPTExchangeAmt() {\n    await computeAlgoWithdrawAmtFromOPT(props.admin_addr, OptAppID(props.selected_network), OptAsaID(props.selected_network), 1, props.selected_network).then(amt => {\n      setOPTExchangeAmt((parseInt(amt) / 1e6).toFixed(5));\n    }).catch(error => {\n      console.log(error);\n      setOPTExchangeAmt(1);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: handleCloseModal,\n    open: openModal,\n    children: [/*#__PURE__*/_jsxDEV(Loader, {\n      loading: isBackdropActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      style: {\n        minHeight: '20rem',\n        minWidth: '30rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        className: \"modal_heading\",\n        children: props.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Exchange rate\", ' ', props.type === ButtonTypes.WITHDRAW && '(prior to a .1% fee)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"padding_top_sm marginBottom_small\",\n          children: props.type === ButtonTypes.WITHDRAW ? `1 OPT ~ ${OPTExchangeAmt} ALGO` : `1 ALGO ~ ${algoExchangeAmt} OPT`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flexBox_column\",\n          style: {\n            flexDirection: props.displayFlexDirection\n          },\n          children: [/*#__PURE__*/_jsxDEV(CustomTextField, {\n            error: amtError,\n            label: \"Algos\",\n            variant: \"filled\",\n            className: \"textfield\",\n            type: \"number\",\n            value: algoAmt || '',\n            disabled: props.type === ButtonTypes.WITHDRAW,\n            onChange: event => {\n              setIsAlgoEdit(true);\n              setIsOPTEdit(false);\n              setAmtError('');\n              setAlgoAmt((event.target.value * 1.0).toFixed(6) ? +(event.target.value * 1.0).toFixed(6) : '' // else when it is empty it shows 0\n              );\n            },\n\n            helperText: amtError,\n            showLoader: props.type === ButtonTypes.WITHDRAW && loading\n          }, \"algos\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), SwapIcon, /*#__PURE__*/_jsxDEV(CustomTextField, {\n            error: optError,\n            disabled: props.type === ButtonTypes.DEPOSIT,\n            label: \"OPT\",\n            variant: \"filled\",\n            className: \"textfield\",\n            type: \"number\",\n            value: opt || '',\n            onChange: event => {\n              setIsAlgoEdit(false);\n              setIsOPTEdit(true);\n              setOptError('');\n              setOpt((event.target.value * 1.0).toFixed(6) ? +(event.target.value * 1.0).toFixed(6) : '');\n            },\n            helperText: optError,\n            showLoader: props.type !== ButtonTypes.WITHDRAW && loading\n          }, \"opt\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"link_btn marginTop_small\",\n            style: {\n              order: props.order\n            },\n            onClick: handleClick,\n            disabled: optError || amtError,\n            children: props.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n}\n_s(Form, \"8qyffAeqk1DVqU3FklrQm9tk6kw=\");\n_c = Form;\nconst mapStateToProps = state => {\n  return {\n    address: state.wallet.address,\n    error: state.feedback.error,\n    success: state.feedback.success,\n    selected_network: state.wallet.selected_network,\n    admin_addr: state.wallet.admin_addr,\n    web: state.wallet.webMode\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    addError: payload => dispatch(addError(payload)),\n    addSuccess: payload => dispatch(addSuccess(payload))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useEffect","useState","Button","Dialog","DialogTitle","ButtonTypes","TEN_BILLION","SwapVertIcon","deposit","expectedOPTAmount","computeAlgoWithdrawAmtFromOPT","withdraw","FEE_ADDR","getAssetHolding","OptAppID","OptAsaID","CustomTextField","connect","addError","addSuccess","Loader","getApplicationAddress","require","Form","props","openModal","setOpenModal","handleCloseModal","algoAmt","setAlgoAmt","undefined","opt","setOpt","amtError","setAmtError","optError","setOptError","isOPTEdit","setIsOPTEdit","isAlgoEdit","setIsAlgoEdit","loading","setLoading","userASAHolding","setUserASAHolding","isBackdropActive","setBackdropActive","algoExchangeAmt","setAlgoExchangeAmt","OPTExchangeAmt","setOPTExchangeAmt","closeModal","getOPTBalanceOfUser","getAlgoExchangeAmt","computeOPT","selected_network","admin_addr","appAccAddr","optHoldingOfApp","BigInt","amount","computeAlgo","calculatedAmt","parseInt","catch","error","message","SwapIcon","marginTop","handleClick","type","DEPOSIT","web","address","then","balance","amt","isNaN","getOPTExchangeAmt","console","log","toFixed","minHeight","minWidth","WITHDRAW","flexDirection","displayFlexDirection","event","target","value","order","mapStateToProps","state","wallet","feedback","success","webMode","mapDispatchToProps","dispatch","payload"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/components/Form.js"],"sourcesContent":["/* global BigInt */\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Dialog, DialogTitle } from '@mui/material';\nimport { ButtonTypes, TEN_BILLION } from '../constants/constants';\nimport SwapVertIcon from '@mui/icons-material/SwapVert';\nimport { deposit, expectedOPTAmount } from '../utils/deposit';\nimport { computeAlgoWithdrawAmtFromOPT, withdraw } from '../utils/withdraw';\nimport { FEE_ADDR, getAssetHolding, OptAppID, OptAsaID } from '../utils/common';\nimport CustomTextField from './CustomTextField';\nimport { connect } from 'react-redux';\nimport { addError, addSuccess } from '../redux/feedback_reducer';\nimport Loader from './Loader';\nconst { getApplicationAddress } = require('algosdk');\n\nfunction Form(props) {\n    const [openModal, setOpenModal] = useState(true);\n    const handleCloseModal = () => setOpenModal(false);\n    const [algoAmt, setAlgoAmt] = useState(undefined);\n    const [opt, setOpt] = useState(undefined);\n    const [amtError, setAmtError] = useState('');\n    const [optError, setOptError] = useState('');\n    const [isOPTEdit, setIsOPTEdit] = useState(false);\n    const [isAlgoEdit, setIsAlgoEdit] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [userASAHolding, setUserASAHolding] = useState(0);\n    const [isBackdropActive, setBackdropActive] = useState(false);\n    const [algoExchangeAmt, setAlgoExchangeAmt] = useState(1);\n    const [OPTExchangeAmt, setOPTExchangeAmt] = useState(1);\n\n    useEffect(() => {\n        props.closeModal(openModal);\n        getOPTBalanceOfUser();\n        getAlgoExchangeAmt();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [openModal]);\n\n    useEffect(() => {\n        async function computeOPT() {\n            if (algoAmt) {\n                setLoading(true);\n                let opt = +(await expectedOPTAmount(\n                    algoAmt * 1e6,\n                    props.selected_network,\n                    props.admin_addr\n                ));\n                if (opt === 0) {\n                    // no prior deposit\n                    const appAccAddr = getApplicationAddress(\n                        OptAppID(props.selected_network)\n                    );\n                    const optHoldingOfApp = await getAssetHolding(\n                        appAccAddr,\n                        OptAsaID(props.selected_network),\n                        props.selected_network\n                    );\n                    if (BigInt(optHoldingOfApp.amount) === TEN_BILLION) {\n                        opt = algoAmt;\n                    }\n                }\n                setLoading(false);\n                return setOpt(opt);\n            } else {\n                setLoading(false);\n                return setOpt('');\n            }\n        }\n        if (isAlgoEdit) {\n            computeOPT();\n        }\n    }, [algoAmt, isAlgoEdit]);\n\n    useEffect(() => {\n        async function computeAlgo() {\n            if (opt) {\n                if (userASAHolding < opt) {\n                    setOptError(\n                        'Insufficient balance, not enough OPT in your account '\n                    );\n                }\n                setLoading(true);\n                const calculatedAmt =\n                    parseInt(\n                        await computeAlgoWithdrawAmtFromOPT(\n                            props.admin_addr,\n                            OptAppID(props.selected_network),\n                            OptAsaID(props.selected_network),\n                            opt,\n                            props.selected_network\n                        ).catch((error) => props.addError(error.message))\n                    ) / 1e6;\n                setLoading(false);\n                return setAlgoAmt(calculatedAmt);\n            } else {\n                setLoading(false);\n                return setAlgoAmt('');\n            }\n        }\n        if (isOPTEdit) {\n            computeAlgo();\n        }\n    }, [opt, isOPTEdit]);\n\n    const SwapIcon = (\n        <div\n            className=\"swap_icon_container\"\n            style={{ marginTop: amtError || optError ? '1rem' : 0 }}\n        >\n            <SwapVertIcon className=\"swap_icon\" />\n        </div>\n    );\n\n    const handleClick = async () => {\n        await getAlgoExchangeAmt();\n        if (props.type === ButtonTypes.DEPOSIT) {\n            if (!algoAmt) {\n                setAmtError('Please provide the algos to be deposited.');\n            } else {\n                setBackdropActive(true);\n                deposit(\n                    props.web,\n                    props.address,\n                    algoAmt * 1e6,\n                    props.selected_network,\n                    props.admin_addr\n                )\n                    .then(() => {\n                        setBackdropActive(false);\n                        props.addSuccess(\n                            `Your ${algoAmt} Algos is deposited successfully.`\n                        );\n                        handleCloseModal();\n                    })\n                    .catch((error) => {\n                        setBackdropActive(false);\n                        props.addError(error.message);\n                    });\n            }\n        } else {\n            if (!opt) {\n                setOptError('Please provide OPT to be withdrawn.');\n            } else {\n                setBackdropActive(true);\n                withdraw(\n                    props.web,\n                    props.address,\n                    FEE_ADDR,\n                    opt,\n                    props.selected_network,\n                    props.admin_addr\n                )\n                    .then(() => {\n                        setBackdropActive(false);\n                        props.addSuccess(\n                            `Your ${opt} OPT is exchanged successfully.`\n                        );\n                        handleCloseModal();\n                    })\n                    .catch((error) => {\n                        setBackdropActive(false);\n                        props.addError(error.message);\n                    });\n            }\n        }\n    };\n\n    async function getOPTBalanceOfUser() {\n        const balance = await getAssetHolding(\n            props.address,\n            OptAsaID(props.selected_network),\n            props.selected_network\n        );\n        const amt = balance?.amount / 1e6;\n        if (isNaN(amt)) {\n            setUserASAHolding(0);\n        } else setUserASAHolding(amt ?? 0);\n    }\n\n    async function getAlgoExchangeAmt() {\n        await getOPTExchangeAmt();\n        await expectedOPTAmount(1e6, props.selected_network, props.admin_addr)\n            .then((amt) => {\n                setAlgoExchangeAmt(amt);\n            })\n            .catch((error) => {\n                console.log(error);\n                setAlgoExchangeAmt(1);\n            });\n    }\n\n    async function getOPTExchangeAmt() {\n        await computeAlgoWithdrawAmtFromOPT(\n            props.admin_addr,\n            OptAppID(props.selected_network),\n            OptAsaID(props.selected_network),\n            1,\n            props.selected_network\n        )\n            .then((amt) => {\n                setOPTExchangeAmt((parseInt(amt) / 1e6).toFixed(5));\n            })\n            .catch((error) => {\n                console.log(error);\n                setOPTExchangeAmt(1);\n            });\n    }\n\n    return (\n        <Dialog onClose={handleCloseModal} open={openModal}>\n            <Loader loading={isBackdropActive} />\n            <div\n                className=\"modal\"\n                style={{ minHeight: '20rem', minWidth: '30rem' }}\n            >\n                <DialogTitle className=\"modal_heading\">\n                    {props.type}\n                </DialogTitle>\n                <div className=\"form_container\">\n                    <div>\n                        Exchange rate{' '}\n                        {props.type === ButtonTypes.WITHDRAW &&\n                            '(prior to a .1% fee)'}\n                    </div>\n                    <div className=\"padding_top_sm marginBottom_small\">\n                        {props.type === ButtonTypes.WITHDRAW\n                            ? `1 OPT ~ ${OPTExchangeAmt} ALGO`\n                            : `1 ALGO ~ ${algoExchangeAmt} OPT`}\n                    </div>\n                    <div\n                        className=\"flexBox_column\"\n                        style={{ flexDirection: props.displayFlexDirection }}\n                    >\n                        <CustomTextField\n                            error={amtError}\n                            key=\"algos\"\n                            label=\"Algos\"\n                            variant=\"filled\"\n                            className=\"textfield\"\n                            type=\"number\"\n                            value={algoAmt || ''}\n                            disabled={props.type === ButtonTypes.WITHDRAW}\n                            onChange={(event) => {\n                                setIsAlgoEdit(true);\n                                setIsOPTEdit(false);\n                                setAmtError('');\n                                setAlgoAmt(\n                                    (event.target.value * 1.0).toFixed(6)\n                                        ? +(event.target.value * 1.0).toFixed(6)\n                                        : '' // else when it is empty it shows 0\n                                );\n                            }}\n                            helperText={amtError}\n                            showLoader={\n                                props.type === ButtonTypes.WITHDRAW && loading\n                            }\n                        />\n                        {SwapIcon}\n                        <CustomTextField\n                            error={optError}\n                            disabled={props.type === ButtonTypes.DEPOSIT}\n                            key=\"opt\"\n                            label=\"OPT\"\n                            variant=\"filled\"\n                            className=\"textfield\"\n                            type=\"number\"\n                            value={opt || ''}\n                            onChange={(event) => {\n                                setIsAlgoEdit(false);\n                                setIsOPTEdit(true);\n                                setOptError('');\n                                setOpt(\n                                    (event.target.value * 1.0).toFixed(6)\n                                        ? +(event.target.value * 1.0).toFixed(6)\n                                        : ''\n                                );\n                            }}\n                            helperText={optError}\n                            showLoader={\n                                props.type !== ButtonTypes.WITHDRAW && loading\n                            }\n                        />\n\n                        <Button\n                            className=\"link_btn marginTop_small\"\n                            style={{ order: props.order }}\n                            onClick={handleClick}\n                            disabled={optError || amtError}\n                        >\n                            {props.type}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </Dialog>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        address: state.wallet.address,\n        error: state.feedback.error,\n        success: state.feedback.success,\n        selected_network: state.wallet.selected_network,\n        admin_addr: state.wallet.admin_addr,\n        web: state.wallet.webMode\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addError: (payload) => dispatch(addError(payload)),\n        addSuccess: (payload) => dispatch(addSuccess(payload))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}