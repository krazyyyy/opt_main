{"ast":null,"code":"import * as txnBuilder from './transaction';\nimport { OnApplicationComplete } from './types/transactions/base';\nimport {\n// Utilities\nTransactionType } from './types/transactions';\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: TransactionType.pay,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makePaymentTxn(from, to, fee, amount, closeRemainderTo, firstRound, lastRound, note, genesisHash, genesisID, rekeyTo) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo);\n}\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nexport function makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo) {\n  let nonParticipation = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  let stateProofKey = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : undefined;\n  const o = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: TransactionType.keyreg,\n    reKeyTo: rekeyTo,\n    nonParticipation,\n    stateProofKey\n  };\n  return new txnBuilder.Transaction(o);\n}\nexport function makeKeyRegistrationTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, rekeyTo) {\n  let nonParticipation = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;\n  let stateProofKey = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : undefined;\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation, stateProofKey);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makeAssetCreateTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, rekeyTo) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams) {\n  let strictEmptyAddressChecking = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;\n  let rekeyTo = arguments.length > 9 ? arguments[9] : undefined;\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n  }\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makeAssetConfigTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, manager, reserve, freeze, clawback) {\n  let strictEmptyAddressChecking = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : true;\n  let rekeyTo = arguments.length > 13 ? arguments[13] : undefined;\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking, rekeyTo);\n}\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makeAssetDestroyTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    type: TransactionType.afrz,\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makeAssetFreezeTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, freezeTarget, freezeState, rekeyTo) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    type: TransactionType.axfer,\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n */\nexport function makeAssetTransferTxn(from, to, closeRemainderTo, revocationTarget, fee, amount, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo);\n}\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n    extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nexport function makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nexport function makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nexport function makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nexport function makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nexport function makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nexport function makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nexport function makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexport { OnApplicationComplete } from './types/transactions/base';\n/**\n * Generic function for creating any application call transaction.\n */\nexport function makeApplicationCallTxnFromObject(options) {\n  const o = {\n    type: TransactionType.appl,\n    from: options.from,\n    suggestedParams: options.suggestedParams,\n    appIndex: options.appIndex,\n    appOnComplete: options.onComplete,\n    appLocalInts: options.numLocalInts,\n    appLocalByteSlices: options.numLocalByteSlices,\n    appGlobalInts: options.numGlobalInts,\n    appGlobalByteSlices: options.numGlobalByteSlices,\n    appApprovalProgram: options.approvalProgram,\n    appClearProgram: options.clearProgram,\n    appArgs: options.appArgs,\n    appAccounts: options.accounts,\n    appForeignApps: options.foreignApps,\n    appForeignAssets: options.foreignAssets,\n    boxes: options.boxes,\n    note: options.note,\n    lease: options.lease,\n    reKeyTo: options.rekeyTo,\n    extraPages: options.extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}","map":{"version":3,"mappings":"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","names":["txnBuilder","OnApplicationComplete","TransactionType","makePaymentTxnWithSuggestedParams","from","to","amount","closeRemainderTo","note","suggestedParams","rekeyTo","o","type","pay","reKeyTo","Transaction","makePaymentTxn","fee","firstRound","lastRound","genesisHash","genesisID","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","stateProofKey","undefined","keyreg","makeKeyRegistrationTxn","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxnWithSuggestedParams","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","assetTotal","assetDecimals","assetDefaultFrozen","assetUnitName","assetManager","assetReserve","assetFreeze","assetClawback","acfg","makeAssetCreateTxn","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParams","assetIndex","strictEmptyAddressChecking","Error","makeAssetConfigTxn","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxn","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","afrz","freezeAccount","makeAssetFreezeTxn","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxnWithSuggestedParams","revocationTarget","axfer","assetRevocationTarget","makeAssetTransferTxn","makeAssetTransferTxnWithSuggestedParamsFromObject","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","extraPages","boxes","appl","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appAccounts","appForeignApps","appForeignAssets","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","UpdateApplicationOC","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","DeleteApplicationOC","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","OptInOC","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","CloseOutOC","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","ClearStateOC","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","NoOpOC","makeApplicationNoOpTxnFromObject","makeApplicationCallTxnFromObject","options"],"sourceRoot":"","sources":["../../src/makeTxn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}