{"ast":null,"code":"/* eslint-disable no-bitwise */\nconst address = require('../encoding/address');\nfunction putUvarint(buf, x) {\n  let i = 0;\n  while (x > 0x80) {\n    buf.push(x & 0xff | 0x80);\n    // eslint-disable-next-line no-param-reassign\n    x >>= 7;\n    i += 1;\n  }\n  buf.push(x & 0xff);\n  return i + 1;\n}\nconst valTypes = {\n  INT: 1,\n  ADDRESS: 2,\n  BASE64: 3\n};\nfunction inject(orig, offsets, values, valueTypes) {\n  if (offsets.length !== values.length || offsets.length !== valueTypes.length) {\n    throw new Error('Lengths do not match');\n  }\n  let res = orig;\n  function replace(arr, newVal, offset, placeholderLength) {\n    const beforeReplacement = arr.slice(0, offset);\n    const afterReplacement = arr.slice(offset + placeholderLength, arr.length);\n    const chunks = [beforeReplacement, Buffer.from(newVal), afterReplacement];\n    return Buffer.concat(chunks);\n  }\n  for (let i = 0; i < offsets.length; i++) {\n    let decodedLength = 0;\n    let val = values[i];\n    const valType = valueTypes[i];\n    switch (valType) {\n      case valTypes.INT:\n        // eslint-disable-next-line no-case-declarations\n        const intBuf = [];\n        decodedLength = putUvarint(intBuf, val);\n        res = replace(res, intBuf, offsets[i], 1);\n        break;\n      case valTypes.ADDRESS:\n        val = address.decodeAddress(val);\n        res = replace(res, val.publicKey, offsets[i], 32);\n        break;\n      case valTypes.BASE64:\n        // eslint-disable-next-line no-case-declarations\n        const lenBuf = [];\n        val = Buffer.from(val, 'base64');\n        putUvarint(lenBuf, val.length);\n        val = Buffer.concat([Buffer.from(lenBuf), val]);\n        res = replace(res, val, offsets[i], 33);\n        break;\n      default:\n        throw new Error('unrecognized value type');\n    }\n    if (decodedLength !== 0) {\n      for (let o = 0; o < offsets.length; o++) {\n        // eslint-disable-next-line no-param-reassign\n        offsets[o] += decodedLength - 1;\n      }\n    }\n  }\n  return res;\n}\nmodule.exports = {\n  inject,\n  valTypes\n};","map":{"version":3,"mappings":"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","names":["address","require","putUvarint","buf","x","i","push","valTypes","INT","ADDRESS","BASE64","inject","orig","offsets","values","valueTypes","length","Error","res","replace","arr","newVal","offset","placeholderLength","beforeReplacement","slice","afterReplacement","chunks","Buffer","from","concat","decodedLength","val","valType","intBuf","decodeAddress","publicKey","lenBuf","o","module","exports"],"sourceRoot":"","sources":["../../../src/logicTemplates/templates.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}