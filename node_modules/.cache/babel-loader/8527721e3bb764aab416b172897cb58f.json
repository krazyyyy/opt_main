{"ast":null,"code":"import * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nexport default class Bid {\n  constructor(_ref) {\n    let {\n      bidderKey,\n      bidAmount,\n      bidID,\n      auctionKey,\n      auctionID,\n      maxPrice\n    } = _ref;\n    this.name = 'Bid';\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error('auctionID must be positive');\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      bidAmount,\n      bidID,\n      auctionKey: decodedAuctionKey,\n      auctionID,\n      maxPrice\n    });\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID\n    };\n  }\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk);\n    // construct signed message\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding()\n    };\n    const note = {\n      t: 'b',\n      b: sBid\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAC7C,OAAO,KAAKC,QAAQ,MAAM,qBAAqB;AAC/C,OAAO,KAAKC,IAAI,MAAM,qBAAqB;AAC3C,OAAO,KAAKC,KAAK,MAAM,eAAe;AAoBtC;;;AAGA,eAAc,MAAOC,GAAG;EAWtBC,kBAOa;IAAA,IAPD;MACVC,SAAS;MACTC,SAAS;MACTC,KAAK;MACLC,UAAU;MACVC,SAAS;MACTC;IAAQ,CACG;IAjBb,SAAI,GAAG,KAAK;IACZ,QAAG,GAAGC,MAAM,CAACC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAiB3B,MAAMC,gBAAgB,GAAGd,OAAO,CAACe,aAAa,CAACT,SAAS,CAAC;IACzD,MAAMU,iBAAiB,GAAGhB,OAAO,CAACe,aAAa,CAACN,UAAU,CAAC;IAE3D,IAAI,CAACQ,MAAM,CAACC,aAAa,CAACX,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EACnD,MAAMY,KAAK,CAAC,wCAAwC,CAAC;IACvD,IAAI,CAACF,MAAM,CAACC,aAAa,CAACV,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAC3C,MAAMW,KAAK,CAAC,mCAAmC,CAAC;IAClD,IAAI,CAACF,MAAM,CAACC,aAAa,CAACR,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EACnD,MAAMS,KAAK,CAAC,4BAA4B,CAAC;IAE3CC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAClBf,SAAS,EAAEQ,gBAAgB;MAC3BP,SAAS;MACTC,KAAK;MACLC,UAAU,EAAEO,iBAAiB;MAC7BN,SAAS;MACTC;KACD,CAAC;EACJ;EAEA;EACAW,oBAAoB;IAClB,OAAO;MACLC,MAAM,EAAEX,MAAM,CAACC,IAAI,CAAC,IAAI,CAACP,SAAS,CAACkB,SAAS,CAAC;MAC7CC,GAAG,EAAE,IAAI,CAAClB,SAAS;MACnBmB,KAAK,EAAE,IAAI,CAACf,QAAQ;MACpBgB,EAAE,EAAE,IAAI,CAACnB,KAAK;MACdoB,GAAG,EAAEhB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACJ,UAAU,CAACe,SAAS,CAAC;MAC3CK,GAAG,EAAE,IAAI,CAACnB;KACX;EACH;EAEAoB,OAAO,CAACC,EAAc;IACpB,MAAMC,UAAU,GAAG/B,QAAQ,CAACgC,MAAM,CAAC,IAAI,CAACX,oBAAoB,EAAE,CAAC;IAC/D,MAAMY,UAAU,GAAGtB,MAAM,CAACC,IAAI,CAACV,KAAK,CAACgC,YAAY,CAAC,IAAI,CAACC,GAAG,EAAEJ,UAAU,CAAC,CAAC;IACxE,MAAMK,GAAG,GAAGnC,IAAI,CAACoC,IAAI,CAACJ,UAAU,EAAEH,EAAE,CAAC;IAErC;IACA,MAAMQ,IAAI,GAAG;MACXF,GAAG,EAAEzB,MAAM,CAACC,IAAI,CAACwB,GAAG,CAAC;MACrBG,GAAG,EAAE,IAAI,CAAClB,oBAAoB;KAC/B;IAED,MAAMmB,IAAI,GAAG;MACXC,CAAC,EAAE,GAAG;MACNC,CAAC,EAAEJ;KACJ;IACD,OAAO,IAAIK,UAAU,CAAC3C,QAAQ,CAACgC,MAAM,CAACQ,IAAI,CAAC,CAAC;EAC9C","names":["address","encoding","nacl","utils","Bid","constructor","bidderKey","bidAmount","bidID","auctionKey","auctionID","maxPrice","Buffer","from","decodedBidderKey","decodeAddress","decodedAuctionKey","Number","isSafeInteger","Error","Object","assign","get_obj_for_encoding","bidder","publicKey","cur","price","id","auc","aid","signBid","sk","encodedMsg","encode","toBeSigned","concatArrays","tag","sig","sign","sBid","bid","note","t","b","Uint8Array"],"sourceRoot":"","sources":["../../src/bid.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}