{"ast":null,"code":"import { AppActions, GlobalStateKeys } from '../constants/constants.js';\nconst {\n  types\n} = require('@algo-builder/web');\nconst {\n  OptAppID,\n  tryExecuteTx,\n  OptAsaID,\n  localOPTBalances,\n  FEE_ADDR,\n  readAppGlobalState\n} = require('./common.js');\n\n/**\n * Returns the \"lottery amount\": i.e reward per week ((totalOPT * APY)/no_of_weeks_in_governance)\n */\nexport async function getRewardAmt(network, adminAddr) {\n  const localOptBalances = await localOPTBalances(network);\n  const appGlobalState = await readAppGlobalState(adminAddr, OptAppID(network), network);\n  const rewardRateNumber = appGlobalState.get(GlobalStateKeys.REWARD_RATE);\n  const rewardRateDecimals = appGlobalState.get(GlobalStateKeys.REWARD_DECIMAL);\n  const apy = rewardRateDecimals === 0 ? rewardRateNumber : rewardRateNumber * 1.0 / rewardRateDecimals;\n  let totalOPT = 0.0;\n  for (const v of Object.values(localOptBalances)) {\n    totalOPT += v;\n  }\n\n  // this would be the reward we would get after each governance period\n  const reward = totalOPT * apy;\n  return reward;\n}\n\n// call the contract to send lottery to the winner\n// note: reward is already in microOPT (during reward calculation it's already set in local state as microOPT)\nasync function sendLotteryToWinnerByContract(web, adminAddr, network, feeAddress, winnerAddress, reward) {\n  const rewardToDisperse = parseInt(reward * 90 / 100); // 90% reward goes to user\n  const tenPerCentReward = parseInt(reward * 10 / 100); // 10% reward goes to the fee wallet\n\n  const txParams = {\n    type: types.TransactionType.CallApp,\n    sign: types.SignType.SecretKey,\n    fromAccountAddr: adminAddr,\n    appID: OptAppID(network),\n    payFlags: {\n      totalFee: 3000\n    },\n    appArgs: [AppActions.DISPENSE_LOTTERY, `int:${rewardToDisperse}`, `int:${tenPerCentReward}`],\n    accounts: [winnerAddress, feeAddress],\n    foreignAssets: [OptAsaID(network)]\n  };\n  await tryExecuteTx(web, txParams);\n}\nexport async function dispenseLottery(web, adminAddr, winnerAddr, network) {\n  // we need to take the winner address and the reward amount from the user here\n  // and then pass it to `sendLotteryToWinnerByContract`\n\n  const reward = await getRewardAmt(network, adminAddr);\n  await sendLotteryToWinnerByContract(web, adminAddr, network, FEE_ADDR, winnerAddr, parseInt(reward));\n}","map":{"version":3,"names":["AppActions","GlobalStateKeys","types","require","OptAppID","tryExecuteTx","OptAsaID","localOPTBalances","FEE_ADDR","readAppGlobalState","getRewardAmt","network","adminAddr","localOptBalances","appGlobalState","rewardRateNumber","get","REWARD_RATE","rewardRateDecimals","REWARD_DECIMAL","apy","totalOPT","v","Object","values","reward","sendLotteryToWinnerByContract","web","feeAddress","winnerAddress","rewardToDisperse","parseInt","tenPerCentReward","txParams","type","TransactionType","CallApp","sign","SignType","SecretKey","fromAccountAddr","appID","payFlags","totalFee","appArgs","DISPENSE_LOTTERY","accounts","foreignAssets","dispenseLottery","winnerAddr"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/utils/dispense_lottery.js"],"sourcesContent":["import { AppActions, GlobalStateKeys } from '../constants/constants.js';\nconst { types } = require('@algo-builder/web');\nconst {\n    OptAppID,\n    tryExecuteTx,\n    OptAsaID,\n    localOPTBalances,\n    FEE_ADDR,\n    readAppGlobalState\n} = require('./common.js');\n\n/**\n * Returns the \"lottery amount\": i.e reward per week ((totalOPT * APY)/no_of_weeks_in_governance)\n */\nexport async function getRewardAmt(network, adminAddr) {\n    const localOptBalances = await localOPTBalances(network);\n\n    const appGlobalState = await readAppGlobalState(\n        adminAddr,\n        OptAppID(network),\n        network\n    );\n\n    const rewardRateNumber = appGlobalState.get(GlobalStateKeys.REWARD_RATE);\n    const rewardRateDecimals = appGlobalState.get(\n        GlobalStateKeys.REWARD_DECIMAL\n    );\n    const apy =\n        rewardRateDecimals === 0\n            ? rewardRateNumber\n            : (rewardRateNumber * 1.0) / rewardRateDecimals;\n\n    let totalOPT = 0.0;\n    for (const v of Object.values(localOptBalances)) {\n        totalOPT += v;\n    }\n\n    // this would be the reward we would get after each governance period\n    const reward = totalOPT * apy;\n    return reward;\n}\n\n// call the contract to send lottery to the winner\n// note: reward is already in microOPT (during reward calculation it's already set in local state as microOPT)\nasync function sendLotteryToWinnerByContract(\n    web,\n    adminAddr,\n    network,\n    feeAddress,\n    winnerAddress,\n    reward\n) {\n    const rewardToDisperse = parseInt((reward * 90) / 100); // 90% reward goes to user\n    const tenPerCentReward = parseInt((reward * 10) / 100); // 10% reward goes to the fee wallet\n\n    const txParams = {\n        type: types.TransactionType.CallApp,\n        sign: types.SignType.SecretKey,\n        fromAccountAddr: adminAddr,\n        appID: OptAppID(network),\n        payFlags: { totalFee: 3000 },\n        appArgs: [\n            AppActions.DISPENSE_LOTTERY,\n            `int:${rewardToDisperse}`,\n            `int:${tenPerCentReward}`\n        ],\n        accounts: [winnerAddress, feeAddress],\n        foreignAssets: [OptAsaID(network)]\n    };\n\n    await tryExecuteTx(web, txParams);\n}\n\nexport async function dispenseLottery(web, adminAddr, winnerAddr, network) {\n    // we need to take the winner address and the reward amount from the user here\n    // and then pass it to `sendLotteryToWinnerByContract`\n\n    const reward = await getRewardAmt(network, adminAddr);\n    await sendLotteryToWinnerByContract(\n        web,\n        adminAddr,\n        network,\n        FEE_ADDR,\n        winnerAddr,\n        parseInt(reward)\n    );\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,eAAe,QAAQ,2BAA2B;AACvE,MAAM;EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAM;EACFC,QAAQ;EACRC,YAAY;EACZC,QAAQ;EACRC,gBAAgB;EAChBC,QAAQ;EACRC;AACJ,CAAC,GAAGN,OAAO,CAAC,aAAa,CAAC;;AAE1B;AACA;AACA;AACA,OAAO,eAAeO,YAAY,CAACC,OAAO,EAAEC,SAAS,EAAE;EACnD,MAAMC,gBAAgB,GAAG,MAAMN,gBAAgB,CAACI,OAAO,CAAC;EAExD,MAAMG,cAAc,GAAG,MAAML,kBAAkB,CAC3CG,SAAS,EACTR,QAAQ,CAACO,OAAO,CAAC,EACjBA,OAAO,CACV;EAED,MAAMI,gBAAgB,GAAGD,cAAc,CAACE,GAAG,CAACf,eAAe,CAACgB,WAAW,CAAC;EACxE,MAAMC,kBAAkB,GAAGJ,cAAc,CAACE,GAAG,CACzCf,eAAe,CAACkB,cAAc,CACjC;EACD,MAAMC,GAAG,GACLF,kBAAkB,KAAK,CAAC,GAClBH,gBAAgB,GACfA,gBAAgB,GAAG,GAAG,GAAIG,kBAAkB;EAEvD,IAAIG,QAAQ,GAAG,GAAG;EAClB,KAAK,MAAMC,CAAC,IAAIC,MAAM,CAACC,MAAM,CAACX,gBAAgB,CAAC,EAAE;IAC7CQ,QAAQ,IAAIC,CAAC;EACjB;;EAEA;EACA,MAAMG,MAAM,GAAGJ,QAAQ,GAAGD,GAAG;EAC7B,OAAOK,MAAM;AACjB;;AAEA;AACA;AACA,eAAeC,6BAA6B,CACxCC,GAAG,EACHf,SAAS,EACTD,OAAO,EACPiB,UAAU,EACVC,aAAa,EACbJ,MAAM,EACR;EACE,MAAMK,gBAAgB,GAAGC,QAAQ,CAAEN,MAAM,GAAG,EAAE,GAAI,GAAG,CAAC,CAAC,CAAC;EACxD,MAAMO,gBAAgB,GAAGD,QAAQ,CAAEN,MAAM,GAAG,EAAE,GAAI,GAAG,CAAC,CAAC,CAAC;;EAExD,MAAMQ,QAAQ,GAAG;IACbC,IAAI,EAAEhC,KAAK,CAACiC,eAAe,CAACC,OAAO;IACnCC,IAAI,EAAEnC,KAAK,CAACoC,QAAQ,CAACC,SAAS;IAC9BC,eAAe,EAAE5B,SAAS;IAC1B6B,KAAK,EAAErC,QAAQ,CAACO,OAAO,CAAC;IACxB+B,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAK,CAAC;IAC5BC,OAAO,EAAE,CACL5C,UAAU,CAAC6C,gBAAgB,EAC1B,OAAMf,gBAAiB,EAAC,EACxB,OAAME,gBAAiB,EAAC,CAC5B;IACDc,QAAQ,EAAE,CAACjB,aAAa,EAAED,UAAU,CAAC;IACrCmB,aAAa,EAAE,CAACzC,QAAQ,CAACK,OAAO,CAAC;EACrC,CAAC;EAED,MAAMN,YAAY,CAACsB,GAAG,EAAEM,QAAQ,CAAC;AACrC;AAEA,OAAO,eAAee,eAAe,CAACrB,GAAG,EAAEf,SAAS,EAAEqC,UAAU,EAAEtC,OAAO,EAAE;EACvE;EACA;;EAEA,MAAMc,MAAM,GAAG,MAAMf,YAAY,CAACC,OAAO,EAAEC,SAAS,CAAC;EACrD,MAAMc,6BAA6B,CAC/BC,GAAG,EACHf,SAAS,EACTD,OAAO,EACPH,QAAQ,EACRyC,UAAU,EACVlB,QAAQ,CAACN,MAAM,CAAC,CACnB;AACL"},"metadata":{},"sourceType":"module"}