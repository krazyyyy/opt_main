{"ast":null,"code":"const address = require('../encoding/address');\nconst makeTxn = require('../makeTxn');\nconst logic = require('../logic/logic');\nconst logicSig = require('../logicsig');\nconst nacl = require('../nacl/naclWrappers');\nconst templates = require('./templates');\nclass PeriodicPayment {\n  /**\n   * MakePeriodicPayment allows some account to execute periodic withdrawal of funds.\n   * This is a contract account.\n   *\n   * This allows receiver to withdraw amount every\n   * period rounds for withdrawWindow after every multiple\n   * of period.\n   *\n   * After expiryRound, all remaining funds in the escrow\n   * are available to receiver.\n   *\n   * @deprecated This class will be removed in v2.\n   *\n   * Constructor Parameters:\n   * @param {string} receiver: address which is authorized to receive withdrawals\n   * @param {int} amount: the amount to send each period\n   * @param {int} withdrawalWindow: the duration of a withdrawal period\n   * @param {int} period: the time between a pair of withdrawal periods\n   * @param {int} expiryRound: the round at which the account expires\n   * @param {int} maxFee: maximum fee used by the withdrawal transaction\n   * @param {string} lease: b64 representation of lease to use, or leave undefined to generate one\n   * @returns {PeriodicPayment}\n   */\n  constructor(receiver, amount, withdrawalWindow, period, expiryRound, maxFee, lease) {\n    // don't need to validate receiver or lease, it's validated by template insert\n    this.receiver = receiver;\n    if (!Number.isSafeInteger(amount) || amount < 0) throw Error('amount must be a positive number and smaller than 2^53-1');\n    this.amount = amount;\n    if (!Number.isSafeInteger(withdrawalWindow) || withdrawalWindow < 0) throw Error('withdrawalWindow must be a positive number and smaller than 2^53-1');\n    this.withdrawalWindow = withdrawalWindow;\n    if (!Number.isSafeInteger(period) || period < 0) throw Error('period must be a positive number and smaller than 2^53-1');\n    this.period = period;\n    if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error('expiryRound must be a positive number and smaller than 2^53-1');\n    this.expiryRound = expiryRound;\n    if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error('maxFee must be a positive number and smaller than 2^53-1');\n    this.maxFee = maxFee;\n    if (lease === undefined) {\n      const leaseBytes = nacl.randomBytes(32);\n      this.lease = Buffer.from(leaseBytes).toString('base64');\n    } else {\n      this.lease = lease;\n    }\n    this.programBytes = this.getProgram();\n    const lsig = new logicSig.LogicSig(this.programBytes, undefined);\n    this.address = lsig.address();\n  }\n  /**\n   * returns the program bytes\n   * @returns {Uint8Array}\n   */\n  getProgram() {\n    const referenceProgramB64 = 'ASAHAQYFAAQDByYCIAECAwQFBgcIAQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIIJKvkYTkEzwJf2arzJOxERsSogG9nQzKPkpIoc4TzPTFMRAiEjEBIw4QMQIkGCUSEDEEIQQxAggSEDEGKBIQMQkyAxIxBykSEDEIIQUSEDEJKRIxBzIDEhAxAiEGDRAxCCUSEBEQ';\n    const referenceProgramBytes = Buffer.from(referenceProgramB64, 'base64');\n    const referenceOffsets = [4 /* period */, 5 /* withdrawWindow */, 7 /* amount */, 8 /* expiryRound */, 9 /* lease */, 12 /* receiver */, 46];\n    const injectionVector = [this.maxFee, this.period, this.withdrawalWindow, this.amount, this.expiryRound, this.lease, this.receiver];\n    const injectionTypes = [templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.BASE64, templates.valTypes.ADDRESS];\n    return templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n  }\n  /**\n   * returns the string address of the contract\n   * @returns {string}\n   */\n  getAddress() {\n    return this.address;\n  }\n}\n/**\n * getPeriodicPaymentWithdrawalTransaction returns a signed transaction extracting funds form the contract\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: the bytearray defining the contract, received from the payer\n * @param {int} fee: the fee per byte for the transaction\n * @param {int} firstValid: the first round on which the txn will be valid\n * @param {string} genesisHash: the hash representing the network for the txn\n * @returns {Object} Object containing txID and blob representing signed transaction\n * @throws error on failure\n */\nfunction getPeriodicPaymentWithdrawalTransaction(contract, fee, firstValid, genesisHash) {\n  const readResult = logic.readProgram(contract, undefined);\n  const ints = readResult[0];\n  const byteArrays = readResult[1];\n  const period = ints[2];\n  const duration = ints[4];\n  const amount = ints[5];\n  if (firstValid % period !== 0) {\n    throw new Error(`firstValid round ${firstValid.toString()} was not a multiple of contract period ${period.toString()}`);\n  }\n  // extract receiver and convert as needed\n  const receiverBytes = byteArrays[1];\n  const receiver = address.encodeAddress(receiverBytes);\n  // extract lease and convert\n  const leaseBuffer = byteArrays[0];\n  const lease = new Uint8Array(leaseBuffer);\n  const lastValid = firstValid + duration;\n  const to = receiver;\n  let noCloseRemainder;\n  let noNote;\n  const lsig = logicSig.makeLogicSig(contract, undefined);\n  const from = lsig.address();\n  const txn = {\n    from,\n    to,\n    fee,\n    amount,\n    closeRemainderTo: noCloseRemainder,\n    firstRound: firstValid,\n    lastRound: lastValid,\n    note: noNote,\n    genesisHash,\n    genesisID: '',\n    type: 'pay',\n    lease\n  };\n  // check fee\n  const tempTxn = makeTxn.makePaymentTxn(from, to, fee, amount, noCloseRemainder, firstValid, lastValid, noNote, genesisHash, '');\n  if (tempTxn.fee > ints[1]) {\n    throw new Error(`final fee of payment transaction${tempTxn.fee.toString()}greater than transaction max fee${ints[1].toString()}`);\n  }\n  return logicSig.signLogicSigTransaction(txn, lsig);\n}\nmodule.exports = {\n  PeriodicPayment,\n  getPeriodicPaymentWithdrawalTransaction\n};","map":{"version":3,"mappings":"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","names":["address","require","makeTxn","logic","logicSig","nacl","templates","PeriodicPayment","constructor","receiver","amount","withdrawalWindow","period","expiryRound","maxFee","lease","Number","isSafeInteger","Error","undefined","leaseBytes","randomBytes","Buffer","from","toString","programBytes","getProgram","lsig","LogicSig","referenceProgramB64","referenceProgramBytes","referenceOffsets","injectionVector","injectionTypes","valTypes","INT","BASE64","ADDRESS","inject","getAddress","getPeriodicPaymentWithdrawalTransaction","contract","fee","firstValid","genesisHash","readResult","readProgram","ints","byteArrays","duration","receiverBytes","encodeAddress","leaseBuffer","Uint8Array","lastValid","to","noCloseRemainder","noNote","makeLogicSig","txn","closeRemainderTo","firstRound","lastRound","note","genesisID","type","tempTxn","makePaymentTxn","signLogicSigTransaction","module","exports"],"sourceRoot":"","sources":["../../../src/logicTemplates/periodicpayment.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}