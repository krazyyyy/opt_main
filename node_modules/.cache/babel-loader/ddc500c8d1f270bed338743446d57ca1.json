{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceAll = exports.applyErrorMessageTemplate = exports.parseAlgorandError = exports.BuilderError = exports.ERRORS = void 0;\nconst errors_list_1 = require(\"./errors-list\");\nObject.defineProperty(exports, \"ERRORS\", {\n  enumerable: true,\n  get: function () {\n    return errors_list_1.ERRORS;\n  }\n});\n// For an explanation about these classes constructors go to:\n// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\nclass BuilderError extends Error {\n  constructor(errorDescriptor) {\n    let messageArguments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let parentError = arguments.length > 2 ? arguments[2] : undefined;\n    const prefix = `${(0, errors_list_1.getErrorCode)(errorDescriptor)}: `;\n    const formattedMessage = applyErrorMessageTemplate(errorDescriptor.message, messageArguments);\n    super(String(prefix) + String(formattedMessage));\n    this.errorDescriptor = errorDescriptor;\n    this.number = errorDescriptor.number;\n    if (parentError instanceof Error) {\n      this.parent = parentError;\n    }\n    this._isBuilderError = true;\n    Object.setPrototypeOf(this, BuilderError.prototype);\n  }\n  static isBuilderError(other) {\n    // eslint-disable-line\n    return other !== undefined && other !== null && other._isBuilderError === true;\n  }\n}\nexports.BuilderError = BuilderError;\nfunction parseAlgorandError(e, ctx) {\n  if (e === undefined) {\n    return new BuilderError(errors_list_1.ERRORS.NETWORK.NODE_IS_NOT_RUNNING);\n  }\n  /* eslint-disable @typescript-eslint/prefer-optional-chain */\n  if (e.response && e.response.statusCode !== undefined) {\n    if (e.response.statusCode >= 400 && e.response.statusCode < 500) {\n      return new BuilderError(errors_list_1.ERRORS.ALGORAND.BAD_REQUEST, {\n        status: e.response.statusCode,\n        message: e.response.body && e.response.body.message || e.response.text || e.response.error,\n        ctx: JSON.stringify(ctx)\n      }, e.error);\n    }\n    return new BuilderError(errors_list_1.ERRORS.ALGORAND.INTERNAL_ERROR, {\n      status: e.response.statusCode\n    }, e);\n  }\n  return e;\n}\nexports.parseAlgorandError = parseAlgorandError;\n/**\n * This function applies error messages templates like this:\n *\n *  - Template is a string which contains a variable tags. A variable tag is a\n *    a variable name surrounded by %. Eg: %plugin1%\n *  - A variable name is a string of alphanumeric ascii characters.\n *  - Every variable tag is replaced by its value.\n *  - %% is replaced by %.\n *  - Values can't contain variable tags.\n *  - If a variable is not present in the template, but present in the values\n *    object, an error is thrown.\n *\n * @param template The template string.\n * @param values A map of variable names to their values.\n */\nfunction applyErrorMessageTemplate(template, values // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n  return _applyErrorMessageTemplate(template, values);\n}\nexports.applyErrorMessageTemplate = applyErrorMessageTemplate;\nfunction _applyErrorMessageTemplate(template, values // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n  if (template.includes(\"%%\")) {\n    return template.split(\"%%\").map(part => _applyErrorMessageTemplate(part, values)).join(\"%\");\n  }\n  for (const variableName of Object.keys(values)) {\n    let value;\n    if (values[variableName] === undefined) {\n      value = \"undefined\";\n    } else if (values[variableName] === null) {\n      value = \"null\";\n    } else {\n      value = values[variableName].toString();\n    }\n    if (value === undefined) {\n      value = \"undefined\";\n    }\n    const variableTag = `%${variableName}%`;\n    template = replaceAll(template, variableTag, value);\n  }\n  return template;\n}\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\nfunction replaceAll(str, toReplace, replacement) {\n  return str.split(toReplace).join(replacement);\n}\nexports.replaceAll = replaceAll;","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","errors_list_1","BuilderError","Error","constructor","errorDescriptor","messageArguments","parentError","prefix","formattedMessage","applyErrorMessageTemplate","message","String","number","parent","_isBuilderError","setPrototypeOf","prototype","isBuilderError","other","undefined","exports","parseAlgorandError","e","ctx","NETWORK","NODE_IS_NOT_RUNNING","response","statusCode","ALGORAND","BAD_REQUEST","status","body","text","error","JSON","stringify","INTERNAL_ERROR","template","values","_applyErrorMessageTemplate","includes","split","map","part","join","variableName","keys","value","toString","variableTag","replaceAll","str","toReplace","replacement"],"sourceRoot":"","sources":["../../src/errors/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}