{"ast":null,"code":"function sleep() {\n  let msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n  return new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n  if (transaction.constructor === Uint8Array) return Buffer.from(transaction).toString(\"base64\");else if (typeof transaction === \"string\") return transaction;\n  const txn = Object.assign({}, transaction);\n  if (txn.note && txn.note.constructor === Uint8Array) txn.note = Buffer.from(txn.note).toString(\"base64\");\n  if (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array) txn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n  if (txn.group && txn.group.constructor === Uint8Array) txn.group = Buffer.from(txn.group).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array) txn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array) txn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0) for (let i = 0; i < txn.appArgs.length; i++) if (txn.appArgs[i].constructor === Uint8Array) txn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n  return txn;\n}\nmodule.exports = {\n  sleep,\n  prepareTxn\n};","map":{"version":3,"names":["sleep","msec","Promise","resolve","setTimeout","prepareTxn","transaction","constructor","Uint8Array","Buffer","from","toString","txn","Object","assign","note","assetMetadataHash","group","type","appApprovalProgram","appClearProgram","appArgs","length","i","module","exports"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/node_modules/@randlabs/myalgo-connect/lib/utils/utils.js"],"sourcesContent":["\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n"],"mappings":"AACA,SAASA,KAAK,GAAa;EAAA,IAAZC,IAAI,uEAAG,GAAG;EACxB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,IAAI,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,UAAU,CAACC,WAAW,EAAE;EAEhC,IAAIA,WAAW,CAACC,WAAW,KAAKC,UAAU,EACzC,OAAOC,MAAM,CAACC,IAAI,CAACJ,WAAW,CAAC,CAACK,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAC/C,IAAI,OAAOL,WAAW,KAAK,QAAQ,EACvC,OAAOA,WAAW;EAEnB,MAAMM,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,WAAW,CAAC;EAE1C,IAAIM,GAAG,CAACG,IAAI,IAAIH,GAAG,CAACG,IAAI,CAACR,WAAW,KAAKC,UAAU,EAClDI,GAAG,CAACG,IAAI,GAAGN,MAAM,CAACC,IAAI,CAACE,GAAG,CAACG,IAAI,CAAC,CAACJ,QAAQ,CAAC,QAAQ,CAAC;EAEpD,IAAIC,GAAG,CAACI,iBAAiB,IAAIJ,GAAG,CAACI,iBAAiB,CAACT,WAAW,KAAKC,UAAU,EAC5EI,GAAG,CAACI,iBAAiB,GAAGP,MAAM,CAACC,IAAI,CAACE,GAAG,CAACI,iBAAiB,CAAC,CAACL,QAAQ,CAAC,QAAQ,CAAC;EAE9E,IAAIC,GAAG,CAACK,KAAK,IAAIL,GAAG,CAACK,KAAK,CAACV,WAAW,KAAKC,UAAU,EACpDI,GAAG,CAACK,KAAK,GAAGR,MAAM,CAACC,IAAI,CAACE,GAAG,CAACK,KAAK,CAAC,CAACN,QAAQ,CAAC,QAAQ,CAAC;EAEtD,IAAIC,GAAG,CAACM,IAAI,KAAK,MAAM,IAAIN,GAAG,CAACO,kBAAkB,IAAIP,GAAG,CAACO,kBAAkB,CAACZ,WAAW,KAAKC,UAAU,EACrGI,GAAG,CAACO,kBAAkB,GAAGV,MAAM,CAACC,IAAI,CAACE,GAAG,CAACO,kBAAkB,CAAC,CAACR,QAAQ,CAAC,QAAQ,CAAC;EAEhF,IAAIC,GAAG,CAACM,IAAI,KAAK,MAAM,IAAIN,GAAG,CAACQ,eAAe,IAAIR,GAAG,CAACQ,eAAe,CAACb,WAAW,KAAKC,UAAU,EAC/FI,GAAG,CAACQ,eAAe,GAAGX,MAAM,CAACC,IAAI,CAACE,GAAG,CAACQ,eAAe,CAAC,CAACT,QAAQ,CAAC,QAAQ,CAAC;EAE1E,IAAIC,GAAG,CAACM,IAAI,KAAK,MAAM,IAAIN,GAAG,CAACS,OAAO,IAAIT,GAAG,CAACS,OAAO,CAACC,MAAM,GAAG,CAAC,EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,GAAG,CAACS,OAAO,CAACC,MAAM,EAAEC,CAAC,EAAE,EAC1C,IAAIX,GAAG,CAACS,OAAO,CAACE,CAAC,CAAC,CAAChB,WAAW,KAAKC,UAAU,EAC5CI,GAAG,CAACS,OAAO,CAACE,CAAC,CAAC,GAAGd,MAAM,CAACC,IAAI,CAACE,GAAG,CAACS,OAAO,CAACE,CAAC,CAAC,CAAC,CAACZ,QAAQ,CAAC,QAAQ,CAAC;EAElE,OAAOC,GAAG;AACX;AAEAY,MAAM,CAACC,OAAO,GAAG;EAChBzB,KAAK;EACLK;AACD,CAAC"},"metadata":{},"sourceType":"script"}