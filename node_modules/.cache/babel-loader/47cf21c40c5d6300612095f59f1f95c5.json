{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mkTxParams = exports.getSuggestedParams = exports.algoexplorerAlgod = void 0;\nconst algosdk_1 = require(\"algosdk\");\nfunction algoexplorerAlgod(walletURL) {\n  return new algosdk_1.Algodv2(walletURL.token, walletURL.server, walletURL.port);\n}\nexports.algoexplorerAlgod = algoexplorerAlgod;\n/**\n * Returns blockchain transaction suggested parameters (firstRound, lastRound, fee..)\n * @param algocl an Algorand client, instance of Algodv2, used to communicate with a blockchain node.\n */\nasync function getSuggestedParams(algocl) {\n  const params = await algocl.getTransactionParams().do();\n  const genesisInfo = await algocl.genesis().do();\n  // Private chains may have an issue with firstRound\n  if (!genesisInfo.devmode && params.firstRound === 0) {\n    throw new Error(\"Suggested params returned 0 as firstRound. Ensure that your node progresses.\");\n  }\n  return params;\n}\nexports.getSuggestedParams = getSuggestedParams;\n/**\n * Returns a union object of custom transaction params and suggested params.\n * @param algocl an Algorand client, instance of Algodv2, used to communicate with a blockchain node.\n * @param userParams a dict containing custom params defined by the user\n * @param s suggested transaction params\n */\nasync function mkTxParams(algocl, userParams, s) {\n  if (s === undefined) {\n    s = await getSuggestedParams(algocl);\n  }\n  if (userParams.flatFee === undefined) {\n    s.flatFee = userParams.totalFee !== undefined;\n  }\n  s.fee = userParams.totalFee || userParams.feePerByte || algosdk_1.ALGORAND_MIN_TX_FEE; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing\n  s.firstRound = userParams.firstValid || s.firstRound; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing\n  s.lastRound = userParams.firstValid === undefined || userParams.validRounds === undefined // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing\n  ? s.lastRound : Number(userParams.firstValid) + Number(userParams.validRounds);\n  return s;\n}\nexports.mkTxParams = mkTxParams;","map":{"version":3,"mappings":";;;;;;AAAA;AAIA,SAAgBA,iBAAiB,CAACC,SAA4B;EAC7D,OAAO,IAAIC,iBAAO,CAACD,SAAS,CAACE,KAAK,EAAEF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACI,IAAI,CAAC;AACtE;AAFAC;AAIA;;;;AAIO,eAAeC,kBAAkB,CAACC,MAAe;EACvD,MAAMC,MAAM,GAAG,MAAMD,MAAM,CAACE,oBAAoB,EAAE,CAACC,EAAE,EAAE;EACvD,MAAMC,WAAW,GAAG,MAAMJ,MAAM,CAACK,OAAO,EAAE,CAACF,EAAE,EAAE;EAC/C;EACA,IAAI,CAACC,WAAW,CAACE,OAAO,IAAIL,MAAM,CAACM,UAAU,KAAK,CAAC,EAAE;IACpD,MAAM,IAAIC,KAAK,CACd,8EAA8E,CAC9E;;EAEF,OAAOP,MAAM;AACd;AAVAH;AAYA;;;;;;AAMO,eAAeW,UAAU,CAC/BT,MAAe,EACfU,UAAoB,EACpBC,CAAmB;EAEnB,IAAIA,CAAC,KAAKC,SAAS,EAAE;IACpBD,CAAC,GAAG,MAAMZ,kBAAkB,CAACC,MAAM,CAAC;;EAGrC,IAAIU,UAAU,CAACG,OAAO,KAAKD,SAAS,EAAE;IACrCD,CAAC,CAACE,OAAO,GAAGH,UAAU,CAACI,QAAQ,KAAKF,SAAS;;EAE9CD,CAAC,CAACI,GAAG,GAAGL,UAAU,CAACI,QAAQ,IAAIJ,UAAU,CAACM,UAAU,IAAItB,6BAAmB,CAAC,CAAC;EAE7EiB,CAAC,CAACJ,UAAU,GAAGG,UAAU,CAACO,UAAU,IAAIN,CAAC,CAACJ,UAAU,CAAC,CAAC;EACtDI,CAAC,CAACO,SAAS,GACVR,UAAU,CAACO,UAAU,KAAKL,SAAS,IAAIF,UAAU,CAACS,WAAW,KAAKP,SAAS,CAAC;EAAA,EACzED,CAAC,CAACO,SAAS,GACXE,MAAM,CAACV,UAAU,CAACO,UAAU,CAAC,GAAGG,MAAM,CAACV,UAAU,CAACS,WAAW,CAAC;EAClE,OAAOR,CAAC;AACT;AApBAb","names":["algoexplorerAlgod","walletURL","algosdk_1","token","server","port","exports","getSuggestedParams","algocl","params","getTransactionParams","do","genesisInfo","genesis","devmode","firstRound","Error","mkTxParams","userParams","s","undefined","flatFee","totalFee","fee","feePerByte","firstValid","lastRound","validRounds","Number"],"sourceRoot":"","sources":["../../src/lib/api.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}