{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertKeysToHyphens = exports.convertCapitalToHyphens = exports.parseAppArgs = exports.addressToPk = exports.uint64ToBigEndian = exports.stringToBytes = void 0;\nconst algosdk_1 = require(\"algosdk\");\nconst constants_1 = require(\"./constants\");\n// verify n is an unsigned 64 bit integer\nfunction assertUint64(n) {\n  if (n < constants_1.MIN_UINT64 || n > constants_1.MAX_UINT64) {\n    throw new Error(`Invalid uint64 ${n}`);\n  }\n}\n// parse string to Uint8Array\nfunction stringToBytes(s) {\n  return new Uint8Array(Buffer.from(s));\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Converts 64 bit unsigned integer to bytes in big endian.\n */\nfunction uint64ToBigEndian(x) {\n  assertUint64(BigInt(x));\n  return (0, algosdk_1.encodeUint64)(x);\n}\nexports.uint64ToBigEndian = uint64ToBigEndian;\n/**\n * Takes an Algorand address in string form and decodes it into a Uint8Array (as public key)\n * @param addr : algorand address\n */\nfunction addressToPk(addr) {\n  return (0, algosdk_1.decodeAddress)(addr).publicKey;\n}\nexports.addressToPk = addressToPk;\nconst throwFmtError = appArg => {\n  throw new Error(`Format of arguments passed to stateful smart is invalid for ${appArg}`);\n};\n/**\n * Parses appArgs to bytes if arguments passed to App are similar to goal ('int:1', 'str:hello'..)\n * https://developer.algorand.org/docs/features/asc1/stateful/#passing-arguments-to-stateful-smart-contracts\n * eg. \"int:1\" => new Uint8Aarray([0, 0, 0, 0, 0, 0, 0, 1])\n * NOTE: parseAppArgs returns undefined to handle the case when application args passed to\n * stateful smart contract is undefined\n * @param appArgs : arguments to stateful smart contract\n */\nfunction parseAppArgs(appArgs) {\n  if (appArgs === undefined) {\n    return undefined;\n  }\n  const args = [];\n  for (const appArg of appArgs) {\n    // if appArg already bytes, then we don't need to parse\n    // just push to array and continue\n    if (appArg instanceof Uint8Array) {\n      args.push(new Uint8Array(appArg)); //in case its a Buffer object\n      continue;\n    }\n    // eg \"int:1\" => ['int', '1']\n    const i = appArg.indexOf(\":\");\n    const [type, value] = [appArg.slice(0, i), appArg.slice(i + 1)];\n    // if given string is not invalid, throw error\n    if (type === undefined || value === undefined) {\n      throwFmtError(appArg);\n    }\n    // parse string to bytes according to type\n    let arg;\n    switch (type) {\n      case \"int\":\n        {\n          if (!constants_1.reDigit.test(value)) {\n            throwFmtError(appArg);\n          } // verify only digits are present in string\n          arg = uint64ToBigEndian(BigInt(value));\n          break;\n        }\n      case \"str\":\n        {\n          arg = stringToBytes(value);\n          break;\n        }\n      case \"addr\":\n        {\n          arg = addressToPk(value);\n          break;\n        }\n      case \"b64\":\n        {\n          arg = new Uint8Array(Buffer.from(value, \"base64\"));\n          break;\n        }\n      default:\n        {\n          throwFmtError(appArg);\n        }\n    }\n    args.push(arg);\n  }\n  return args;\n}\nexports.parseAppArgs = parseAppArgs;\n/**\n * Converts camelCase to hypenCase\n * @param str string to convert\n * @returns fooBar to foo-bar\n */\nfunction convertCapitalToHyphens(str) {\n  return str.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase());\n}\nexports.convertCapitalToHyphens = convertCapitalToHyphens;\n/**\n * Converts object keys from camelCase to hypenCase\n * @param object\n * @returns object keys from fooBar to foo-bar\n */\nfunction convertKeysToHyphens(object) {\n  const newObject = {};\n  Object.keys(object).forEach(key => {\n    // not parse txnID\n    if (key === \"txID\") {\n      newObject[key] = object[key];\n    } else {\n      newObject[convertCapitalToHyphens(key)] = object[key];\n    }\n  });\n  return newObject;\n}\nexports.convertKeysToHyphens = convertKeysToHyphens;","map":{"version":3,"mappings":"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","names":["assertUint64","n","constants_1","Error","stringToBytes","s","Uint8Array","Buffer","from","exports","uint64ToBigEndian","x","BigInt","addressToPk","addr","publicKey","throwFmtError","appArg","parseAppArgs","appArgs","undefined","args","push","i","indexOf","type","value","slice","arg","test","convertCapitalToHyphens","str","replace","m","toLowerCase","convertKeysToHyphens","object","newObject","Object","keys","forEach","key"],"sourceRoot":"","sources":["../../src/lib/parsing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}