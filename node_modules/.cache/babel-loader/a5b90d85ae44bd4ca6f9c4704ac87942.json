{"ast":null,"code":"import { Application, ApplicationParams, ApplicationStateSchema, DryrunRequest } from './client/v2/algod/models/types';\nimport { TransactionType } from './types/transactions';\nimport { encodeAddress, getApplicationAddress } from './encoding/address';\nconst defaultAppId = 1380011588;\nconst defaultMaxWidth = 30;\nfunction decodePrograms(ap) {\n  // eslint-disable-next-line no-param-reassign\n  ap.params['approval-program'] = Buffer.from(ap.params['approval-program'].toString(), 'base64');\n  // eslint-disable-next-line no-param-reassign\n  ap.params['clear-state-program'] = Buffer.from(ap.params['clear-state-program'].toString(), 'base64');\n  return ap;\n}\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */\nexport async function createDryrun(_ref) {\n  let {\n    client,\n    txns,\n    protocolVersion,\n    latestTimestamp,\n    round,\n    sources\n  } = _ref;\n  const appInfos = [];\n  const acctInfos = [];\n  const apps = [];\n  const assets = [];\n  const accts = [];\n  for (const t of txns) {\n    if (t.txn.type === TransactionType.appl) {\n      accts.push(encodeAddress(t.txn.from.publicKey));\n      if (t.txn.appAccounts) accts.push(...t.txn.appAccounts.map(a => encodeAddress(a.publicKey)));\n      if (t.txn.appForeignApps) {\n        apps.push(...t.txn.appForeignApps);\n        accts.push(...t.txn.appForeignApps.map(aidx => getApplicationAddress(aidx)));\n      }\n      if (t.txn.appForeignAssets) assets.push(...t.txn.appForeignAssets);\n      // Create application,\n      if (t.txn.appIndex === undefined || t.txn.appIndex === 0) {\n        appInfos.push(new Application(defaultAppId, new ApplicationParams({\n          creator: encodeAddress(t.txn.from.publicKey),\n          approvalProgram: t.txn.appApprovalProgram,\n          clearStateProgram: t.txn.appClearProgram,\n          localStateSchema: new ApplicationStateSchema(t.txn.appLocalInts, t.txn.appLocalByteSlices),\n          globalStateSchema: new ApplicationStateSchema(t.txn.appGlobalInts, t.txn.appGlobalByteSlices)\n        })));\n      } else {\n        apps.push(t.txn.appIndex);\n        accts.push(getApplicationAddress(t.txn.appIndex));\n      }\n    }\n  }\n  // Dedupe and add creator to accts array\n  const assetPromises = [];\n  for (const assetId of [...new Set(assets)]) {\n    assetPromises.push(client.getAssetByID(assetId).do().then(assetInfo => {\n      accts.push(assetInfo.params.creator);\n    }));\n  }\n  // Wait for assets to finish since we append to accts array\n  await Promise.all(assetPromises);\n  // Dedupe and get app info for all apps\n  const appPromises = [];\n  for (const appId of [...new Set(apps)]) {\n    appPromises.push(client.getApplicationByID(appId).do().then(appInfo => {\n      const ai = decodePrograms(appInfo);\n      appInfos.push(ai);\n      accts.push(ai.params.creator);\n    }));\n  }\n  await Promise.all(appPromises);\n  const acctPromises = [];\n  for (const acct of [...new Set(accts)]) {\n    acctPromises.push(client.accountInformation(acct).do().then(acctInfo => {\n      if ('created-apps' in acctInfo) {\n        // eslint-disable-next-line no-param-reassign\n        acctInfo['created-apps'] = acctInfo['created-apps'].map(app => decodePrograms(app));\n      }\n      acctInfos.push(acctInfo);\n    }));\n  }\n  await Promise.all(acctPromises);\n  return new DryrunRequest({\n    txns: txns.map(st => ({\n      ...st,\n      txn: st.txn.get_obj_for_encoding()\n    })),\n    accounts: acctInfos,\n    apps: appInfos,\n    latestTimestamp,\n    round,\n    protocolVersion,\n    sources\n  });\n}\nclass DryrunStackValue {\n  constructor(sv) {\n    this.type = 0;\n    this.bytes = '';\n    this.uint = 0;\n    this.type = sv.type;\n    this.bytes = sv.bytes;\n    this.uint = sv.uint;\n  }\n  toString() {\n    if (this.type === 1) {\n      return `0x${Buffer.from(this.bytes, 'base64').toString('hex')}`;\n    }\n    return this.uint.toString();\n  }\n}\nclass DryrunTraceLine {\n  constructor(line) {\n    this.error = '';\n    this.line = 0;\n    this.pc = 0;\n    this.scratch = [];\n    this.stack = [];\n    this.error = line.error === undefined ? '' : line.error;\n    this.line = line.line;\n    this.pc = line.pc;\n    this.scratch = line.scratch;\n    this.stack = line.stack.map(sv => new DryrunStackValue(sv));\n  }\n}\nclass DryrunTrace {\n  constructor(t) {\n    this.trace = [];\n    if (t == null) return;\n    this.trace = t.map(line => new DryrunTraceLine(line));\n  }\n}\nfunction truncate(str, maxValueWidth) {\n  if (str.length > maxValueWidth && maxValueWidth > 0) {\n    return `${str.slice(0, maxValueWidth)}...`;\n  }\n  return str;\n}\nfunction scratchToString(prevScratch, currScratch) {\n  if (currScratch.length === 0) return '';\n  let newScratchIdx = null;\n  for (let idx = 0; idx < currScratch.length; idx++) {\n    if (idx > prevScratch.length) {\n      newScratchIdx = idx;\n      continue;\n    }\n    if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {\n      newScratchIdx = idx;\n    }\n  }\n  if (newScratchIdx == null) return '';\n  const newScratch = currScratch[newScratchIdx];\n  if (newScratch.bytes.length > 0) {\n    return `${newScratchIdx} = 0x${Buffer.from(newScratch.bytes, 'base64').toString('hex')}`;\n  }\n  return `${newScratchIdx} = ${newScratch.uint.toString()}`;\n}\nfunction stackToString(stack, reverse) {\n  const svs = reverse ? stack.reverse() : stack;\n  return `[${svs.map(sv => {\n    switch (sv.type) {\n      case 1:\n        return `0x${Buffer.from(sv.bytes, 'base64').toString('hex')}`;\n      case 2:\n        return `${sv.uint.toString()}`;\n      default:\n        return '';\n    }\n  }).join(', ')}]`;\n}\nclass DryrunTransactionResult {\n  constructor(dtr) {\n    this.disassembly = [];\n    this.appCallMessages = [];\n    this.localDeltas = [];\n    this.globalDelta = [];\n    this.cost = 0;\n    this.logicSigMessages = [];\n    this.logicSigDisassembly = [];\n    this.logs = [];\n    this.appCallTrace = undefined;\n    this.logicSigTrace = undefined;\n    this.required = ['disassembly'];\n    this.optionals = ['app-call-messages', 'local-deltas', 'global-delta', 'cost', 'logic-sig-messages', 'logic-sig-disassembly', 'logs'];\n    this.traces = ['app-call-trace', 'logic-sig-trace'];\n    this.disassembly = dtr.disassembly;\n    this.appCallMessages = dtr['app-call-messages'];\n    this.localDeltas = dtr['local-deltas'];\n    this.globalDelta = dtr['global-delta'];\n    this.cost = dtr.cost;\n    this.logicSigMessages = dtr['logic-sig-messages'];\n    this.logicSigDisassembly = dtr['logic-sig-disassembly'];\n    this.logs = dtr.logs;\n    this.appCallTrace = new DryrunTrace(dtr['app-call-trace']);\n    this.logicSigTrace = new DryrunTrace(dtr['logic-sig-trace']);\n  }\n  appCallRejected() {\n    return this.appCallMessages !== undefined && this.appCallMessages.includes('REJECT');\n  }\n  logicSigRejected() {\n    return this.logicSigMessages !== undefined && this.logicSigMessages.includes('REJECT');\n  }\n  static trace(drt, disassembly, spc) {\n    const maxWidth = spc.maxValueWidth || defaultMaxWidth;\n    // Create the array of arrays, each sub array contains N columns\n    const lines = [['pc#', 'ln#', 'source', 'scratch', 'stack']];\n    for (let idx = 0; idx < drt.trace.length; idx++) {\n      const {\n        line,\n        error,\n        pc,\n        scratch,\n        stack\n      } = drt.trace[idx];\n      const currScratch = scratch !== undefined ? scratch : [];\n      const prevScratch = idx > 0 && drt.trace[idx - 1].scratch !== undefined ? drt.trace[idx - 1].scratch : [];\n      const src = error === '' ? disassembly[line] : `!! ${error} !!`;\n      lines.push([pc.toString().padEnd(3, ' '), line.toString().padEnd(3, ' '), truncate(src, maxWidth), truncate(scratchToString(prevScratch, currScratch), maxWidth), truncate(stackToString(stack, spc.topOfStackFirst), maxWidth)]);\n    }\n    // Get the max length for each column\n    const maxLengths = lines.reduce((prev, curr) => {\n      const newVal = new Array(lines[0].length).fill(0);\n      for (let idx = 0; idx < prev.length; idx++) {\n        newVal[idx] = curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];\n      }\n      return newVal;\n    }, new Array(lines[0].length).fill(0));\n    return `${lines.map(line => line.map((v, idx) => v.padEnd(maxLengths[idx] + 1, ' ')).join('|').trim()).join('\\n')}\\n`;\n  }\n  appTrace(spc) {\n    if (this.appCallTrace === undefined || !this.disassembly) return '';\n    let conf = spc;\n    if (spc === undefined) conf = {\n      maxValueWidth: defaultMaxWidth,\n      topOfStackFirst: false\n    };\n    return DryrunTransactionResult.trace(this.appCallTrace, this.disassembly, conf);\n  }\n  lsigTrace(spc) {\n    if (this.logicSigTrace === undefined || this.logicSigDisassembly === undefined) return '';\n    let conf = spc;\n    if (spc === undefined) conf = {\n      maxValueWidth: defaultMaxWidth,\n      topOfStackFirst: true\n    };\n    return DryrunTransactionResult.trace(this.logicSigTrace, this.logicSigDisassembly, conf);\n  }\n}\nexport class DryrunResult {\n  constructor(drrResp) {\n    this.error = '';\n    this.protocolVersion = '';\n    this.txns = [];\n    this.error = drrResp.error;\n    this.protocolVersion = drrResp['protocol-version'];\n    this.txns = drrResp.txns.map(txn => new DryrunTransactionResult(txn));\n  }\n}","map":{"version":3,"mappings":"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","names":["Application","ApplicationParams","ApplicationStateSchema","DryrunRequest","TransactionType","encodeAddress","getApplicationAddress","defaultAppId","defaultMaxWidth","decodePrograms","ap","params","Buffer","from","toString","createDryrun","client","txns","protocolVersion","latestTimestamp","round","sources","appInfos","acctInfos","apps","assets","accts","t","txn","type","appl","push","publicKey","appAccounts","map","a","appForeignApps","aidx","appForeignAssets","appIndex","undefined","creator","approvalProgram","appApprovalProgram","clearStateProgram","appClearProgram","localStateSchema","appLocalInts","appLocalByteSlices","globalStateSchema","appGlobalInts","appGlobalByteSlices","assetPromises","assetId","Set","getAssetByID","do","then","assetInfo","Promise","all","appPromises","appId","getApplicationByID","appInfo","ai","acctPromises","acct","accountInformation","acctInfo","app","st","get_obj_for_encoding","accounts","DryrunStackValue","constructor","sv","bytes","uint","DryrunTraceLine","line","error","pc","scratch","stack","DryrunTrace","trace","truncate","str","maxValueWidth","length","slice","scratchToString","prevScratch","currScratch","newScratchIdx","idx","JSON","stringify","newScratch","stackToString","reverse","svs","join","DryrunTransactionResult","dtr","disassembly","appCallMessages","localDeltas","globalDelta","cost","logicSigMessages","logicSigDisassembly","logs","appCallTrace","logicSigTrace","appCallRejected","includes","logicSigRejected","drt","spc","maxWidth","lines","src","padEnd","topOfStackFirst","maxLengths","reduce","prev","curr","newVal","Array","fill","v","trim","appTrace","conf","lsigTrace","DryrunResult","drrResp"],"sourceRoot":"","sources":["../../src/dryrun.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}