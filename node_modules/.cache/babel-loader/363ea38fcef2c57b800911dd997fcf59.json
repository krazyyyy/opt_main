{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonRpcError = exports.getErrorByCode = exports.getError = exports.isValidErrorCode = exports.isReservedErrorCode = exports.isServerErrorCode = void 0;\nconst constants_1 = require(\"./constants\");\nfunction isServerErrorCode(code) {\n  return code <= constants_1.SERVER_ERROR_CODE_RANGE[0] && code >= constants_1.SERVER_ERROR_CODE_RANGE[1];\n}\nexports.isServerErrorCode = isServerErrorCode;\nfunction isReservedErrorCode(code) {\n  return constants_1.RESERVED_ERROR_CODES.includes(code);\n}\nexports.isReservedErrorCode = isReservedErrorCode;\nfunction isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexports.isValidErrorCode = isValidErrorCode;\nfunction getError(type) {\n  if (!Object.keys(constants_1.STANDARD_ERROR_MAP).includes(type)) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n  return constants_1.STANDARD_ERROR_MAP[type];\n}\nexports.getError = getError;\nfunction getErrorByCode(code) {\n  const match = Object.values(constants_1.STANDARD_ERROR_MAP).find(e => e.code === code);\n  if (!match) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n  return match;\n}\nexports.getErrorByCode = getErrorByCode;\nfunction validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n    if (error.message !== constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n  return {\n    valid: true\n  };\n}\nexports.validateJsonRpcError = validateJsonRpcError;","map":{"version":3,"mappings":";;;;;;AACA;AAQA,SAAgBA,iBAAiB,CAACC,IAAY;EAC5C,OAAOA,IAAI,IAAIC,mCAAuB,CAAC,CAAC,CAAC,IAAID,IAAI,IAAIC,mCAAuB,CAAC,CAAC,CAAC;AACjF;AAFAC;AAIA,SAAgBC,mBAAmB,CAACH,IAAY;EAC9C,OAAOC,gCAAoB,CAACG,QAAQ,CAACJ,IAAI,CAAC;AAC5C;AAFAE;AAIA,SAAgBG,gBAAgB,CAACL,IAAY;EAC3C,OAAO,OAAOA,IAAI,KAAK,QAAQ;AACjC;AAFAE;AAIA,SAAgBI,QAAQ,CAACC,IAAY;EACnC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACR,8BAAkB,CAAC,CAACG,QAAQ,CAACG,IAAI,CAAC,EAAE;IACnD,OAAON,8BAAkB,CAACA,0BAAc,CAAC;;EAE3C,OAAOA,8BAAkB,CAACM,IAAI,CAAC;AACjC;AALAL;AAOA,SAAgBQ,cAAc,CAACV,IAAY;EACzC,MAAMW,KAAK,GAAGH,MAAM,CAACI,MAAM,CAACX,8BAAkB,CAAC,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACd,IAAI,KAAKA,IAAI,CAAC;EAC1E,IAAI,CAACW,KAAK,EAAE;IACV,OAAOV,8BAAkB,CAACA,0BAAc,CAAC;;EAE3C,OAAOU,KAAK;AACd;AANAT;AAQA,SAAgBa,oBAAoB,CAACC,QAAsB;EACzD,IAAI,OAAOA,QAAQ,CAACC,KAAK,CAACjB,IAAI,KAAK,WAAW,EAAE;IAC9C,OAAO;MAAEkB,KAAK,EAAE,KAAK;MAAED,KAAK,EAAE;IAAiC,CAAE;;EAEnE,IAAI,OAAOD,QAAQ,CAACC,KAAK,CAACE,OAAO,KAAK,WAAW,EAAE;IACjD,OAAO;MAAED,KAAK,EAAE,KAAK;MAAED,KAAK,EAAE;IAAoC,CAAE;;EAEtE,IAAI,CAACZ,gBAAgB,CAACW,QAAQ,CAACC,KAAK,CAACjB,IAAI,CAAC,EAAE;IAC1C,OAAO;MACLkB,KAAK,EAAE,KAAK;MACZD,KAAK,EAAE,yCAAyCD,QAAQ,CAACC,KAAK,CAACjB,IAAI;KACpE;;EAEH,IAAIG,mBAAmB,CAACa,QAAQ,CAACC,KAAK,CAACjB,IAAI,CAAC,EAAE;IAC5C,MAAMiB,KAAK,GAAGP,cAAc,CAACM,QAAQ,CAACC,KAAK,CAACjB,IAAI,CAAC;IACjD,IACEiB,KAAK,CAACE,OAAO,KAAKlB,8BAAkB,CAACA,0BAAc,CAAC,CAACkB,OAAO,IAC5DH,QAAQ,CAACC,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACE,OAAO,EACxC;MACA,OAAO;QACLD,KAAK,EAAE,KAAK;QACZD,KAAK,EAAE,4CAA4CD,QAAQ,CAACC,KAAK,CAACjB,IAAI;OACvE;;;EAGL,OAAO;IAAEkB,KAAK,EAAE;EAAI,CAAE;AACxB;AA1BAhB","names":["isServerErrorCode","code","constants_1","exports","isReservedErrorCode","includes","isValidErrorCode","getError","type","Object","keys","getErrorByCode","match","values","find","e","validateJsonRpcError","response","error","valid","message"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}