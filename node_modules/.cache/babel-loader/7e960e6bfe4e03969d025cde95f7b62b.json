{"ast":null,"code":"import * as txnBuilder from './transaction';\nimport { OnApplicationComplete } from './types/transactions/base';\nimport {\n// Utilities\nTransactionType } from './types/transactions';\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: TransactionType.pay,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nexport function makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo) {\n  let nonParticipation = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  let stateProofKey = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : undefined;\n  const o = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: TransactionType.keyreg,\n    reKeyTo: rekeyTo,\n    nonParticipation,\n    stateProofKey\n  };\n  return new txnBuilder.Transaction(o);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams) {\n  let strictEmptyAddressChecking = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;\n  let rekeyTo = arguments.length > 9 ? arguments[9] : undefined;\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n  }\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    type: TransactionType.afrz,\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nexport function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    type: TransactionType.axfer,\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n    extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nexport function makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nexport function makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nexport function makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nexport function makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nexport function makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nexport function makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nexport function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nexport function makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexport { OnApplicationComplete } from './types/transactions/base';\n/**\n * Generic function for creating any application call transaction.\n */\nexport function makeApplicationCallTxnFromObject(options) {\n  const o = {\n    type: TransactionType.appl,\n    from: options.from,\n    suggestedParams: options.suggestedParams,\n    appIndex: options.appIndex,\n    appOnComplete: options.onComplete,\n    appLocalInts: options.numLocalInts,\n    appLocalByteSlices: options.numLocalByteSlices,\n    appGlobalInts: options.numGlobalInts,\n    appGlobalByteSlices: options.numGlobalByteSlices,\n    appApprovalProgram: options.approvalProgram,\n    appClearProgram: options.clearProgram,\n    appArgs: options.appArgs,\n    appAccounts: options.accounts,\n    appForeignApps: options.foreignApps,\n    appForeignAssets: options.foreignAssets,\n    boxes: options.boxes,\n    note: options.note,\n    lease: options.lease,\n    reKeyTo: options.rekeyTo,\n    extraPages: options.extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}","map":{"version":3,"mappings":"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","names":["txnBuilder","OnApplicationComplete","TransactionType","makePaymentTxnWithSuggestedParams","from","to","amount","closeRemainderTo","note","suggestedParams","rekeyTo","o","type","pay","reKeyTo","Transaction","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","stateProofKey","undefined","keyreg","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxnWithSuggestedParams","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","assetTotal","assetDecimals","assetDefaultFrozen","assetUnitName","assetManager","assetReserve","assetFreeze","assetClawback","acfg","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParams","assetIndex","strictEmptyAddressChecking","Error","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","afrz","freezeAccount","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxnWithSuggestedParams","revocationTarget","axfer","assetRevocationTarget","makeAssetTransferTxnWithSuggestedParamsFromObject","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","extraPages","boxes","appl","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appAccounts","appForeignApps","appForeignAssets","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","UpdateApplicationOC","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","DeleteApplicationOC","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","OptInOC","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","CloseOutOC","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","ClearStateOC","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","NoOpOC","makeApplicationNoOpTxnFromObject","makeApplicationCallTxnFromObject","options"],"sourceRoot":"","sources":["../../src/makeTxn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}