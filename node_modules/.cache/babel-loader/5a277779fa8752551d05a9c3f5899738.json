{"ast":null,"code":"import { signLogicSigTransactionObject } from './logicsig';\nimport { signMultisigTransaction, mergeMultisigTransactions } from './multisig';\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */\nexport function makeBasicAccountTransactionSigner(account) {\n  return (txnGroup, indexesToSign) => {\n    const signed = [];\n    for (const index of indexesToSign) {\n      signed.push(txnGroup[index].signTxn(account.sk));\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */\nexport function makeLogicSigAccountTransactionSigner(account) {\n  return (txnGroup, indexesToSign) => {\n    const signed = [];\n    for (const index of indexesToSign) {\n      const {\n        blob\n      } = signLogicSigTransactionObject(txnGroup[index], account);\n      signed.push(blob);\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */\nexport function makeMultiSigAccountTransactionSigner(msig, sks) {\n  return (txnGroup, indexesToSign) => {\n    const signed = [];\n    for (const index of indexesToSign) {\n      const txn = txnGroup[index];\n      const partialSigs = [];\n      for (const sk of sks) {\n        const {\n          blob\n        } = signMultisigTransaction(txn, msig, sk);\n        partialSigs.push(blob);\n      }\n      signed.push(mergeMultisigTransactions(partialSigs));\n    }\n    return Promise.resolve(signed);\n  };\n}\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */\nexport function isTransactionWithSigner(value) {\n  return typeof value === 'object' && Object.keys(value).length === 2 && typeof value.txn === 'object' && typeof value.signer === 'function';\n}","map":{"version":3,"mappings":"AAEA,SAA0BA,6BAA6B,QAAQ,YAAY;AAE3E,SAASC,uBAAuB,EAAEC,yBAAyB,QAAQ,YAAY;AAe/E;;;AAGA,OAAM,SAAUC,iCAAiC,CAC/CC,OAAgB;EAEhB,OAAO,CAACC,QAAuB,EAAEC,aAAuB,KAAI;IAC1D,MAAMC,MAAM,GAAiB,EAAE;IAE/B,KAAK,MAAMC,KAAK,IAAIF,aAAa,EAAE;MACjCC,MAAM,CAACE,IAAI,CAACJ,QAAQ,CAACG,KAAK,CAAC,CAACE,OAAO,CAACN,OAAO,CAACO,EAAE,CAAC,CAAC;;IAGlD,OAAOC,OAAO,CAACC,OAAO,CAACN,MAAM,CAAC;EAChC,CAAC;AACH;AAEA;;;AAGA,OAAM,SAAUO,oCAAoC,CAClDV,OAAwB;EAExB,OAAO,CAACC,QAAuB,EAAEC,aAAuB,KAAI;IAC1D,MAAMC,MAAM,GAAiB,EAAE;IAE/B,KAAK,MAAMC,KAAK,IAAIF,aAAa,EAAE;MACjC,MAAM;QAAES;MAAI,CAAE,GAAGf,6BAA6B,CAACK,QAAQ,CAACG,KAAK,CAAC,EAAEJ,OAAO,CAAC;MACxEG,MAAM,CAACE,IAAI,CAACM,IAAI,CAAC;;IAGnB,OAAOH,OAAO,CAACC,OAAO,CAACN,MAAM,CAAC;EAChC,CAAC;AACH;AAEA;;;;;AAKA,OAAM,SAAUS,oCAAoC,CAClDC,IAAsB,EACtBC,GAAiB;EAEjB,OAAO,CAACb,QAAuB,EAAEC,aAAuB,KAAI;IAC1D,MAAMC,MAAM,GAAiB,EAAE;IAE/B,KAAK,MAAMC,KAAK,IAAIF,aAAa,EAAE;MACjC,MAAMa,GAAG,GAAGd,QAAQ,CAACG,KAAK,CAAC;MAC3B,MAAMY,WAAW,GAAiB,EAAE;MAEpC,KAAK,MAAMT,EAAE,IAAIO,GAAG,EAAE;QACpB,MAAM;UAAEH;QAAI,CAAE,GAAGd,uBAAuB,CAACkB,GAAG,EAAEF,IAAI,EAAEN,EAAE,CAAC;QACvDS,WAAW,CAACX,IAAI,CAACM,IAAI,CAAC;;MAGxBR,MAAM,CAACE,IAAI,CAACP,yBAAyB,CAACkB,WAAW,CAAC,CAAC;;IAGrD,OAAOR,OAAO,CAACC,OAAO,CAACN,MAAM,CAAC;EAChC,CAAC;AACH;AAUA;;;;;AAKA,OAAM,SAAUc,uBAAuB,CACrCC,KAAU;EAEV,OACE,OAAOA,KAAK,KAAK,QAAQ,IACzBC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,KAAK,CAAC,IAC/B,OAAOH,KAAK,CAACH,GAAG,KAAK,QAAQ,IAC7B,OAAOG,KAAK,CAACI,MAAM,KAAK,UAAU;AAEtC","names":["signLogicSigTransactionObject","signMultisigTransaction","mergeMultisigTransactions","makeBasicAccountTransactionSigner","account","txnGroup","indexesToSign","signed","index","push","signTxn","sk","Promise","resolve","makeLogicSigAccountTransactionSigner","blob","makeMultiSigAccountTransactionSigner","msig","sks","txn","partialSigs","isTransactionWithSigner","value","Object","keys","length","signer"],"sourceRoot":"","sources":["../../src/signer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}