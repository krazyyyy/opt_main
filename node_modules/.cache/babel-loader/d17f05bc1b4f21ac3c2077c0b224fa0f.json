{"ast":null,"code":"import { types } from '@algo-builder/web';\nimport { AppActions } from '../constants/constants.js';\nimport { algodClient } from './algob.config.js';\nconst {\n  default: algosdk,\n  makeApplicationOptInTxnFromObject,\n  assignGroupID\n} = require('algosdk');\nconst {\n  getApplicationAddress,\n  generateAccount\n} = require('algosdk');\nconst {\n  OptAppID,\n  tryExecuteTx\n} = require('./common.js');\n\n/**\n * 1. Generate n accounts\n * 2. Fund each account with 1 ALGO (to maintan min balance)\n * 3. Opt in by account to optimum app\n * 4. Whitelist each account\n */\nexport async function genAccounts(n, web, adminAddr, network) {\n  if (n > 16) {\n    throw new Error('Cannot generate more than 16 accounts at once');\n  }\n  const accts = [];\n  for (let i = 0; i < n; ++i) {\n    accts.push(generateAccount());\n  }\n  const fundAccParams = [];\n  for (const acc of accts) {\n    // fund each acc with 0.5 ALGO first\n    fundAccParams.push({\n      type: types.TransactionType.TransferAlgo,\n      sign: types.SignType.SecretKey,\n      fromAccountAddr: adminAddr,\n      toAccountAddr: acc.addr,\n      amountMicroAlgos: 0.5e6,\n      payFlags: {\n        totalFee: 1000\n      }\n    });\n  }\n  await tryExecuteTx(web, fundAccParams);\n\n  // whitelist account\n  await whiteListAccounts(web, accts, network);\n}\nasync function executeAlgodTxns(txns, network, accts) {\n  // get client by network\n  const client = algodClient(network);\n\n  // assign group ID\n  const grpTxns = assignGroupID(txns);\n\n  // sign all transactions\n  const signedTxns = grpTxns.map((txn, i) => {\n    const signed = txn.signTxn(accts[i].sk);\n    return signed;\n  });\n\n  // send all transactions to network, wait for result\n  const {\n    txId\n  } = await client.sendRawTransaction(signedTxns).do();\n  const result = await algosdk.waitForConfirmation(client, txId, 10);\n}\nasync function whiteListAccounts(web, accts, network) {\n  const client = algodClient(network);\n  const execParams = [];\n  const whitelistParams = [];\n  for (const acc of accts) {\n    const suggestedParams = await client.getTransactionParams().do();\n    suggestedParams.flatFee = true;\n    suggestedParams.fee = 1000;\n    execParams.push(makeApplicationOptInTxnFromObject({\n      from: acc.addr,\n      appIndex: OptAppID(network),\n      suggestedParams: suggestedParams\n    }));\n\n    // push whitelist params\n    whitelistParams.push(algosdk.makeApplicationCallTxnFromObject({\n      from: acc.addr,\n      appIndex: OptAppID(network),\n      suggestedParams: suggestedParams,\n      rekeyTo: getApplicationAddress(OptAppID(network)),\n      appArgs: [new Uint8Array(Buffer.from(AppActions.WHITELIST_ACCOUNTS))]\n    }));\n  }\n\n  // execute opt-in txns\n  await executeAlgodTxns(execParams, network, accts);\n\n  // execute whitelist txns\n  await executeAlgodTxns(whitelistParams, network, accts);\n}","map":{"version":3,"names":["types","AppActions","algodClient","default","algosdk","makeApplicationOptInTxnFromObject","assignGroupID","require","getApplicationAddress","generateAccount","OptAppID","tryExecuteTx","genAccounts","n","web","adminAddr","network","Error","accts","i","push","fundAccParams","acc","type","TransactionType","TransferAlgo","sign","SignType","SecretKey","fromAccountAddr","toAccountAddr","addr","amountMicroAlgos","payFlags","totalFee","whiteListAccounts","executeAlgodTxns","txns","client","grpTxns","signedTxns","map","txn","signed","signTxn","sk","txId","sendRawTransaction","do","result","waitForConfirmation","execParams","whitelistParams","suggestedParams","getTransactionParams","flatFee","fee","from","appIndex","makeApplicationCallTxnFromObject","rekeyTo","appArgs","Uint8Array","Buffer","WHITELIST_ACCOUNTS"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/utils/gen_accts_and_whitelist.js"],"sourcesContent":["import { types } from '@algo-builder/web';\nimport { AppActions } from '../constants/constants.js';\nimport { algodClient } from './algob.config.js';\nconst {\n    default: algosdk,\n    makeApplicationOptInTxnFromObject,\n    assignGroupID\n} = require('algosdk');\nconst { getApplicationAddress, generateAccount } = require('algosdk');\nconst { OptAppID, tryExecuteTx } = require('./common.js');\n\n/**\n * 1. Generate n accounts\n * 2. Fund each account with 1 ALGO (to maintan min balance)\n * 3. Opt in by account to optimum app\n * 4. Whitelist each account\n */\nexport async function genAccounts(n, web, adminAddr, network) {\n    if (n > 16) {\n        throw new Error('Cannot generate more than 16 accounts at once');\n    }\n\n    const accts = [];\n    for (let i = 0; i < n; ++i) {\n        accts.push(generateAccount());\n    }\n\n    const fundAccParams = [];\n    for (const acc of accts) {\n        // fund each acc with 0.5 ALGO first\n        fundAccParams.push({\n            type: types.TransactionType.TransferAlgo,\n            sign: types.SignType.SecretKey,\n            fromAccountAddr: adminAddr,\n            toAccountAddr: acc.addr,\n            amountMicroAlgos: 0.5e6,\n            payFlags: { totalFee: 1000 }\n        });\n    }\n\n    await tryExecuteTx(web, fundAccParams);\n\n    // whitelist account\n    await whiteListAccounts(web, accts, network);\n}\n\nasync function executeAlgodTxns(txns, network, accts) {\n    // get client by network\n    const client = algodClient(network);\n\n    // assign group ID\n    const grpTxns = assignGroupID(txns);\n\n    // sign all transactions\n    const signedTxns = grpTxns.map((txn, i) => {\n        const signed = txn.signTxn(accts[i].sk);\n        return signed;\n    });\n\n    // send all transactions to network, wait for result\n    const { txId } = await client.sendRawTransaction(signedTxns).do();\n    const result = await algosdk.waitForConfirmation(client, txId, 10);\n}\n\nasync function whiteListAccounts(web, accts, network) {\n    const client = algodClient(network);\n    const execParams = [];\n    const whitelistParams = [];\n\n    for (const acc of accts) {\n        const suggestedParams = await client.getTransactionParams().do();\n        suggestedParams.flatFee = true;\n        suggestedParams.fee = 1000;\n        execParams.push(\n            makeApplicationOptInTxnFromObject({\n                from: acc.addr,\n                appIndex: OptAppID(network),\n                suggestedParams: suggestedParams\n            })\n        );\n\n        // push whitelist params\n        whitelistParams.push(\n            algosdk.makeApplicationCallTxnFromObject({\n                from: acc.addr,\n                appIndex: OptAppID(network),\n                suggestedParams: suggestedParams,\n                rekeyTo: getApplicationAddress(OptAppID(network)),\n                appArgs: [\n                    new Uint8Array(Buffer.from(AppActions.WHITELIST_ACCOUNTS))\n                ]\n            })\n        );\n    }\n\n    // execute opt-in txns\n    await executeAlgodTxns(execParams, network, accts);\n\n    // execute whitelist txns\n    await executeAlgodTxns(whitelistParams, network, accts);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}