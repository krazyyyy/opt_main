{"ast":null,"code":"const {\n  openPopup\n} = require(\"./popup/popup\");\nconst {\n  sleep,\n  prepareTxn\n} = require(\"./utils/utils\");\nconst {\n  Errors,\n  SignTxnsError\n} = require(\"./utils/errors\");\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @description Base64 encoding of the canonical msgpack encoding of a SignedTxn\n * @typedef SignedTxnStr\n * @type {Base64}\n */\n\n/**\n * @description Application call transaction object\n * @typedef MultisigMetadata\n * @type {object}\n * @property {number} version Multisig version\n * @property {number} threshold Multisig threshold value\n * @property {Address[]} addrs Multisig cosigners\n */\n\n/**\n * @description ARC-0001 Transaction Object\n * @typedef WalletTransactions\n * @type {object}\n * @property {txs}\n * @property {Base64} txn Base64 encoding of the canonical msgpack encoding of a Transaction.\n * @property {Address} [authAddr] Authorized address used to sign the transaction when the account is rekeyed\n * @property {MultisigMetadata} [msig] Multisig metadata used to sign the transaction\n * @property {Address[]} [signers] Optional list of addresses that must sign the transactions\n * @property {SignedTxnStr} [stxn] Base64 encoding of the canonical msgpack encoding\n * of a SignedTxn corresponding to txn, when signers=[]\n * @property {string} [message] Optional message explaining the reason of the transaction\n * @property {string} [groupMessage] Message explaining the reason of this group of transaction.\n * Field only allowed in the first transaction of a group\n */\n\n/**\n * @description ARC-0001 Transaction Options Object\n * @typedef SignTxnsOpts\n * @type {object}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n  /**\n   * @constructor\n   * @param {Options} [options] Operation options\n   */\n  constructor(options) {\n    if (!bridge) {\n      bridge = new Messaging();\n    }\n\n    /**\n     * @access private\n     * @type {Messaging}\n     */\n    this.bridge = bridge;\n\n    /**\n     * @access private\n     * @type {number} Popup Timeout\n     */\n    this.timeout = options && options.timeout ? options.timeout : 1600000;\n\n    /**\n     * @access private\n     * @type {string} Frame url\n     */\n    this.url = options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\";\n    if (this.url.endsWith(\"/\")) this.url = this.url.slice(0, -1);\n\n    /**\n     * @access private\n     * @description This is used to reuse the current connect opened popup\n     * @type {Window|null}\n     */\n    this.currentConnectPopup = null;\n\n    /**\n     * @access private\n     * @description This is used to reuse the current signtx opened popup\n     * @type {Window|null}\n     */\n    this.currentSigntxPopup = null;\n\n    /**\n     * @access private\n     * @description This is used to reuse the current signlogic opened popup\n     * @type {Window|null}\n     */\n    this.currentSignLogicSigPopup = null;\n\n    /**\n     * @access private\n     * @description This is used to reuse the current tealsign opened popup\n     * @type {Window|null}\n     */\n    this.currentTealSignPopup = null;\n\n    /**\n     * @access private\n     * @description This is used to reuse the current signbytes opened popup\n     * @type {Window|null}\n     */\n    this.currentSignBytesPopup = null;\n\n    /**\n     * @access private\n     * @description Replace default bridge options\n     * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n     */\n    this.options = {\n      waitForReply: true,\n      timeout: this.timeout\n    };\n\n    /**\n     * @access private\n     * @description Disable ledger nano\n     * @type {boolean}\n     */\n    this.disableLedgerNano = options && options.disableLedgerNano ? options.disableLedgerNano : false;\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to load accounts from storage.\n   * @param {ConnectionSettings} settings Connect settings\n   * @returns {Promise<string[]>} Returns allowed accounts by the user.\n   */\n  async connect() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      shouldSelectOneAccount: false,\n      openManager: false\n    };\n    if (this.currentConnectPopup) {\n      if (this.currentConnectPopup.closed) {\n        this.currentConnectPopup = null;\n      } else {\n        this.focusWindow(this.currentConnectPopup);\n      }\n    }\n    try {\n      this.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n      await this.waitForWindowToLoad(this.currentConnectPopup);\n      const res = await this.bridge.sendMessage(this.currentConnectPopup, {\n        method: \"unlock\",\n        params: Object.assign(settings, {\n          disableLedgerNano: this.disableLedgerNano\n        })\n      }, this.url, this.options);\n      this.closeWindow(this.currentConnectPopup);\n      this.currentConnectPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return res.data.accounts;\n    } catch (err) {\n      this.closeWindow(this.currentConnectPopup);\n      this.currentConnectPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign transaction.\n   * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n   * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n   * (The signer account must be the same for all transactions).\n   * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n   * transaction was an object or an array.\n   */\n  async signTransaction(transaction, signOptions) {\n    let txn;\n    if (this.currentSigntxPopup) {\n      if (this.currentSigntxPopup.closed) {\n        this.currentSigntxPopup = null;\n      } else {\n        this.focusWindow(this.currentSigntxPopup);\n      }\n    }\n    if (Array.isArray(transaction)) txn = Array.from(transaction).map(tx => prepareTxn(tx));else txn = prepareTxn(transaction);\n    try {\n      this.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n      await this.waitForWindowToLoad(this.currentSigntxPopup);\n\n      // Send transaction info\n      const res = await this.bridge.sendMessage(this.currentSigntxPopup, {\n        method: \"transaction\",\n        params: {\n          txn,\n          settings: {\n            disableLedgerNano: this.disableLedgerNano\n          },\n          options: signOptions\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      if (Array.isArray(res.data)) {\n        const result = [];\n        for (const t of res.data) {\n          t.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n          result.push(t);\n        }\n        return result;\n      }\n      res.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n      return res.data;\n    } catch (err) {\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign transaction.\n   * @param {WalletTransaction[]} txnsToSign Transactions to sign.\n   * @param {SignTxnsOpts} [opts] Sign transactions options object.\n   * @returns {(SignedTxnStr|null)[]} Returns an array of base64 encoding of the SignedTxn,\n   * or null where the transaction was not to be signed.\n   */\n  async signTxns(txnsToSign, opts) {\n    if (this.currentSigntxPopup) {\n      if (this.currentSigntxPopup.closed) {\n        this.currentSigntxPopup = null;\n      } else {\n        this.focusWindow(this.currentSigntxPopup);\n      }\n    }\n    try {\n      let txns = txnsToSign;\n      if (!Array.isArray(txnsToSign)) {\n        txns = [txnsToSign];\n      }\n      this.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n      await this.waitForWindowToLoad(this.currentSigntxPopup);\n\n      // Send transaction info\n      const res = await this.bridge.sendMessage(this.currentSigntxPopup, {\n        method: \"signTxns\",\n        params: {\n          txns,\n          settings: {\n            disableLedgerNano: this.disableLedgerNano\n          },\n          opts\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      if (res.status === \"error\") throw new SignTxnsError(res.message, res.code, res.data);\n      return res.data.map(r => r ? Buffer.from(r.blob, 'hex').toString('base64') : null);\n    } catch (err) {\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign a teal program.\n   * @param {Uint8Array|Base64} logic LogicSig program\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns logicsig blob\n   */\n  async signLogicSig(logic, address) {\n    if (this.currentSignLogicSigPopup) {\n      if (this.currentSignLogicSigPopup.closed) {\n        this.currentSignLogicSigPopup = null;\n      } else {\n        this.focusWindow(this.currentSignLogicSigPopup);\n      }\n    }\n    try {\n      this.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n      await this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n      // Send program\n      let logicInBase64 = logic;\n      if (logic.constructor === Uint8Array) logicInBase64 = Buffer.from(logic).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentSignLogicSigPopup, {\n        method: \"logicsig\",\n        params: {\n          logic: logicInBase64,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSignLogicSigPopup);\n      this.currentSignLogicSigPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentSignLogicSigPopup);\n      this.currentSignLogicSigPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign data to verify in a teal program.\n   * @param {Uint8Array|Base64} data Data to sign\n   * @param {Address} contractAddress Address of the contract that will verify the data\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns data signature\n   */\n  async tealSign(data, contractAddress, address) {\n    if (this.currentTealSignPopup) {\n      if (this.currentTealSignPopup.closed) {\n        this.currentTealSignPopup = null;\n      } else {\n        this.focusWindow(this.currentTealSignPopup);\n      }\n    }\n    try {\n      this.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n      await this.waitForWindowToLoad(this.currentTealSignPopup);\n\n      // Send program\n      let dataInBase64 = data;\n      if (data.constructor === Uint8Array) dataInBase64 = Buffer.from(data).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentTealSignPopup, {\n        method: \"tealsign\",\n        params: {\n          data: dataInBase64,\n          contractAddress: contractAddress,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentTealSignPopup);\n      this.currentTealSignPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentTealSignPopup);\n      this.currentTealSignPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign an arbitrary array of bytes.\n   * @param {Uint8Array} bytes Bytes to sign\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns bytes signature\n   */\n  async signBytes(bytes, address) {\n    if (this.currentSignBytesPopup) {\n      if (this.currentSignBytesPopup.closed) {\n        this.currentSignBytesPopup = null;\n      } else {\n        this.focusWindow(this.currentSignBytesPopup);\n      }\n    }\n    try {\n      this.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n      await this.waitForWindowToLoad(this.currentSignBytesPopup);\n      let messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentSignBytesPopup, {\n        method: \"signbytes\",\n        params: {\n          data: messageInBase64,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSignBytesPopup);\n      this.currentSignBytesPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentSignBytesPopup);\n      this.currentSignBytesPopup = null;\n      throw err;\n    }\n  }\n\n  /**\n   * @async\n   * @access private\n   * @description Wait until the window opened loads.\n   * @param {Window} targetWindow Window opened context.\n   * @param {number} retries Times to retry before throw an error.\n   * @returns {Promise<void>} Throw error if the window does not load.\n   */\n  async waitForWindowToLoad(targetWindow) {\n    let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    for (let i = 0; i < retries; i++) {\n      await sleep(300);\n      if (!targetWindow) break;\n      try {\n        const res = await bridge.sendMessage(targetWindow, {\n          method: \"status\"\n        }, this.url);\n        if (res.status == \"success\") return;\n      } catch (err) {\n        // Ignore error\n      }\n    }\n    throw new Error(Errors.WINDOW_NOT_LOADED);\n  }\n\n  /**\n   * @access private\n   * @description Safely close an opened window\n   * @param {Window} window Window object\n   * @returns {void}\n   */\n  closeWindow(window) {\n    if (window && !window.closed && window.close) {\n      window.close();\n    }\n  }\n\n  /**\n   * @access private\n   * @description Focus current popup\n   * @param {Window} window Window object\n   * @returns {void}\n   * @throws {\"Windows is opened\"}\n   */\n  focusWindow(window) {\n    if (window && window.focus) {\n      window.focus();\n      throw new Error(Errors.WINDOW_IS_OPENED);\n    } else {\n      throw new Error(Errors.INVALID_WINDOW);\n    }\n  }\n}\nmodule.exports = MyAlgoConnect;","map":{"version":3,"names":["openPopup","require","sleep","prepareTxn","Errors","SignTxnsError","Messaging","bridge","MyAlgoConnect","constructor","options","timeout","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","currentTealSignPopup","currentSignBytesPopup","waitForReply","disableLedgerNano","connect","settings","shouldSelectOneAccount","openManager","closed","focusWindow","waitForWindowToLoad","res","sendMessage","method","params","Object","assign","closeWindow","status","Error","message","data","accounts","err","signTransaction","transaction","signOptions","txn","Array","isArray","from","map","tx","result","t","blob","Uint8Array","Buffer","push","signTxns","txnsToSign","opts","txns","code","r","toString","signLogicSig","logic","address","logicInBase64","signedTeal","tealSign","contractAddress","dataInBase64","signature","signBytes","bytes","messageInBase64","targetWindow","retries","i","WINDOW_NOT_LOADED","window","close","focus","WINDOW_IS_OPENED","INVALID_WINDOW","module","exports"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/node_modules/@randlabs/myalgo-connect/lib/main.js"],"sourcesContent":["const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst { Errors, SignTxnsError } = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @description Base64 encoding of the canonical msgpack encoding of a SignedTxn\n * @typedef SignedTxnStr\n * @type {Base64}\n */\n\n/**\n * @description Application call transaction object\n * @typedef MultisigMetadata\n * @type {object}\n * @property {number} version Multisig version\n * @property {number} threshold Multisig threshold value\n * @property {Address[]} addrs Multisig cosigners\n */\n\n/**\n * @description ARC-0001 Transaction Object\n * @typedef WalletTransactions\n * @type {object}\n * @property {txs}\n * @property {Base64} txn Base64 encoding of the canonical msgpack encoding of a Transaction.\n * @property {Address} [authAddr] Authorized address used to sign the transaction when the account is rekeyed\n * @property {MultisigMetadata} [msig] Multisig metadata used to sign the transaction\n * @property {Address[]} [signers] Optional list of addresses that must sign the transactions\n * @property {SignedTxnStr} [stxn] Base64 encoding of the canonical msgpack encoding\n * of a SignedTxn corresponding to txn, when signers=[]\n * @property {string} [message] Optional message explaining the reason of the transaction\n * @property {string} [groupMessage] Message explaining the reason of this group of transaction.\n * Field only allowed in the first transaction of a group\n */\n\n/**\n * @description ARC-0001 Transaction Options Object\n * @typedef SignTxnsOpts\n * @type {object}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {WalletTransaction[]} txnsToSign Transactions to sign.\n\t * @param {SignTxnsOpts} [opts] Sign transactions options object.\n\t * @returns {(SignedTxnStr|null)[]} Returns an array of base64 encoding of the SignedTxn,\n\t * or null where the transaction was not to be signed.\n\t */\n\tasync signTxns(txnsToSign, opts) {\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet txns = txnsToSign;\n\t\t\tif (!Array.isArray(txnsToSign)) {\n\t\t\t\ttxns = [ txnsToSign ];\n\t\t\t}\n\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"signTxns\",\n\t\t\t\t\tparams: { txns, settings: { disableLedgerNano: this.disableLedgerNano }, opts },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new SignTxnsError(res.message, res.code, res.data);\n\n\t\t\treturn res.data.map(r => (r ? Buffer.from(r.blob, 'hex').toString('base64') : null));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}