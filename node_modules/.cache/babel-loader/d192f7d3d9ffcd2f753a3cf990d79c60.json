{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAssetReconfigureFields = exports.mkTransaction = exports.updateTxFee = exports.getTxFlags = exports.getTxASADefinition = exports.getTxFreezeAddress = exports.getTxReKeyToToAddress = exports.getTxCloseReminderToAddress = exports.getTxToAddress = exports.getAddress = exports.getTxFromAddress = exports.getTxRevokeAddress = exports.getFromAddress = exports.decodeText = exports.encodeNote = void 0;\nconst algosdk_1 = __importDefault(require(\"algosdk\"));\nconst errors_1 = require(\"../errors/errors\");\nconst errors_list_1 = require(\"../errors/errors-list\");\nconst types_1 = require(\"../types\");\nconst parsing_1 = require(\"./parsing\");\n/**\n * Encodes note to bytes\n * When `note` is provided then uses the TexEncoder to convert note to bytes.\n * When `noteb64` is provided then uses base64 decoder to convert base64 text to bytes.\n * Throws an error if both `note` and `noteb64` are provided.\n * */\nfunction encodeNote(note, noteb64) {\n  if (note === undefined && noteb64 === undefined) {\n    return undefined;\n  }\n  if (noteb64 && note) {\n    throw new errors_1.BuilderError(errors_list_1.ERRORS.ARGUMENTS.INVALID_TX_PARAM, {\n      param: \"note\",\n      error: \"You can't define both note and noteb64 transaction option\"\n    });\n  }\n  if (noteb64) {\n    return Buffer.from(noteb64, \"base64\");\n  }\n  if (note instanceof Uint8Array) return note;\n  const encoder = new TextEncoder();\n  return encoder.encode(note);\n}\nexports.encodeNote = encodeNote;\nfunction decodeText(bytes) {\n  if (bytes === undefined) return undefined;\n  return new TextDecoder().decode(bytes);\n}\nexports.decodeText = decodeText;\n/**\n * Returns from address from the transaction params depending on @SignType\n * @param execParams transaction execution params passed by user\n */\nfunction getFromAddress(execParams) {\n  if (execParams.sign === types_1.SignType.SecretKey) {\n    return execParams.fromAccountAddr || execParams.fromAccount.addr; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing\n  }\n\n  return execParams.fromAccountAddr;\n}\nexports.getFromAddress = getFromAddress;\n/**\n * Returns revocation targer address from the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxRevokeAddress(transaction) {\n  if (transaction.assetRevocationTarget !== undefined) {\n    return algosdk_1.default.encodeAddress(transaction.assetRevocationTarget.publicKey);\n  } else {\n    return \"CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\";\n  }\n}\nexports.getTxRevokeAddress = getTxRevokeAddress;\n/**\n * Returns from address from the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxFromAddress(transaction) {\n  return algosdk_1.default.encodeAddress(transaction.from.publicKey);\n}\nexports.getTxFromAddress = getTxFromAddress;\nfunction getAddress(account) {\n  if (account !== undefined) {\n    return algosdk_1.default.encodeAddress(account.publicKey);\n  } else {\n    return undefined;\n  }\n}\nexports.getAddress = getAddress;\n/**\n * Returns to address from the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxToAddress(transaction) {\n  return algosdk_1.default.encodeAddress(transaction.to.publicKey);\n}\nexports.getTxToAddress = getTxToAddress;\n/**\n * Returns to address from the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxCloseReminderToAddress(transaction) {\n  if (transaction.closeRemainderTo !== undefined) {\n    return algosdk_1.default.encodeAddress(transaction.closeRemainderTo.publicKey);\n  } else {\n    return undefined;\n  }\n}\nexports.getTxCloseReminderToAddress = getTxCloseReminderToAddress;\n/**\n * Returns  reKeyTo address of the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxReKeyToToAddress(transaction) {\n  if (transaction.reKeyTo !== undefined) {\n    return algosdk_1.default.encodeAddress(transaction.reKeyTo.publicKey);\n  } else {\n    return undefined;\n  }\n}\nexports.getTxReKeyToToAddress = getTxReKeyToToAddress;\n/**\n * Returns freeze target address of the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxFreezeAddress(transaction) {\n  if (transaction.freezeAccount !== undefined) {\n    return algosdk_1.default.encodeAddress(transaction.freezeAccount.publicKey);\n  } else {\n    return \"CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\";\n  }\n}\nexports.getTxFreezeAddress = getTxFreezeAddress;\n/**\n * Returns ASA definiton\n * @param transaction Transaction Object\n */\nfunction getTxASADefinition(transaction) {\n  const asaDef = {\n    clawback: getAddress(transaction.assetClawback),\n    manager: getAddress(transaction.assetManager),\n    reserve: getAddress(transaction.assetReserve),\n    freeze: getAddress(transaction.assetFreeze),\n    name: transaction.assetName,\n    total: transaction.assetTotal,\n    decimals: transaction.assetDecimals,\n    defaultFrozen: transaction.assetDefaultFrozen,\n    unitName: transaction.assetUnitName,\n    url: transaction.assetURL,\n    metadataHash: transaction.assetMetadataHash ? new TextDecoder().decode(transaction.assetMetadataHash) : undefined,\n    note: undefined\n  };\n  return asaDef;\n}\nexports.getTxASADefinition = getTxASADefinition;\n/**\n * Returns to address from the Transaction object\n * @param transaction Transaction Object\n */\nfunction getTxFlags(transaction) {\n  const transactionFlags = {};\n  transactionFlags.closeRemainderTo = getTxCloseReminderToAddress(transaction);\n  transactionFlags.lease = transaction.lease;\n  transactionFlags.note = decodeText(transaction.note);\n  transactionFlags.rekeyTo = getTxReKeyToToAddress(transaction);\n  transactionFlags.firstValid = transaction.firstRound;\n  transactionFlags.validRounds = transaction.lastRound - transaction.firstRound;\n  if (transaction.flatFee === true) {\n    transactionFlags.totalFee = transaction.fee;\n    transactionFlags.flatFee = true;\n  } else {\n    transactionFlags.feePerByte = transaction.fee;\n  }\n  return transactionFlags;\n}\nexports.getTxFlags = getTxFlags;\n/**\n * Using flatFee, if flatFee is true, set totalFee\n * https://developer.algorand.org/tutorials/setting-transaction-fee-javascript/\n * @param params Transaction parameters\n * @param tx SDK Transaction object\n */\nfunction updateTxFee(params, tx) {\n  if (params.totalFee !== undefined) {\n    tx.fee = params.totalFee;\n  }\n  return tx;\n}\nexports.updateTxFee = updateTxFee;\n/**\n * Converts ExecParams to Algo SDK Transaction.\n * ExecParams is a type safe and more friendly way to create Algorand transactions.\n *  + AlgoTransferParam used for transferring algo\n *  + AssetTransferParam used for transferring asset\n *  + ModifyAssetParam used to modify asset mutable properties\n *  + FreezeAssetParam used to freeze asset (only permitted by asa freeze account)\n *  + RevokeAssetParam used to revoke assets (by asset clawback)\n *  + DestroyAssetParam used to delete asset (by asset manager)\n *  + Deploy Params - deploy ASA, deploy App\n *  + OptIn Params - optInToASA, optInToApp\n *  + AppCallsParam (NoOp, Clear, Delete..)used for calling stateful smart contracts.\n For more advanced use-cases, please use `algosdk.tx` directly.\n NOTE: parseAppArgs is used to handle case when user passes appArgs similar to goal\n * @param execParams ExecParams\n * @param suggestedParams blockchain transaction suggested parameters (firstRound, lastRound, fee..)\n * @returns SDK Transaction object\n */\n/* eslint-disable sonarjs/cognitive-complexity */\nfunction mkTransaction(execParams, suggestedParams) {\n  const note = encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64);\n  const transactionType = execParams.type;\n  const fromAccountAddr = getFromAddress(execParams);\n  switch (execParams.type) {\n    case types_1.TransactionType.TransferAsset:\n      {\n        const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, execParams.toAccountAddr, execParams.payFlags.closeRemainderTo, undefined, execParams.amount, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.ModifyAsset:\n      {\n        const tx = algosdk_1.default.makeAssetConfigTxnWithSuggestedParams(fromAccountAddr, note, execParams.assetID, execParams.fields.manager !== \"\" ? execParams.fields.manager : undefined, execParams.fields.reserve !== \"\" ? execParams.fields.reserve : undefined, execParams.fields.freeze !== \"\" ? execParams.fields.freeze : undefined, execParams.fields.clawback !== \"\" ? execParams.fields.clawback : undefined, suggestedParams, false, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.FreezeAsset:\n      {\n        const tx = algosdk_1.default.makeAssetFreezeTxnWithSuggestedParams(fromAccountAddr, note, execParams.assetID, execParams.freezeTarget, execParams.freezeState, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.RevokeAsset:\n      {\n        const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, execParams.recipient, execParams.payFlags.closeRemainderTo, execParams.revocationTarget, execParams.amount, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.DestroyAsset:\n      {\n        const tx = algosdk_1.default.makeAssetDestroyTxnWithSuggestedParams(fromAccountAddr, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.TransferAlgo:\n      {\n        const tx = algosdk_1.default.makePaymentTxnWithSuggestedParams(fromAccountAddr, execParams.toAccountAddr, execParams.amountMicroAlgos, execParams.payFlags.closeRemainderTo, note, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.ClearApp:\n      {\n        const tx = algosdk_1.default.makeApplicationClearStateTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.DeleteApp:\n      {\n        const tx = algosdk_1.default.makeApplicationDeleteTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.CallApp:\n      {\n        const tx = algosdk_1.default.makeApplicationNoOpTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.CloseApp:\n      {\n        const tx = algosdk_1.default.makeApplicationCloseOutTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.DeployASA:\n      {\n        if (execParams.asaDef) {\n          // https://github.com/algorand/docs/blob/master/examples/assets/v2/javascript/AssetExample.js#L104\n          const tx = algosdk_1.default.makeAssetCreateTxnWithSuggestedParams(fromAccountAddr, note, BigInt(execParams.asaDef.total || 0),\n          // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing\n          execParams.asaDef.decimals, execParams.asaDef.defaultFrozen ? execParams.asaDef.defaultFrozen : false, execParams.asaDef.manager !== \"\" ? execParams.asaDef.manager : undefined, execParams.asaDef.reserve !== \"\" ? execParams.asaDef.reserve : undefined, execParams.asaDef.freeze !== \"\" ? execParams.asaDef.freeze : undefined, execParams.asaDef.clawback !== \"\" ? execParams.asaDef.clawback : undefined, execParams.asaDef.unitName, execParams.asaName, execParams.asaDef.url, execParams.asaDef.metadataHash, suggestedParams, execParams.payFlags.rekeyTo);\n          return updateTxFee(execParams.payFlags, tx);\n        } else {\n          throw new errors_1.BuilderError(errors_list_1.ERRORS.GENERAL.PARAM_PARSE_ERROR, {\n            reason: \"ASA Definition not found\",\n            source: execParams.asaName\n          });\n        }\n      }\n    case types_1.TransactionType.DeployApp:\n      {\n        const onComplete = algosdk_1.default.OnApplicationComplete.NoOpOC;\n        const appDef = execParams.appDefinition;\n        if (appDef.metaType === types_1.MetaType.BYTES) {\n          const tx = algosdk_1.default.makeApplicationCreateTxn(fromAccountAddr, suggestedParams, onComplete, appDef.approvalProgramBytes, appDef.clearProgramBytes, appDef.localInts, appDef.localBytes, appDef.globalInts, appDef.globalBytes, (0, parsing_1.parseAppArgs)(appDef.appArgs), appDef.accounts, appDef.foreignApps, appDef.foreignAssets, note, appDef.lease, execParams.payFlags.rekeyTo, appDef.extraPages);\n          return updateTxFee(execParams.payFlags, tx);\n        } else {\n          // we can't compile a source code nor access local files (as we do in algob) in the web mode.\n          throw new Error(\"Only MetaType.BYTES is supported for deploying apps in the web mode. Provided mode: \" + appDef.metaType);\n        }\n      }\n    case types_1.TransactionType.UpdateApp:\n      {\n        if (execParams.newAppCode.metaType === types_1.MetaType.BYTES) {\n          const tx = algosdk_1.default.makeApplicationUpdateTxn(fromAccountAddr, suggestedParams, execParams.appID, execParams.newAppCode.approvalProgramBytes, execParams.newAppCode.clearProgramBytes, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n          return updateTxFee(execParams.payFlags, tx);\n        } else {\n          // we can't compile a source code nor access local files (as we do in algob) in the web mode.\n          throw new Error(\"Only MetaType.BYTES is supported for deploying apps in the web mode. Provided mode: \" + execParams.newAppCode.metaType);\n        }\n      }\n    case types_1.TransactionType.OptInToApp:\n      {\n        const tx = algosdk_1.default.makeApplicationOptInTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.OptInASA:\n      {\n        const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, fromAccountAddr, undefined, undefined, 0, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    case types_1.TransactionType.KeyRegistration:\n      {\n        const tx = algosdk_1.default.makeKeyRegistrationTxnWithSuggestedParams(fromAccountAddr, note, execParams.voteKey, execParams.selectionKey, execParams.voteFirst, execParams.voteLast, execParams.voteKeyDilution, suggestedParams, execParams.payFlags.rekeyTo, execParams.nonParticipation);\n        return updateTxFee(execParams.payFlags, tx);\n      }\n    default:\n      {\n        throw new errors_1.BuilderError(errors_list_1.ERRORS.GENERAL.TRANSACTION_TYPE_ERROR, {\n          transaction: transactionType\n        });\n      }\n  }\n}\nexports.mkTransaction = mkTransaction;\n/**\n * Returns the fields necessary for an Asset Modification\n * @param transaction Transaction Object\n */\nfunction getAssetReconfigureFields(transaction) {\n  const modificationFields = {};\n  const encodedTransaction = transaction.get_obj_for_encoding();\n  if (encodedTransaction.apar !== undefined) {\n    modificationFields.clawback = encodedTransaction.apar.c !== undefined ? algosdk_1.default.encodeAddress(transaction.assetClawback.publicKey) : \"\";\n    modificationFields.freeze = encodedTransaction.apar.f !== undefined ? algosdk_1.default.encodeAddress(transaction.assetFreeze.publicKey) : \"\";\n    modificationFields.manager = encodedTransaction.apar.m !== undefined ? algosdk_1.default.encodeAddress(transaction.assetManager.publicKey) : \"\";\n    modificationFields.reserve = encodedTransaction.apar.r !== undefined ? algosdk_1.default.encodeAddress(transaction.assetReserve.publicKey) : \"\";\n  }\n  return modificationFields;\n}\nexports.getAssetReconfigureFields = getAssetReconfigureFields;","map":{"version":3,"mappings":"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","names":["encodeNote","note","noteb64","undefined","errors_1","errors_list_1","ARGUMENTS","INVALID_TX_PARAM","param","error","Buffer","from","Uint8Array","encoder","TextEncoder","encode","exports","decodeText","bytes","TextDecoder","decode","getFromAddress","execParams","sign","types_1","SecretKey","fromAccountAddr","fromAccount","addr","getTxRevokeAddress","transaction","assetRevocationTarget","algosdk_1","encodeAddress","publicKey","getTxFromAddress","getAddress","account","getTxToAddress","to","getTxCloseReminderToAddress","closeRemainderTo","getTxReKeyToToAddress","reKeyTo","getTxFreezeAddress","freezeAccount","getTxASADefinition","asaDef","clawback","assetClawback","manager","assetManager","reserve","assetReserve","freeze","assetFreeze","name","assetName","total","assetTotal","decimals","assetDecimals","defaultFrozen","assetDefaultFrozen","unitName","assetUnitName","url","assetURL","metadataHash","assetMetadataHash","getTxFlags","transactionFlags","lease","rekeyTo","firstValid","firstRound","validRounds","lastRound","flatFee","totalFee","fee","feePerByte","updateTxFee","params","tx","mkTransaction","suggestedParams","payFlags","transactionType","type","TransferAsset","makeAssetTransferTxnWithSuggestedParams","toAccountAddr","amount","assetID","ModifyAsset","makeAssetConfigTxnWithSuggestedParams","fields","FreezeAsset","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","RevokeAsset","recipient","revocationTarget","DestroyAsset","makeAssetDestroyTxnWithSuggestedParams","TransferAlgo","makePaymentTxnWithSuggestedParams","amountMicroAlgos","ClearApp","makeApplicationClearStateTxn","appID","appArgs","accounts","foreignApps","foreignAssets","DeleteApp","makeApplicationDeleteTxn","CallApp","makeApplicationNoOpTxn","CloseApp","makeApplicationCloseOutTxn","DeployASA","makeAssetCreateTxnWithSuggestedParams","BigInt","asaName","GENERAL","PARAM_PARSE_ERROR","reason","source","DeployApp","onComplete","OnApplicationComplete","NoOpOC","appDef","appDefinition","metaType","BYTES","makeApplicationCreateTxn","approvalProgramBytes","clearProgramBytes","localInts","localBytes","globalInts","globalBytes","extraPages","Error","UpdateApp","newAppCode","makeApplicationUpdateTxn","OptInToApp","makeApplicationOptInTxn","OptInASA","KeyRegistration","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","TRANSACTION_TYPE_ERROR","getAssetReconfigureFields","modificationFields","encodedTransaction","get_obj_for_encoding","apar","c","f","m","r"],"sourceRoot":"","sources":["../../src/lib/txn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}