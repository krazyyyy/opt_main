{"ast":null,"code":"import JSONbigWithoutConfig from 'json-bigint';\nimport IntDecoding from '../types/intDecoding';\nconst JSONbig = JSONbigWithoutConfig({\n  useNativeBigInt: true,\n  strict: true\n});\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Options object to configure how integers in\n *   this request's JSON response will be decoded. Use the `intDecoding`\n *   property with one of the following options:\n *\n *   * \"default\": All integers will be decoded as Numbers, meaning any values greater than\n *     Number.MAX_SAFE_INTEGER will lose precision.\n *   * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n *     Number.MAX_SAFE_INTEGER an error will be thrown.\n *   * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n *     Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n *   * \"bigint\": All integers will be decoded as BigInts.\n *\n *   Defaults to \"default\" if not included.\n */\nexport function parseJSON(str, options) {\n  const intDecoding = options && options.intDecoding ? options.intDecoding : IntDecoding.DEFAULT;\n  return JSONbig.parse(str, (_, value) => {\n    if (value != null && typeof value === 'object' && Object.getPrototypeOf(value) == null) {\n      // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n      // let us remedy that\n      Object.setPrototypeOf(value, Object.prototype);\n    }\n    if (typeof value === 'bigint') {\n      if (intDecoding === 'safe' && value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);\n      }\n      if (intDecoding === 'bigint' || intDecoding === 'mixed' && value > Number.MAX_SAFE_INTEGER) {\n        return value;\n      }\n      // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n      // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n      return Number(value);\n    }\n    if (typeof value === 'number') {\n      if (intDecoding === 'bigint' && Number.isInteger(value)) {\n        return BigInt(value);\n      }\n    }\n    return value;\n  });\n}\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */\nexport function arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  return Array.from(a).every((val, i) => val === b[i]);\n}\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */\nexport function concatArrays() {\n  for (var _len = arguments.length, arrs = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrs[_key] = arguments[_key];\n  }\n  const size = arrs.reduce((sum, arr) => sum + arr.length, 0);\n  const c = new Uint8Array(size);\n  let offset = 0;\n  for (let i = 0; i < arrs.length; i++) {\n    c.set(arrs[i], offset);\n    offset += arrs[i].length;\n  }\n  return c;\n}\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */\nexport function removeUndefinedProperties(obj) {\n  const mutableCopy = {\n    ...obj\n  };\n  Object.keys(mutableCopy).forEach(key => {\n    if (typeof mutableCopy[key] === 'undefined') delete mutableCopy[key];\n  });\n  return mutableCopy;\n}\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */\nexport function isNode() {\n  return typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node !== 'undefined';\n}","map":{"version":3,"mappings":"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","names":["JSONbigWithoutConfig","IntDecoding","JSONbig","useNativeBigInt","strict","parseJSON","str","options","intDecoding","DEFAULT","parse","_","value","Object","getPrototypeOf","setPrototypeOf","prototype","Number","MAX_SAFE_INTEGER","Error","toString","isInteger","BigInt","arrayEqual","a","b","length","Array","from","every","val","i","concatArrays","arrs","size","reduce","sum","arr","c","Uint8Array","offset","set","removeUndefinedProperties","obj","mutableCopy","keys","forEach","key","isNode","process","versions","node"],"sourceRoot":"","sources":["../../../src/utils/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}