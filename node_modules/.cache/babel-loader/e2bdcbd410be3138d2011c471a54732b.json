{"ast":null,"code":"const address = require('../encoding/address');\nconst encoding = require('../encoding/encoding');\nconst group = require('../group');\nconst logic = require('../logic/logic');\nconst logicSig = require('../logicsig');\nconst nacl = require('../nacl/naclWrappers');\nconst templates = require('./templates');\nconst transaction = require('../transaction');\nclass DynamicFee {\n  /**\n   * DynamicFee contract allows you to create a transaction without\n   * specifying the fee. The fee will be determined at the moment of\n   * transfer.\n   *\n   * @deprecated This feature will be removed in v2.\n   *\n   * Constructor Parameters:\n   * @param {string} receiver: address to receive the assets\n   * @param {int} amount: amount of assets to transfer\n   * @param {int} firstValid: first valid round for the transaction\n   * @param {int} lastValid:  last valid round for the transaction\n   * @param {string} closeRemainder: if you would like to close the account after the transfer, specify the address that would recieve the remainder, else leave undefined\n   * @param {string} lease: leave undefined to generate a random lease, or supply a lease as base64\n   * @returns {DynamicFee}\n   */\n  constructor(receiver, amount, firstValid, lastValid, closeRemainder, lease) {\n    // don't need to validate receiver, closeremainderto - insert will handle that\n    if (!Number.isSafeInteger(amount) || amount < 0) throw Error('amount must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(firstValid) || firstValid < 0) throw Error('firstValid must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(lastValid) || lastValid < 0) throw Error('lastValid must be a positive number and smaller than 2^53-1');\n    if (typeof closeRemainder === 'undefined') {\n      // eslint-disable-next-line no-param-reassign\n      closeRemainder = address.ALGORAND_ZERO_ADDRESS_STRING;\n    }\n    if (typeof lease === 'undefined') {\n      const leaseBytes = nacl.randomBytes(32);\n      // eslint-disable-next-line no-param-reassign\n      lease = Buffer.from(leaseBytes).toString('base64');\n    }\n    const referenceProgramB64 = 'ASAFAgEHBgUmAyD+vKC7FEpaTqe0OKRoGsgObKEFvLYH/FZTJclWlfaiEyDmmpYeby1feshmB5JlUr6YI17TM2PKiJGLuck4qRW2+SB/g7Flf/H8U7ktwYFIodZd/C1LH6PWdyhK3dIAEm2QaTIEIhIzABAjEhAzAAcxABIQMwAIMQESEDEWIxIQMRAjEhAxBygSEDEJKRIQMQgkEhAxAiUSEDEEIQQSEDEGKhIQ';\n    const referenceProgramBytes = Buffer.from(referenceProgramB64, 'base64');\n    const referenceOffsets = [5 /* firstValid */, 6 /* lastValid */, 7 /* receiver */, 11 /* closeRemainder */, 44 /* lease */, 76];\n    const injectionVector = [amount, firstValid, lastValid, receiver, closeRemainder, lease];\n    const injectionTypes = [templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.ADDRESS, templates.valTypes.ADDRESS, templates.valTypes.BASE64];\n    const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n    this.programBytes = injectedBytes;\n    const lsig = new logicSig.LogicSig(injectedBytes, undefined);\n    this.address = lsig.address();\n  }\n  /**\n   * returns the program bytes\n   * @returns {Uint8Array}\n   */\n  getProgram() {\n    return this.programBytes;\n  }\n  /**\n   * returns the string address of the contract\n   * @returns {string}\n   */\n  getAddress() {\n    return this.address;\n  }\n}\n/**\n * signDynamicFee returns the main transaction and signed logic needed to complete the transfer.\n * These should be sent to the fee payer, who can use GetDynamicFeeTransactions\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract: the bytearray representing the contract\n * @param {Uint8Array} secretKey: the secret key for building the logic sig\n * @param {string} genesisHash: the genesisHash to use for the txn\n * @returns {Object} object containing json of txnbuilder constructor arguments under \"txn\" and signed logicsig under \"lsig\"\n */\nfunction signDynamicFee(contract, secretKey, genesisHash) {\n  const programOutputs = logic.readProgram(contract, undefined);\n  const ints = programOutputs[0];\n  const byteArrays = programOutputs[1];\n  const keys = nacl.keyPairFromSecretKey(secretKey);\n  const from = address.encodeAddress(keys.publicKey);\n  const to = address.encodeAddress(byteArrays[0]);\n  const fee = 0;\n  const amount = ints[2];\n  const closeRemainderTo = address.encodeAddress(byteArrays[1]);\n  const firstRound = ints[3];\n  const lastRound = ints[4];\n  const lease = new Uint8Array(byteArrays[2]);\n  const txn = {\n    from,\n    to,\n    fee,\n    amount,\n    closeRemainderTo,\n    firstRound,\n    lastRound,\n    genesisHash,\n    type: 'pay',\n    lease\n  };\n  const lsig = new logicSig.LogicSig(contract, undefined);\n  lsig.sign(secretKey);\n  return {\n    txn,\n    lsig\n  };\n}\n/**\n * getDynamicFeeTransactions creates and signs the secondary dynamic fee transaction, updates\n * transaction fields, and signs as the fee payer; it returns both\n * transactions as bytes suitable for sendRaw.\n *\n * @deprecated This feature will be removed in v2.\n *\n * Parameters:\n * @param {dict} txn - main transaction from payer's signDynamicFee output (a dict of constructor arguments, NOT a transaction.Transaction)\n * @param {LogicSig} lsig - the signed logic received from the payer's signDynamicFee output\n * @param {Uint8Array} privateKey - the private key for the account that pays the fee\n * @param {int} fee - fee per byte for both transactions\n *\n * @throws on invalid lsig\n */\n/* eslint-disable no-param-reassign */\nfunction getDynamicFeeTransactions(txn, lsig, privateKey, fee) {\n  if (!lsig.verify(address.decodeAddress(txn.from).publicKey)) {\n    throw new Error('invalid signature');\n  }\n  txn.fee = fee;\n  if (txn.fee < transaction.ALGORAND_MIN_TX_FEE) {\n    txn.fee = transaction.ALGORAND_MIN_TX_FEE;\n  }\n  const keys = nacl.keyPairFromSecretKey(privateKey);\n  const from = address.encodeAddress(keys.publicKey);\n  // must remove lease and re-add using addLease so that fee calculation will match other SDKs\n  const {\n    lease\n  } = txn;\n  delete txn.lease;\n  const txnObj = new transaction.Transaction(txn);\n  txnObj.addLease(lease, fee);\n  const feePayTxn = {\n    from,\n    to: txn.from,\n    fee,\n    amount: txnObj.fee,\n    firstRound: txn.firstRound,\n    lastRound: txn.lastRound,\n    genesisHash: txn.genesisHash,\n    type: 'pay'\n  };\n  const feePayTxnObj = new transaction.Transaction(feePayTxn);\n  feePayTxnObj.addLease(lease, fee);\n  const txnGroup = group.assignGroupID([feePayTxnObj, txnObj], undefined);\n  const feePayTxnWithGroup = txnGroup[0];\n  const txnObjWithGroup = txnGroup[1];\n  const lstx = {\n    lsig: lsig.get_obj_for_encoding(),\n    txn: txnObjWithGroup.get_obj_for_encoding()\n  };\n  const stx1 = feePayTxnWithGroup.signTxn(privateKey);\n  const stx2 = encoding.encode(lstx);\n  const concatStx = new Uint8Array(stx1.length + stx2.length);\n  concatStx.set(stx1);\n  concatStx.set(stx2, stx1.length);\n  return concatStx;\n}\n/* eslint-enable no-param-reassign */\nmodule.exports = {\n  DynamicFee,\n  getDynamicFeeTransactions,\n  signDynamicFee\n};","map":{"version":3,"mappings":"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","names":["address","require","encoding","group","logic","logicSig","nacl","templates","transaction","DynamicFee","constructor","receiver","amount","firstValid","lastValid","closeRemainder","lease","Number","isSafeInteger","Error","ALGORAND_ZERO_ADDRESS_STRING","leaseBytes","randomBytes","Buffer","from","toString","referenceProgramB64","referenceProgramBytes","referenceOffsets","injectionVector","injectionTypes","valTypes","INT","ADDRESS","BASE64","injectedBytes","inject","programBytes","lsig","LogicSig","undefined","getProgram","getAddress","signDynamicFee","contract","secretKey","genesisHash","programOutputs","readProgram","ints","byteArrays","keys","keyPairFromSecretKey","encodeAddress","publicKey","to","fee","closeRemainderTo","firstRound","lastRound","Uint8Array","txn","type","sign","getDynamicFeeTransactions","privateKey","verify","decodeAddress","ALGORAND_MIN_TX_FEE","txnObj","Transaction","addLease","feePayTxn","feePayTxnObj","txnGroup","assignGroupID","feePayTxnWithGroup","txnObjWithGroup","lstx","get_obj_for_encoding","stx1","signTxn","stx2","encode","concatStx","length","set","module","exports"],"sourceRoot":"","sources":["../../../src/logicTemplates/dynamicfee.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}