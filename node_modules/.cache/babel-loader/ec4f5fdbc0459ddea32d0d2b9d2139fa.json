{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nexport default class LookupApplicationLogs extends JSONRequest {\n  /**\n   * Returns log messages generated by the passed in application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n   * @param appID - The ID of the application which generated the logs.\n   * @category GET\n   */\n  constructor(c, intDecoding, appID) {\n    super(c, intDecoding);\n    this.appID = appID;\n    this.appID = appID;\n  }\n  /**\n   * @returns `/v2/applications/${appID}/logs`\n   */\n  path() {\n    return `/v2/applications/${this.appID}/logs`;\n  }\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\n   * Include results at or after the specified min-round.\n   *\n   * #### Example\n   * ```typescript\n   * const minRound = 18309917;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .minRound(minRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\n   * Include results at or before the specified max-round.\n   *\n   * #### Example\n   * ```typescript\n   * const maxRound = 18309917;\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .maxRound(maxRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const appLogsPage1 = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const appLogsPage2 = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .limit(maxResults)\n   *        .nextToken(appLogsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results.\n   * @category query\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\n   * Only include transactions with this sender address.\n   *\n   * #### Example\n   * ```typescript\n   * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .sender(sender)\n   *        .do();\n   * ```\n   *\n   * @param senderAddress\n   * @category query\n   */\n  sender(senderAddress) {\n    this.query['sender-address'] = senderAddress;\n    return this;\n  }\n  /**\n   * Lookup the specific transaction by ID.\n   *\n   * #### Example\n   * ```typescript\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n   * const appLogs = await indexerClient\n   *        .lookupApplicationLogs(appId)\n   *        .txid(txId)\n   *        .do();\n   * ```\n   *\n   * @param txid\n   * @category query\n   */\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAIxC,eAAc,MAAOC,qBAAsB,SAAQD,WAAW;EAC5D;;;;;;;;;;;;;EAaAE,YAAYC,CAAa,EAAEC,WAAwB,EAAUC,KAAa;IACxE,KAAK,CAACF,CAAC,EAAEC,WAAW,CAAC;IADsC,UAAK,GAALC,KAAK;IAEhE,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA;;;EAGAC,IAAI;IACF,OAAO,oBAAoB,IAAI,CAACD,KAAK,OAAO;EAC9C;EAEA;;;;;;;;;;;;;;EAcAE,KAAK,CAACA,KAAa;IACjB,IAAI,CAACC,KAAK,CAACD,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,QAAQ,CAACC,KAAa;IACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQ,CAACD,KAAa;IACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,SAAS,CAACA,SAAiB;IACzB,IAAI,CAACJ,KAAK,CAACK,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,MAAM,CAACC,aAAqB;IAC1B,IAAI,CAACP,KAAK,CAAC,gBAAgB,CAAC,GAAGO,aAAa;IAC5C,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAI,CAACA,IAAY;IACf,IAAI,CAACR,KAAK,CAACQ,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb","names":["JSONRequest","LookupApplicationLogs","constructor","c","intDecoding","appID","path","limit","query","minRound","round","maxRound","nextToken","next","sender","senderAddress","txid"],"sourceRoot":"","sources":["../../../../../src/client/v2/indexer/lookupApplicationLogs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}