{"ast":null,"code":"import HTTPClient from '../client';\nimport IntDecoding from '../../types/intDecoding';\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader() {\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let headerIdentifier = arguments.length > 1 ? arguments[1] : undefined;\n  const tokenHeader = {};\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n  return typeof tbc.get === 'function';\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default class ServiceClient {\n  constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port) {\n    let defaultHeaders = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n    this.intDecoding = IntDecoding.DEFAULT;\n  }\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,UAAU,MAAM,WAAW;AAClC,OAAOC,WAAW,MAAM,yBAAyB;AAUjD;;;;;AAKA,SAASC,+BAA+B,GAEC;EAAA,IADvCC,4EAAgB,EAAE;EAAA,IAClBC,gBAAuC;EAEvC,MAAMC,WAAW,GAAG,EAAE;EACtBA,WAAW,CAACD,gBAAgB,CAAC,GAAGD,KAAK;EACrC,OAAOE,WAA0B;AACnC;AAEA,SAASC,gBAAgB,CACvBC,GAA0C;EAE1C,OAAO,OAAQA,GAAsB,CAACC,GAAG,KAAK,UAAU;AAC1D;AAEA;;;AAGA,eAAc,MAAgBC,aAAa;EAMzCC,YACEC,qBAA4C,EAC5CC,4BAAmE,EACnEC,UAAkB,EAClBC,IAAsB,EACkB;IAAA,IAAxCC,qFAAsC,EAAE;IAExC,IAAIT,gBAAgB,CAACM,4BAA4B,CAAC,EAAE;MAClD;MACA,IAAI,CAACI,CAAC,GAAG,IAAIhB,UAAU,CAACY,4BAA4B,CAAC;KACtD,MAAM;MACL;MACA;MACA,IAAIP,WAAwB;MAC5B,IAAI,OAAOO,4BAA4B,KAAK,QAAQ,EAAE;QACpDP,WAAW,GAAGH,+BAA+B,CAC3CU,4BAA4B,EAC5BD,qBAAqB,CACtB;OACF,MAAM;QACLN,WAAW,GAAGO,4BAA4B;;MAG5C,IAAI,CAACI,CAAC,GAAG,IAAIhB,UAAU,CAACK,WAAW,EAAEQ,UAAU,EAAEC,IAAI,EAAEC,cAAc,CAAC;;IAGxE,IAAI,CAACE,WAAW,GAAGhB,WAAW,CAACiB,OAAO;EACxC;EAEA;;;;;;EAMAC,cAAc,CAACC,MAAmB;IAChC,IAAI,CAACH,WAAW,GAAGG,MAAM;EAC3B;EAEA;;;EAGAC,cAAc;IACZ,OAAO,IAAI,CAACJ,WAAW;EACzB","names":["HTTPClient","IntDecoding","convertTokenStringToTokenHeader","token","headerIdentifier","tokenHeader","isBaseHTTPClient","tbc","get","ServiceClient","constructor","tokenHeaderIdentifier","tokenHeaderOrStrOrBaseClient","baseServer","port","defaultHeaders","c","intDecoding","DEFAULT","setIntEncoding","method","getIntEncoding"],"sourceRoot":"","sources":["../../../../src/client/v2/serviceClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}