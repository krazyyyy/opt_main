{"ast":null,"code":"const {\n  default: algosdk\n} = require('algosdk');\nconst {\n  NetworkArray,\n  PurestakeAlgodURL,\n  LOCAL_HOST,\n  PurestakeIndexerURL,\n  AlgoNodeAlgodURL,\n  AlgoNodeIndexerURL\n} = require('../constants/constants');\nconst PurestakeToken = {\n  'X-API-Key': 'TgxWI5WBWNUlKgWik5j4ayezLDkb71J5VTw1mzd6'\n};\nfunction getNetworkAlgodConfig(networkType) {\n  switch (networkType) {\n    case NetworkArray[0]:\n      return {\n        token: '',\n        server: AlgoNodeAlgodURL.MAIN_NET_URL,\n        port: ''\n      };\n    case NetworkArray[1]:\n      return {\n        token: '',\n        server: AlgoNodeAlgodURL.TEST_NET_URL,\n        port: ''\n      };\n    case NetworkArray[2]:\n      return {\n        token: '',\n        server: PurestakeAlgodURL.BETA_NET_URL,\n        port: ''\n      };\n    case NetworkArray[3]:\n      return {\n        token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n        server: LOCAL_HOST,\n        port: 4001\n      };\n    default:\n      return {\n        token: '',\n        server: '',\n        port: ''\n      };\n  }\n}\nfunction getNetworkIndexerConfig(networkType) {\n  switch (networkType) {\n    case NetworkArray[0]:\n      return {\n        token: '',\n        server: AlgoNodeIndexerURL.MAIN_NET_URL,\n        port: ''\n      };\n    case NetworkArray[1]:\n      return {\n        token: '',\n        port: '',\n        server: AlgoNodeIndexerURL.TEST_NET_URL\n      };\n    case NetworkArray[2]:\n      return {\n        token: PurestakeToken,\n        server: PurestakeIndexerURL.BETA_NET_URL,\n        port: ''\n      };\n    case NetworkArray[3]:\n      return {\n        token: '',\n        server: LOCAL_HOST,\n        port: 8980\n      };\n    default:\n      return {\n        token: '',\n        server: '',\n        port: ''\n      };\n  }\n}\nconst indexerClient = network => {\n  const walletURL = getNetworkIndexerConfig(network);\n  return new algosdk.Indexer(walletURL.token, walletURL.server, walletURL.port);\n};\nconst algodClient = network => {\n  const walletURL = getNetworkAlgodConfig(network);\n  return new algosdk.Algodv2(walletURL.token, walletURL.server, walletURL.port);\n};\nmodule.exports = {\n  indexerClient,\n  algodClient,\n  getNetworkAlgodConfig\n};","map":{"version":3,"names":["default","algosdk","require","NetworkArray","PurestakeAlgodURL","LOCAL_HOST","PurestakeIndexerURL","AlgoNodeAlgodURL","AlgoNodeIndexerURL","PurestakeToken","getNetworkAlgodConfig","networkType","token","server","MAIN_NET_URL","port","TEST_NET_URL","BETA_NET_URL","getNetworkIndexerConfig","indexerClient","network","walletURL","Indexer","algodClient","Algodv2","module","exports"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/utils/algob.config.js"],"sourcesContent":["const { default: algosdk } = require('algosdk');\nconst {\n    NetworkArray,\n    PurestakeAlgodURL,\n    LOCAL_HOST,\n    PurestakeIndexerURL,\n    AlgoNodeAlgodURL,\n    AlgoNodeIndexerURL\n} = require('../constants/constants');\n\nconst PurestakeToken = {\n    'X-API-Key': 'TgxWI5WBWNUlKgWik5j4ayezLDkb71J5VTw1mzd6'\n};\nfunction getNetworkAlgodConfig(networkType) {\n    switch (networkType) {\n        case NetworkArray[0]:\n            return {\n                token: '',\n                server: AlgoNodeAlgodURL.MAIN_NET_URL,\n                port: ''\n            };\n        case NetworkArray[1]:\n            return {\n                token: '',\n                server: AlgoNodeAlgodURL.TEST_NET_URL,\n                port: ''\n            };\n        case NetworkArray[2]:\n            return {\n                token: '',\n                server: PurestakeAlgodURL.BETA_NET_URL,\n                port: ''\n            };\n        case NetworkArray[3]:\n            return {\n                token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n                server: LOCAL_HOST,\n                port: 4001\n            };\n        default:\n            return {\n                token: '',\n                server: '',\n                port: ''\n            };\n    }\n}\n\nfunction getNetworkIndexerConfig(networkType) {\n    switch (networkType) {\n        case NetworkArray[0]:\n            return {\n                token: '',\n                server: AlgoNodeIndexerURL.MAIN_NET_URL,\n                port: ''\n            };\n        case NetworkArray[1]:\n            return {\n                token: '',\n                port: '',\n                server: AlgoNodeIndexerURL.TEST_NET_URL\n            };\n        case NetworkArray[2]:\n            return {\n                token: PurestakeToken,\n                server: PurestakeIndexerURL.BETA_NET_URL,\n                port: ''\n            };\n        case NetworkArray[3]:\n            return {\n                token: '',\n                server: LOCAL_HOST,\n                port: 8980\n            };\n        default:\n            return {\n                token: '',\n                server: '',\n                port: ''\n            };\n    }\n}\n\nconst indexerClient = (network) => {\n    const walletURL = getNetworkIndexerConfig(network);\n    return new algosdk.Indexer(\n        walletURL.token,\n        walletURL.server,\n        walletURL.port\n    );\n};\n\nconst algodClient = (network) => {\n    const walletURL = getNetworkAlgodConfig(network);\n\n    return new algosdk.Algodv2(\n        walletURL.token,\n        walletURL.server,\n        walletURL.port\n    );\n};\n\nmodule.exports = {\n    indexerClient,\n    algodClient,\n    getNetworkAlgodConfig\n};\n"],"mappings":"AAAA,MAAM;EAAEA,OAAO,EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/C,MAAM;EACFC,YAAY;EACZC,iBAAiB;EACjBC,UAAU;EACVC,mBAAmB;EACnBC,gBAAgB;EAChBC;AACJ,CAAC,GAAGN,OAAO,CAAC,wBAAwB,CAAC;AAErC,MAAMO,cAAc,GAAG;EACnB,WAAW,EAAE;AACjB,CAAC;AACD,SAASC,qBAAqB,CAACC,WAAW,EAAE;EACxC,QAAQA,WAAW;IACf,KAAKR,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTC,MAAM,EAAEN,gBAAgB,CAACO,YAAY;QACrCC,IAAI,EAAE;MACV,CAAC;IACL,KAAKZ,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTC,MAAM,EAAEN,gBAAgB,CAACS,YAAY;QACrCD,IAAI,EAAE;MACV,CAAC;IACL,KAAKZ,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTC,MAAM,EAAET,iBAAiB,CAACa,YAAY;QACtCF,IAAI,EAAE;MACV,CAAC;IACL,KAAKZ,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,kEAAkE;QACzEC,MAAM,EAAER,UAAU;QAClBU,IAAI,EAAE;MACV,CAAC;IACL;MACI,OAAO;QACHH,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVE,IAAI,EAAE;MACV,CAAC;EAAC;AAEd;AAEA,SAASG,uBAAuB,CAACP,WAAW,EAAE;EAC1C,QAAQA,WAAW;IACf,KAAKR,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTC,MAAM,EAAEL,kBAAkB,CAACM,YAAY;QACvCC,IAAI,EAAE;MACV,CAAC;IACL,KAAKZ,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTG,IAAI,EAAE,EAAE;QACRF,MAAM,EAAEL,kBAAkB,CAACQ;MAC/B,CAAC;IACL,KAAKb,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAEH,cAAc;QACrBI,MAAM,EAAEP,mBAAmB,CAACW,YAAY;QACxCF,IAAI,EAAE;MACV,CAAC;IACL,KAAKZ,YAAY,CAAC,CAAC,CAAC;MAChB,OAAO;QACHS,KAAK,EAAE,EAAE;QACTC,MAAM,EAAER,UAAU;QAClBU,IAAI,EAAE;MACV,CAAC;IACL;MACI,OAAO;QACHH,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVE,IAAI,EAAE;MACV,CAAC;EAAC;AAEd;AAEA,MAAMI,aAAa,GAAIC,OAAO,IAAK;EAC/B,MAAMC,SAAS,GAAGH,uBAAuB,CAACE,OAAO,CAAC;EAClD,OAAO,IAAInB,OAAO,CAACqB,OAAO,CACtBD,SAAS,CAACT,KAAK,EACfS,SAAS,CAACR,MAAM,EAChBQ,SAAS,CAACN,IAAI,CACjB;AACL,CAAC;AAED,MAAMQ,WAAW,GAAIH,OAAO,IAAK;EAC7B,MAAMC,SAAS,GAAGX,qBAAqB,CAACU,OAAO,CAAC;EAEhD,OAAO,IAAInB,OAAO,CAACuB,OAAO,CACtBH,SAAS,CAACT,KAAK,EACfS,SAAS,CAACR,MAAM,EAChBQ,SAAS,CAACN,IAAI,CACjB;AACL,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAG;EACbP,aAAa;EACbI,WAAW;EACXb;AACJ,CAAC"},"metadata":{},"sourceType":"module"}