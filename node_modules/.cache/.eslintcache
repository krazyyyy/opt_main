[{"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\store.js":"3","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\feedback_reducer.js":"4","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Admin.js":"5","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\rootReducer.js":"6","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Lottery.js":"7","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Footer.js":"8","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\PrivacyPolicy.jsx":"9","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\TermsCondition.jsx":"10","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Home.jsx":"11","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\About.jsx":"12","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\NewPage2.jsx":"13","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\LoginModal.jsx":"14","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Layout.jsx":"15","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Home_Logged.jsx":"16","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\CurrentAccount.jsx":"17","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\AdminCards.js":"18","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\CustodialWalletTable.js":"19","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\CustomTextField.js":"20","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Loader.js":"21","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Tooltip.js":"22","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\LotteryTable.js":"23","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\constants.js":"24","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\actions.js":"25","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\reducer.js":"26","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\gen_accts_and_whitelist.js":"27","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\register.js":"28","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\dispense_lottery.js":"29","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\vote.js":"30","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\close_custodial_wallets.js":"31","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\set_gov_reward_rate.js":"32","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\withdraw_rewards.js":"33","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\common.js":"34","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\deposit.js":"35","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\ConnectWallet.js":"36","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Form.js":"37","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\date.js":"38","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\functions.js":"39","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\WithDraw.jsx":"40","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomePara.jsx":"41","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomeHeading.jsx":"42","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Tagline.jsx":"43","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Paragraph.jsx":"44","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\BtnGroups.jsx":"45","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Tab.jsx":"46","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Heading.jsx":"47","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\SubHeading.jsx":"48","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\InfoGraphic.jsx":"49","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\PrizeMoney.jsx":"50","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Wallet.jsx":"51","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Ring.jsx":"52","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Table.jsx":"53","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Score.jsx":"54","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\SmallHeading.jsx":"55","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\home\\Hero.jsx":"56","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Faqs.jsx":"57","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\ServicesHero.jsx":"58","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\algob.config.js":"59","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\PopUpCloser.jsx":"60","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\types.js":"61","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\withdraw.js":"62","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Faq.jsx":"63","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomeLink.jsx":"64","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Question.jsx":"65","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Answer.jsx":"66","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Footer.jsx":"67","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Header.jsx":"68","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\deposit.js":"69","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\vrf_randomizer.js":"70","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\send_vrf.js":"71","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\reveal_vrf.js":"72"},{"size":315,"mtime":1675058554328,"results":"73","hashOfConfig":"74"},{"size":6256,"mtime":1680017612843,"results":"75","hashOfConfig":"74"},{"size":143,"mtime":1672550866000,"results":"76","hashOfConfig":"74"},{"size":1231,"mtime":1672550866000,"results":"77","hashOfConfig":"74"},{"size":28041,"mtime":1680025503335,"results":"78","hashOfConfig":"74"},{"size":267,"mtime":1672550866000,"results":"79","hashOfConfig":"74"},{"size":11175,"mtime":1677700590115,"results":"80","hashOfConfig":"74"},{"size":1482,"mtime":1677700590053,"results":"81","hashOfConfig":"74"},{"size":16046,"mtime":1674844683000,"results":"82","hashOfConfig":"74"},{"size":47893,"mtime":1674844683000,"results":"83","hashOfConfig":"74"},{"size":8893,"mtime":1679297952280,"results":"84","hashOfConfig":"74"},{"size":985,"mtime":1678179509396,"results":"85","hashOfConfig":"74"},{"size":8755,"mtime":1675408697611,"results":"86","hashOfConfig":"74"},{"size":12605,"mtime":1677700590073,"results":"87","hashOfConfig":"74"},{"size":389,"mtime":1675238965145,"results":"88","hashOfConfig":"74"},{"size":13801,"mtime":1679298535581,"results":"89","hashOfConfig":"74"},{"size":3855,"mtime":1675410312593,"results":"90","hashOfConfig":"74"},{"size":11246,"mtime":1680021667504,"results":"91","hashOfConfig":"74"},{"size":17781,"mtime":1672550866000,"results":"92","hashOfConfig":"74"},{"size":2257,"mtime":1672550866000,"results":"93","hashOfConfig":"74"},{"size":897,"mtime":1672550866000,"results":"94","hashOfConfig":"74"},{"size":855,"mtime":1675786206705,"results":"95","hashOfConfig":"74"},{"size":14876,"mtime":1672550866000,"results":"96","hashOfConfig":"74"},{"size":4263,"mtime":1672550866000,"results":"97","hashOfConfig":"74"},{"size":1168,"mtime":1675772761519,"results":"98","hashOfConfig":"74"},{"size":1802,"mtime":1672550866000,"results":"99","hashOfConfig":"74"},{"size":3097,"mtime":1680020086172,"results":"100","hashOfConfig":"74"},{"size":1915,"mtime":1672550866000,"results":"101","hashOfConfig":"74"},{"size":2594,"mtime":1672550866000,"results":"102","hashOfConfig":"74"},{"size":1843,"mtime":1672550866000,"results":"103","hashOfConfig":"74"},{"size":4839,"mtime":1672550866000,"results":"104","hashOfConfig":"74"},{"size":900,"mtime":1672550866000,"results":"105","hashOfConfig":"74"},{"size":3874,"mtime":1680019962273,"results":"106","hashOfConfig":"74"},{"size":16330,"mtime":1680021064905,"results":"107","hashOfConfig":"74"},{"size":6123,"mtime":1680020431404,"results":"108","hashOfConfig":"74"},{"size":13163,"mtime":1677700590041,"results":"109","hashOfConfig":"74"},{"size":11883,"mtime":1677740779475,"results":"110","hashOfConfig":"74"},{"size":228,"mtime":1672550866000,"results":"111","hashOfConfig":"74"},{"size":164,"mtime":1677700590077,"results":"112","hashOfConfig":"74"},{"size":13825,"mtime":1679570545399,"results":"113","hashOfConfig":"74"},{"size":306,"mtime":1674844683000,"results":"114","hashOfConfig":"74"},{"size":260,"mtime":1674844683000,"results":"115","hashOfConfig":"74"},{"size":323,"mtime":1674844683000,"results":"116","hashOfConfig":"74"},{"size":256,"mtime":1674844683000,"results":"117","hashOfConfig":"74"},{"size":1877,"mtime":1679298327441,"results":"118","hashOfConfig":"74"},{"size":980,"mtime":1674844683000,"results":"119","hashOfConfig":"74"},{"size":256,"mtime":1674844683000,"results":"120","hashOfConfig":"74"},{"size":249,"mtime":1674844683000,"results":"121","hashOfConfig":"74"},{"size":1063,"mtime":1674701417441,"results":"122","hashOfConfig":"74"},{"size":1194,"mtime":1676923190846,"results":"123","hashOfConfig":"74"},{"size":1228,"mtime":1674701417457,"results":"124","hashOfConfig":"74"},{"size":2039,"mtime":1674701417449,"results":"125","hashOfConfig":"74"},{"size":6919,"mtime":1676928502409,"results":"126","hashOfConfig":"74"},{"size":5317,"mtime":1676923220778,"results":"127","hashOfConfig":"74"},{"size":284,"mtime":1674844683000,"results":"128","hashOfConfig":"74"},{"size":2903,"mtime":1675256333354,"results":"129","hashOfConfig":"74"},{"size":4826,"mtime":1677700650671,"results":"130","hashOfConfig":"74"},{"size":902,"mtime":1674701417452,"results":"131","hashOfConfig":"74"},{"size":2679,"mtime":1672550866000,"results":"132","hashOfConfig":"74"},{"size":306,"mtime":1675781771904,"results":"133","hashOfConfig":"74"},{"size":366,"mtime":1672550866000,"results":"134","hashOfConfig":"74"},{"size":5496,"mtime":1680020037894,"results":"135","hashOfConfig":"74"},{"size":348,"mtime":1674844683000,"results":"136","hashOfConfig":"74"},{"size":238,"mtime":1676922997238,"results":"137","hashOfConfig":"74"},{"size":714,"mtime":1677056016893,"results":"138","hashOfConfig":"74"},{"size":503,"mtime":1676834966493,"results":"139","hashOfConfig":"74"},{"size":1842,"mtime":1674709057927,"results":"140","hashOfConfig":"74"},{"size":2850,"mtime":1677056829310,"results":"141","hashOfConfig":"74"},{"size":1680,"mtime":1679571187250,"results":"142","hashOfConfig":"74"},{"size":561,"mtime":1679680934382,"results":"143","hashOfConfig":"74"},{"size":559,"mtime":1680022125512,"results":"144","hashOfConfig":"74"},{"size":561,"mtime":1680022079015,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"10vhh4y",{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"148"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"148"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"148"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"148"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"148"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"148"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"148"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"148"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"148"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"148"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"148"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"148"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"148"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"148"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"148"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"148"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"148"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"148"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"148"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\index.js",[],["312","313"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\App.js",["314"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\store.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\feedback_reducer.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Admin.js",["315","316","317","318","319","320"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\rootReducer.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Lottery.js",["321","322"],"import React from 'react';\r\nimport { Button } from '@mui/material';\r\nimport { decodeAddress } from 'algosdk';\r\nimport moment from 'moment';\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TextFieldCard } from '../components/AdminCards';\r\nimport CustomTextField from '../components/CustomTextField';\r\nimport Loader from '../components/Loader';\r\nimport LotteryTable from '../components/LotteryTable';\r\nimport CustomToolTip from '../components/Tooltip';\r\nimport { GlobalStateKeys, TIMEOUT } from '../constants/constants';\r\nimport { addError, addSuccess } from '../redux/feedback_reducer';\r\nimport { OptAppID, readAppGlobalState } from '../utils/common';\r\nimport { dispenseLottery } from '../utils/dispense_lottery';\r\nimport { setGovernanceRewardRate } from '../utils/set_gov_reward_rate';\r\n\r\nconst Lottery = (props) => {\r\n    const [winnerAddr, setWinnerAddr] = useState(null);\r\n    const [winnerAddrError, setWinnerAddrError] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [updateLotteryData, setUpdateData] = useState(false);\r\n\r\n    const [rewardRate, setRewardRate] = useState(null);\r\n    const [rewardRateError, setRateError] = useState('');\r\n\r\n    async function getGlobalState() {\r\n        let appGlobalState = undefined;\r\n        await readAppGlobalState(\r\n            props.admin_addr,\r\n            OptAppID(props.selected_network),\r\n            props.selected_network\r\n        )\r\n            .then((res) => {\r\n                appGlobalState = res;\r\n            })\r\n            .catch((error) => {\r\n                props.addError(error.message);\r\n            });\r\n        return appGlobalState;\r\n    }\r\n\r\n    async function getRewardRate() {\r\n        const appGlobalState = await getGlobalState();\r\n        if (appGlobalState) {\r\n            let rate = appGlobalState.get(GlobalStateKeys.REWARD_RATE) ?? 0;\r\n            let decimal =\r\n                appGlobalState.get(GlobalStateKeys.REWARD_DECIMAL) ?? 0;\r\n            setRewardRate(decimal <= 100 ? rate : (rate * 100) / decimal);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRewardRate();\r\n    }, []);\r\n\r\n    async function handleDispenseClick() {\r\n        try {\r\n            if (!winnerAddr) {\r\n                setWinnerAddrError('Please input Winner Address');\r\n                return;\r\n            }\r\n            if (!rewardRate) {\r\n                setRateError('Please input Reward Rate.');\r\n                return;\r\n            }\r\n\r\n            const globalState = await getGlobalState();\r\n            const lastDispenseTS = globalState.get(\r\n                GlobalStateKeys.LAST_LOTTERY_DISPENSE_TS\r\n            );\r\n            // ensure atleast 23h b/w consecutive lottery dispersals\r\n            if (lastDispenseTS && moment().unix() - lastDispenseTS < 82800) {\r\n                throw new Error('Last Dispense occured in less than 23 Hours.');\r\n            }\r\n            const addr = decodeAddress(winnerAddr);\r\n            setLoading(true);\r\n            dispenseLottery(\r\n                props.web,\r\n                props.admin_addr,\r\n                winnerAddr,\r\n                props.selected_network\r\n            )\r\n                .then(() => {\r\n                    setUpdateData(true);\r\n                    setTimeout(async () => {\r\n                        props.addSuccess(`Prize Game is drawn successfully.`);\r\n                        setLoading(false);\r\n                    }, TIMEOUT);\r\n                })\r\n                .catch((error) => {\r\n                    props.addError(error.message);\r\n                    setLoading(false);\r\n                });\r\n        } catch (error) {\r\n            props.addError(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"margin_medium \">\r\n            <Loader loading={loading} />\r\n            <div className=\"flex_row\">\r\n                <div className=\"margin_right_med\" style={{ flex: 1 }}>\r\n                    <div>\r\n                        <TextFieldCard\r\n                            heading=\"Governance Reward Rate\"\r\n                            textfield={\r\n                                <CustomTextField\r\n                                    error={rewardRateError}\r\n                                    key=\"rewardAmt\"\r\n                                    label=\"Rate (%)\"\r\n                                    variant=\"filled\"\r\n                                    className=\"textfield\"\r\n                                    type=\"number\"\r\n                                    value={rewardRate || ''}\r\n                                    onChange={(event) => {\r\n                                        setRateError('');\r\n                                        setRewardRate(+event.target.value);\r\n                                    }}\r\n                                    helperText={rewardRateError}\r\n                                />\r\n                            }\r\n                            buttonText=\"Set\"\r\n                            action={() => {\r\n                                try {\r\n                                    if (rewardRate) {\r\n                                        // ensure max reward rate is <= 0.2% for the week\r\n                                        if (rewardRate > 0.2) {\r\n                                            throw new Error(\r\n                                                'Maximum reward rate can be 0.2%'\r\n                                            );\r\n                                        }\r\n                                        setLoading(true);\r\n                                        let rate = rewardRate;\r\n                                        const rateString = `${rewardRate}`;\r\n                                        let decimalLength = 0;\r\n                                        if (\r\n                                            rateString.split('.')?.[1]?.length\r\n                                        ) {\r\n                                            rate = rateString;\r\n                                            rate = parseInt(\r\n                                                rate.replace('.', '')\r\n                                            );\r\n                                            decimalLength =\r\n                                                rateString.split('.')[1].length;\r\n                                        } else {\r\n                                            decimalLength = 0;\r\n                                        }\r\n\r\n                                        const decimalPoints =\r\n                                            decimalLength > 0\r\n                                                ? Math.pow(\r\n                                                      10,\r\n                                                      decimalLength + 2\r\n                                                  )\r\n                                                : 100;\r\n\r\n                                        setGovernanceRewardRate(\r\n                                            props.web,\r\n                                            props.admin_addr,\r\n                                            props.selected_network,\r\n                                            rate,\r\n                                            decimalPoints\r\n                                        )\r\n                                            .then(() => {\r\n                                                setTimeout(async () => {\r\n                                                    props.addSuccess(\r\n                                                        `Reward Rate of ${rewardRate}% for current governance period is successfully set.`\r\n                                                    );\r\n                                                    setLoading(false);\r\n                                                }, TIMEOUT);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                props.addError(error.message);\r\n                                                setLoading(false);\r\n                                            });\r\n                                    } else\r\n                                        setRateError(\r\n                                            'Please provide reward rate for current governance period.'\r\n                                        );\r\n                                } catch (error) {\r\n                                    props.addError(error.message);\r\n                                    setLoading(false);\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"margin_block_med\">\r\n                            <TextFieldCard\r\n                                heading=\"Dispense Prize Game\"\r\n                                textfield={\r\n                                    <CustomTextField\r\n                                        error={winnerAddrError}\r\n                                        key=\"winnerAddr\"\r\n                                        label=\"Winner Address\"\r\n                                        variant=\"filled\"\r\n                                        className=\"textfield\"\r\n                                        value={winnerAddr}\r\n                                        onChange={(event) => {\r\n                                            setWinnerAddr('');\r\n                                            setWinnerAddr(event.target.value);\r\n                                        }}\r\n                                        helperText={winnerAddrError}\r\n                                    />\r\n                                }\r\n                            >\r\n                                <CustomToolTip>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        variant=\"contained\"\r\n                                        className=\"card_btn\"\r\n                                        onClick={handleDispenseClick}\r\n                                    >\r\n                                        Dispense\r\n                                    </Button>\r\n                                </CustomToolTip>\r\n                            </TextFieldCard>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={{ flex: 2 }}>\r\n                    <LotteryTable updateData={updateLotteryData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        error: state.feedback.error,\r\n        selected_network: state.wallet.selected_network,\r\n        admin_addr: state.wallet.admin_addr,\r\n        web: state.wallet.webMode\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addError: (payload) => dispatch(addError(payload)),\r\n        addSuccess: (payload) => dispatch(addSuccess(payload))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Lottery);\r\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Footer.js",["323"],"import { useNavigate } from 'react-router-dom';\r\nimport { Routes } from '../constants/constants';\r\nimport React, { Component }  from 'react';\r\n\r\nconst Footer = () => {\r\n    const navigate = useNavigate();\r\n    return (\r\n        <footer>\r\n            <div className=\"flex_row flexBox_center\">\r\n                <h2 className=\"pointer\" onClick={() => navigate(Routes.ABOUT)}>\r\n                    About\r\n                </h2>\r\n                <h2\r\n                    className=\"margin_inline_med pointer\"\r\n                    onClick={() => navigate(Routes.PRIVACY)}\r\n                >\r\n                    Privacy Policy\r\n                </h2>\r\n                <h2 className=\"pointer\" onClick={() => navigate(Routes.TERMS)}>\r\n                    Terms and Conditions\r\n                </h2>\r\n                <h2 className=\"margin_inline_med pointer\">\r\n                    <a\r\n                        style={{ color: 'inherit', textDecoration: 'none' }}\r\n                        href=\"mailto:admin@optimumstaking.finance\"\r\n                    >\r\n                        Contact us\r\n                    </a>\r\n                </h2>\r\n                <h2\r\n                    className=\"pointer\"\r\n                    onClick={() =>\r\n                        window.open('https://www.certik.com/projects/optimum')\r\n                    }\r\n                >\r\n                    Certik Audit\r\n                </h2>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\PrivacyPolicy.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\TermsCondition.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Home.jsx",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, CircularProgress, Dialog } from '@mui/material';\r\nimport ConnectWallet from '../components/ConnectWallet';\r\nimport Form from '../components/Form';\r\nimport {\r\n    ButtonTypes,\r\n    GlobalStateKeys,\r\n    ImageSrc,\r\n    Routes,\r\n    Color\r\n} from '../constants/constants';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    localOPTBalances,\r\n    OptAppID,\r\n    readAppGlobalState\r\n} from '../utils/common';\r\nimport WithDraw from '../components/modal/WithDraw'\r\nimport { convertDateToSeconds } from '../constants/date';\r\n\r\nimport LotteryTable from '../components/LotteryTable';\r\nimport { getRewardAmt } from '../utils/dispense_lottery';\r\nimport { getApplicationAddress } from 'algosdk';\r\nimport ServicesHero from '../components/heroes/ServicesHero' \r\nimport { Link } from 'react-router-dom'\r\nimport Tagline from '../components/utils/Tagline'\r\nimport Heading from '../components/utils/Heading'\r\nimport SubHeading from '../components/utils/SubHeading'\r\nimport Paragraph from '../components/utils/Paragraph'\r\nimport BtnGroups from '../components/utils/BtnGroups'\r\nimport bannerImg from '../assets/images/sevices/banner.jpg'  \r\nimport mobBannerImg from '../assets/images/sevices/mobBanner.jpg' \r\nimport coin from '../assets/images/sevices/coin.png'\r\nimport mobCoinLeft from '../assets/images/sevices/mobCoinLeft.png'\r\nimport auditSvg from '../assets/images/sevices/audit.svg'\r\nimport mobCoinRight from '../assets/images/sevices/mobCoinRight.png'\r\nimport { connect } from 'react-redux';\r\nimport { changeWallet, updateAddress } from '../redux/wallet/actions';\r\n\r\nconst Home = (props) => {\r\n    const [showFormModal, setShowFormModal] = useState(false);\r\n    const [formType, setFormType] = useState('');\r\n    const [isAdminLogged, setAdminLog] = useState(props.is_admin_logged);\r\n    const navigate = useNavigate();\r\n    const [isDepositValid, setDepositValid] = useState(true);\r\n    const [isLotteryModalActive, setLotterModal] = useState(false);\r\n    const [lotteryAmt, setLotteryAmt] = useState(0);\r\n    const [totalDistributedOPT, setTotalDistributedOPT] = useState(undefined);\r\n    const [lotteryloader, setLotteryLoader] = useState(false);\r\n    const [optLoader, setOPTLoader] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setAdminLog(props.is_admin_logged);\r\n        checkDepositValid();\r\n    }, [props.address, props.is_admin_logged, props.selected_network]);\r\n\r\n    useEffect(() => {\r\n        if (props.selected_network) {\r\n            fetchTotalDistributedOPT();\r\n            getWeeklyLotteryAmt();\r\n        }\r\n    }, [props.success, props.selected_network]); // update if OPT/algo is withrawn/deposited\r\n\r\n    const openForm = (type) => {\r\n        \r\n        if (props.address) {\r\n            setShowFormModal(true);\r\n            setFormType(type);\r\n        } else props.setShowWalletModal(true);\r\n    };\r\n\r\n    // note: this doesn't track the \"reward opt\" distributed to users\r\n    async function fetchTotalDistributedOPT() {\r\n        setOPTLoader(true);\r\n        const localOptBalances = await localOPTBalances(props.selected_network);\r\n        let totalOPT = 0.0;\r\n        for (const v of Object.values(localOptBalances)) {\r\n            totalOPT += v;\r\n        }\r\n        setTotalDistributedOPT((totalOPT / 1e6).toFixed(3));\r\n        setOPTLoader(false);\r\n    }\r\n\r\n    function checkDepositValid() {\r\n        if (props.selected_network && props.admin_addr) {\r\n            readAppGlobalState(\r\n                props.admin_addr,\r\n                OptAppID(props.selected_network),\r\n                props.selected_network\r\n            ).then((res) => {\r\n                let appGlobalState = res;\r\n                const registration_end = appGlobalState.get(\r\n                    GlobalStateKeys.REGISTRATION_END\r\n                );\r\n                const reward_distribution = appGlobalState.get(\r\n                    GlobalStateKeys.REWARD_DISTRIBUTION\r\n                );\r\n                if (registration_end && reward_distribution) {\r\n                    const range =\r\n                        reward_distribution <=\r\n                            convertDateToSeconds(new Date()) &&\r\n                        convertDateToSeconds(new Date()) <= registration_end;\r\n                    setDepositValid(range);\r\n                } else {\r\n                    // timelines are not set yet\r\n                    setDepositValid(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const LotteryDataModal = () => {\r\n        return (\r\n            <Dialog\r\n                onClose={() => setLotterModal(false)}\r\n                open={isLotteryModalActive}\r\n            >\r\n                <LotteryTable screen=\"Home\" />\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    async function getWeeklyLotteryAmt() {\r\n        setLotteryLoader(true);\r\n        const rewardAmt = await getRewardAmt(\r\n            props.selected_network,\r\n            props.admin_addr\r\n        );\r\n        if (!rewardAmt) {\r\n            setLotteryAmt(0);\r\n        } else setLotteryAmt((parseFloat(rewardAmt * 0.9) / 1e6).toFixed(6));\r\n        setLotteryLoader(false);\r\n    }\r\n\r\n    const Loader = () => {\r\n        return (\r\n            <span\r\n                style={{\r\n                    fontSize: '1.5rem'\r\n                }}\r\n            >\r\n                Calculating...{'  '}\r\n                <CircularProgress\r\n                    size={20}\r\n                    style={{ color: Color.DARK_YELLOW }}\r\n                />\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const [isMob,setIsMob] = useState(false)\r\n    useEffect(()=>{\r\n        setIsMob(window.innerWidth < 768)\r\n        const handleResize =()=>{\r\n        setIsMob(window.innerWidth < 768)\r\n\r\n        }\r\n        window.addEventListener('resize',handleResize)\r\n        return ()=> window.removeEventListener('resize',handleResize)\r\n    },[])\r\n  return ( \r\n     \r\n      \r\n\r\n        <section className='w-full h-[100vh] relative'>\r\n    {showFormModal && (\r\n        <WithDraw\r\n            closeModal={(state) => setShowFormModal(state)}\r\n            type={formType}\r\n            displayFlexDirection={\r\n                formType === ButtonTypes.WITHDRAW\r\n                    ? 'column-reverse'\r\n                    : 'column'\r\n            }\r\n            order={formType === ButtonTypes.WITHDRAW ? -1 : 1}\r\n        />\r\n)}\r\n        <ServicesHero isMob={isMob} bannerImg={isMob ? mobBannerImg: bannerImg}/>\r\n        <div className=\"content absolute  flex flex-col    w-full  md:w-[unset] text-white h-full md:h-[unset]  md:left-[13.046875vw] md:top-[22.25vh] text-center z-[10]\">\r\n            <Tagline title={\"WELCOME TO\"} classes={\"pt-[30.7692307692vw] md:pt-0 \"}/>\r\n            <Heading title={\"Optimum\"}/>\r\n            <SubHeading title=\"NEW ERA OF STAKING\"/>\r\n            <Paragraph classes={\"w-[300px] md:w-[23.31015625vw] mx-auto mt-[18.65px] md:mt-[1.68515625vw]\"}>\r\n            Join our prize-linked staking program on the <span className='font-[700]'>Algorand blockchain</span> for a chance to win big! \r\n\r\n            </Paragraph>\r\n           \r\n            <Link className='text-[#EDDB0F] md:leading-[1.6875vw] font-[700] text-[18px] leading-[22px] mt-[10px] inline-block md:text-[0.9375vw]'>\r\n            Learn More\r\n            </Link>\r\n            \r\n          <BtnGroups props={props} isDepositValid={isDepositValid} ButtonTypes_DEPOSIT={ButtonTypes.DEPOSIT} ButtonTypes_WITHDRAW={ButtonTypes.WITHDRAW} openForm={openForm} classes={\"mt-auto mx-auto md:mt-[2.34375vw] mb-[115px] md:mb-0\"}/>\r\n            \r\n        </div>\r\n        {isMob || <div className='absolute top-[13.59375vw] right-0'>\r\n        <img src={coin} alt=\"Coin\" />\r\n    </div>}\r\n    {isMob ||<div className='w-[5.9375vw] h-[5.9375vw] absolute bottom-[7.265625vw] z-[10] right-[4.21875vw] '>\r\n        <img src={auditSvg} alt=\"Audit Svg\" className='w-full h-full object-cover'/>\r\n    </div>}\r\n    <div className=\"mobOverlay md:hidden\"></div>\r\n    <div className='absolute md:hidden bottom-[255px]'>\r\n        <img src={mobCoinLeft} alt=\"\" />\r\n    </div>\r\n    <div className='absolute md:hidden bottom-[295px] right-0'>\r\n        <img src={mobCoinRight} alt=\"\" />\r\n    </div>\r\n\r\n    </section> \r\n       \r\n     \r\n      \r\n\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selected: state.wallet.selected,\r\n        address: state.wallet.address,\r\n        is_admin_logged: state.wallet.is_admin_logged,\r\n        selected_network: state.wallet.selected_network,\r\n        admin_addr: state.wallet.admin_addr,\r\n        success: state.feedback.success\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n        updateAddress: (payload) => dispatch(updateAddress(payload))\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\n// export default NewPage1","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\About.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\NewPage2.jsx",["340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359"],"import React, { useEffect, useState }  from 'react'\r\nimport ServicesHero from '../components/heroes/ServicesHero'  \r\nimport Tagline from '../components/utils/Tagline'\r\nimport Heading from '../components/utils/Heading'\r\nimport SubHeading from '../components/utils/SubHeading' \r\nimport BtnGroups from '../components/utils/BtnGroups' \r\nimport leftImage from '../assets/images/loggedIn/leftImage.jpg'\r\nimport rightImage from '../assets/images/loggedIn/rightImage.jpg'\r\nimport bgMob from '../assets/images/loggedIn/bgMob.jpg'\r\nimport Tab from '../components/utils/Tab'\r\nimport { connect } from 'react-redux';\r\nimport { changeWallet, updateAddress } from '../redux/wallet/actions';\r\nimport { Button, CircularProgress, Dialog } from '@mui/material';\r\nimport ConnectWallet from '../components/ConnectWallet';\r\nimport Form from '../components/Form';\r\nimport {\r\n    ButtonTypes,\r\n    GlobalStateKeys,\r\n    ImageSrc,\r\n    Routes,\r\n    Color\r\n} from '../constants/constants';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    localOPTBalances,\r\n    OptAppID,\r\n    readAppGlobalState\r\n} from '../utils/common';\r\nimport { convertDateToSeconds } from '../constants/date';\r\n\r\nimport LotteryTable from '../components/LotteryTable';\r\nimport { getRewardAmt } from '../utils/dispense_lottery';\r\nimport { getApplicationAddress } from 'algosdk';\r\n\r\nconst NewPage2 = (props) => {\r\n  const [showFormModal, setShowFormModal] = useState(false);\r\n  const [formType, setFormType] = useState('');\r\n  const [isAdminLogged, setAdminLog] = useState(props.is_admin_logged);\r\n  const navigate = useNavigate();\r\n  const [isDepositValid, setDepositValid] = useState(true);\r\n  const [isLotteryModalActive, setLotterModal] = useState(false);\r\n  const [lotteryAmt, setLotteryAmt] = useState(0);\r\n  const [totalDistributedOPT, setTotalDistributedOPT] = useState(undefined);\r\n  const [lotteryloader, setLotteryLoader] = useState(false);\r\n  const [optLoader, setOPTLoader] = useState(false);\r\n\r\n  useEffect(() => {\r\n      setAdminLog(props.is_admin_logged);\r\n      checkDepositValid();\r\n  }, [props.address, props.is_admin_logged, props.selected_network]);\r\n\r\n  useEffect(() => {\r\n      if (props.selected_network) {\r\n          fetchTotalDistributedOPT();\r\n          getWeeklyLotteryAmt();\r\n      }\r\n  }, [props.success, props.selected_network]); // update if OPT/algo is withrawn/deposited\r\n\r\n  const openForm = (type) => {\r\n      \r\n      if (props.address) {\r\n          setShowFormModal(true);\r\n          setFormType(type);\r\n      } else props.setShowWalletModal(true);\r\n  };\r\n\r\n  // note: this doesn't track the \"reward opt\" distributed to users\r\n  async function fetchTotalDistributedOPT() {\r\n      setOPTLoader(true);\r\n      const localOptBalances = await localOPTBalances(props.selected_network);\r\n      let totalOPT = 0.0;\r\n      for (const v of Object.values(localOptBalances)) {\r\n          totalOPT += v;\r\n      }\r\n      setTotalDistributedOPT((totalOPT / 1e6).toFixed(3));\r\n      setOPTLoader(false);\r\n  }\r\n\r\n  function checkDepositValid() {\r\n      if (props.selected_network && props.admin_addr) {\r\n          readAppGlobalState(\r\n              props.admin_addr,\r\n              OptAppID(props.selected_network),\r\n              props.selected_network\r\n          ).then((res) => {\r\n              let appGlobalState = res;\r\n              const registration_end = appGlobalState.get(\r\n                  GlobalStateKeys.REGISTRATION_END\r\n              );\r\n              const reward_distribution = appGlobalState.get(\r\n                  GlobalStateKeys.REWARD_DISTRIBUTION\r\n              );\r\n              if (registration_end && reward_distribution) {\r\n                  const range =\r\n                      reward_distribution <=\r\n                          convertDateToSeconds(new Date()) &&\r\n                      convertDateToSeconds(new Date()) <= registration_end;\r\n                  setDepositValid(range);\r\n              } else {\r\n                  // timelines are not set yet\r\n                  setDepositValid(false);\r\n              }\r\n          });\r\n      }\r\n  }\r\n\r\n  const LotteryDataModal = () => {\r\n      return (\r\n          <Dialog\r\n              onClose={() => setLotterModal(false)}\r\n              open={isLotteryModalActive}\r\n          >\r\n              <LotteryTable screen=\"Home\" />\r\n          </Dialog>\r\n      );\r\n  };\r\n\r\n  async function getWeeklyLotteryAmt() {\r\n      setLotteryLoader(true);\r\n      const rewardAmt = await getRewardAmt(\r\n          props.selected_network,\r\n          props.admin_addr\r\n      );\r\n      if (!rewardAmt) {\r\n          setLotteryAmt(0);\r\n      } else setLotteryAmt((parseFloat(rewardAmt * 0.9) / 1e6).toFixed(6));\r\n      setLotteryLoader(false);\r\n  }\r\n\r\n  const Loader = () => {\r\n      return (\r\n          <span\r\n              style={{\r\n                  fontSize: '1.5rem'\r\n              }}\r\n          >\r\n              Calculating...{'  '}\r\n              <CircularProgress\r\n                  size={20}\r\n                  style={{ color: Color.DARK_YELLOW }}\r\n              />\r\n          </span>\r\n      );\r\n  };\r\n\r\n  const [isMob,setIsMob] = useState(false)\r\n  useEffect(()=>{\r\n      setIsMob(window.innerWidth < 768)\r\n      const handleResize =()=>{\r\n      setIsMob(window.innerWidth < 768)\r\n\r\n      }\r\n      window.addEventListener('resize',handleResize)\r\n      return ()=> window.removeEventListener('resize',handleResize)\r\n  },[])\r\n  return ( \r\n     \r\n      \r\n\r\n        <section className='w-full min-h-[100vh] relative overflow-hidden '>\r\n        <img src={leftImage} alt=\"Left Image\" className='hidden md:block absolute bottom-0 mix-blend-lighten w-[39.375vw]'/>\r\n        <img src={rightImage} alt=\"Left Image\" className='hidden md:block absolute right-0 mix-blend-lighten w-[40.9375vw]'/>\r\n\r\n          <span className='heroOverlayLeft2 hidden md:block absolute top-0 left-0 h-full w-[32.8125vw] z-[2] '>\r\n\r\n</span>\r\n             <span className='heroOverlayRight hidden md:block absolute top-0 h-full  right-0 w-[9.375vw] z-[3] '>\r\n\r\n            </span>\r\n            <span className='heroOverlayBottom1 absolute bottom-0 left-0 w-full h-[280px] md:h-[21.89140625vw] z-[4]'>\r\n\r\n            </span>\r\n            <span className='heroOverlayBottom2 absolute bottom-[-9.53125vw]  w-full md:h-[28.3703125vw] h-[240px] z-[5]'>\r\n\r\n            </span>\r\n           \r\n            <span className='heroOverlayTop absolute top-0 left-0 w-full md:h-[20.478125vw] z-[5] h-[260px]'>\r\n\r\n            </span>\r\n            <img src={bgMob} alt=\"Bg MOb\"  className='block md:hidden absolute left-0 mix-blend-lighten top-[10vh]'/>\r\n        <ServicesHero isMob={isMob} />\r\n        \r\n        <div className=\"content relative   flex flex-col  pb-[130px] md:pb-[200px]   w-full  md:w-[51.875vw] text-white h-full md:h-[unset]  left-[50%] transform translate-x-[-50%]   md:top-[19.625vh] text-center z-[10]\">\r\n            <Tagline title={\"WELCOME TO\"} classes={\"pt-[30.7692307692vw] md:pt-0 \"}/>\r\n            <Heading title={\"Optimum\"}/>\r\n            <SubHeading title=\"NEW ERA OF STAKING\"/>\r\n             <div className='flex justify-between mt-[43.65px] mb-[32px] md:my-[2.5vw] relative\r\n             flex-col md:flex-row gap-y-[16px] items-center\r\n              '>\r\n                \r\n                \r\n                <Tab title={'Weekly prize'} value={\"1.26000000\"}/>\r\n                <Tab title={'total distributed OPT'} value={\"0\"} rightTab/>\r\n                \r\n             </div>\r\n             \r\n\r\n          <BtnGroups isDepositValid={isDepositValid} ButtonTypes_DEPOSIT={ButtonTypes.DEPOSIT} ButtonTypes_WITHDRAW={ButtonTypes.WITHDRAW} openForm={openForm} classes={\"mx-auto\"}\r\n        //   classes={\"mt-auto mx-auto md:mt-[2.34375vw] mb-[115px] md:mb-0\"}\r\n          />\r\n          <button className='w-[231.82px] h-[35.42px] text-[13.05px]\r\n          mt-[32px]\r\n           md:w-[18.246875vw] md:mt-[2.5vw]  clipPathButton  md:text-[1.015625vw] font-[700] mx-auto md:h-[2.7671875vw] border border-[#EDDB0F]'>\r\n            Check Prize Game Results\r\n          </button>\r\n            \r\n        </div>\r\n        \r\n     \r\n    <div className=\"mobOverlay md:hidden\"></div>\r\n    \r\n\r\n    </section> \r\n       \r\n     \r\n      \r\n\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      selected: state.wallet.selected,\r\n      address: state.wallet.address,\r\n      is_admin_logged: state.wallet.is_admin_logged,\r\n      selected_network: state.wallet.selected_network,\r\n      admin_addr: state.wallet.admin_addr,\r\n      success: state.feedback.success\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n      updateAddress: (payload) => dispatch(updateAddress(payload))\r\n  };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPage2);","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\LoginModal.jsx",["360","361","362","363","364","365","366","367"],"/* global AlgoSigner */\r\nimport React, { useEffect } from 'react'\r\nimport algosigner from \"../../assets/images/algosigner.svg\"\r\nimport myalgo  from \"../../assets/images/myalgo.svg\"\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogTitle,\r\n    List,\r\n    ListItem,\r\n    ListItemButton,\r\n    ListItemText\r\n} from '@mui/material';\r\nimport {\r\n    addChainAddressStore,\r\n    changeNetwork,\r\n    changeWallet,\r\n    changeWebMode,\r\n    updateAddress,\r\n    updateAdminAddr\r\n} from '../../redux/wallet/actions';\r\nimport { addError } from '../../redux/feedback_reducer';\r\n\r\nimport { Color, Wallet, CurrentNetwork } from '../../constants/constants';\r\nimport { OptAppID, readAppGlobalState } from '../../utils/common';\r\nimport { getNetworkAlgodConfig, indexerClient } from '../../utils/algob.config';\r\nimport { MyAlgoWalletSession, WebMode } from '@algo-builder/web';\r\nimport { encodeAddress } from 'algosdk';\r\n\r\n\r\nconst LoginModal = (props) => {\r\n  const [openModal, setOpenModal] = React.useState(true);\r\n  console.log(props)\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [showAddressInfo, setShowAddressInfo] = React.useState(\r\n      props.selected\r\n  );\r\n  const [accountInfoArray, setAccountInfoArray] = React.useState(\r\n      props.account_store ? props.account_store : []\r\n  );\r\n  const [selectedAddress, setSelectedAddress] = React.useState(\r\n      props.address ? props.address : undefined\r\n  );\r\n\r\n  const [selectedNetwork, setSelectedNetwork] = React.useState(\r\n      props.selected_network\r\n  );\r\n  const handleCloseModal = () => props.setShowWalletModal(false);\r\n//   const handleCloseModal = () => setOpenModal(false);\r\n\r\n  async function handleNetworkSelection() {\r\n      let network = CurrentNetwork;\r\n      props.changeNetwork(network);\r\n      setSelectedNetwork(network);\r\n      await addAdminAddr(network);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n      // props.closeModal(openModal)\r\n    //   setShowWalletModal()\r\n      handleNetworkSelection();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [openModal]);\r\n\r\n  async function getAccountInfo(value) {\r\n      let accountStore = [];\r\n      for (const acc of value) {\r\n          if (acc && acc.address) {\r\n              const accountInfo = await indexerClient(selectedNetwork)\r\n                  .lookupAccountByID(acc.address)\r\n                  .do();\r\n\r\n              let account = accountInfo.account;\r\n              accountStore.push({\r\n                  address: account.address,\r\n                  amount: account.amount / 1e6\r\n              });\r\n          }\r\n      }\r\n      setAccountInfoArray(accountStore);\r\n      return accountStore;\r\n  }\r\n\r\n  const handleClick = async (selectedWallet) => {\r\n      if (selectedWallet === Wallet.ALGOSIGNER) {\r\n          if (typeof AlgoSigner === 'undefined') {\r\n              AlgoSigner.connect()\r\n                  .then(async (d) => {\r\n                      const address =\r\n                          (await AlgoSigner.accounts({\r\n                              ledger: selectedNetwork\r\n                          })) ?? [];\r\n                      if (address.length) {\r\n                          props.changeWallet(Wallet.ALGOSIGNER);\r\n                          props.changeWebMode(\r\n                              new WebMode(AlgoSigner, selectedNetwork)\r\n                          );\r\n                          // fetching only if new address is added to wallet (since network change is not allowed by sign out)\r\n                          if (address.length === accountInfoArray.length) {\r\n                              setLoading(true);\r\n                              const accountInfo = await getAccountInfo(\r\n                                  address\r\n                              );\r\n                              setLoading(false);\r\n                              props.addChainAddressStore(accountInfo);\r\n                          }\r\n                          setShowAddressInfo(true);\r\n                      }\r\n                  })\r\n                  .catch((e) => {\r\n                      console.error(e);\r\n                      props.addError(JSON.stringify(e));\r\n                      handleCloseModal();\r\n                  });\r\n          } else {\r\n              props.addError('AlgoSigner is NOT installed.');\r\n              handleCloseModal();\r\n          }\r\n      } else if (selectedWallet === Wallet.MY_ALGO_WALLET) {\r\n          let myAlgo = new MyAlgoWalletSession(\r\n              getNetworkAlgodConfig(selectedNetwork)\r\n          );\r\n          \r\n          await myAlgo.connectToMyAlgo().catch((e) => {\r\n              console.error(e);\r\n              props.addError(JSON.stringify(e));\r\n              handleCloseModal();\r\n          });\r\n          props.changeWebMode(myAlgo);\r\n          if (myAlgo.accounts.length) {\r\n              setLoading(true);\r\n              const accountInfo = await getAccountInfo(myAlgo.accounts);\r\n              setLoading(false);\r\n              props.addChainAddressStore(accountInfo);\r\n              props.changeWallet(Wallet.MY_ALGO_WALLET);\r\n              setShowAddressInfo(true);\r\n          }\r\n      }\r\n  };\r\n\r\n  async function addAdminAddr(network) {\r\n      const globalState = await readAppGlobalState(\r\n          selectedAddress,\r\n          OptAppID(network),\r\n          network\r\n      );\r\n      const address = encodeAddress(\r\n          Buffer.from(globalState.get('admin'), 'base64')\r\n      );\r\n      props.updateAdminAddr(address);\r\n  }\r\n\r\n  function setAddressInfo(address) {\r\n      setSelectedAddress(address);\r\n      props.updateAddress(address);\r\n      setTimeout(() => {\r\n          handleCloseModal();\r\n      }, 500);\r\n  }\r\n\r\n    useEffect(()=>{\r\n        const handleClick =(e)=>{ \r\n            e.target.id =='loginModal' &&  e.target.classList.remove('active')\r\n        }\r\n        window.addEventListener('click',handleClick)\r\n        return ()=> window.removeEventListener('click',handleClick)\r\n    },[])\r\n  return (\r\n    \r\n    <div id='loginModal' className='active w-[100%]  h-[100vh] fixed top-0 left-0 flex justify-center items-center z-[222]'>\r\n      <div className='bg-[#16041B] absolute opacity-[0.6] pointer-events-none \r\n      w-[100%] h-[100%]\r\n      '></div>\r\n     \r\n      <div className='pop-up flex w-[320px] h-[320px] flex-col items-center justify-center md:w-[25vw] md:h-[21.484375vw] z-[2] overflow-hidden relative '>\r\n    \r\n      <div className='loginModalOverlays'>\r\n    <div className=\"loginModalOverlayTop\"></div>\r\n    <div className=\"loginModalOverlayRightBotom\"></div>\r\n    <div className=\"loginModalOverlayRightBotom2\"></div>\r\n</div>\r\n{!showAddressInfo &&\r\n<div className='flex w-[320px] h-[320px] flex-col items-center justify-center md:w-[25vw] md:h-[21.484375vw] z-[2] overflow-hidden relative'>\r\n   \r\n   <h4 className='text-[20px] z-[5] leading-[24px] mb-[22px] md:text-[1.5625vw] md:leading-[1.875vw] text-center md:mb-[1.71875vw] font-[colus] text-[#FFFFFF]'>Connect to wallet</h4>\r\n      {loading ? (\r\n      \r\n      <div className='w-[273px] cursor-pointer z-[5] h-[82px] md:w-[21.328125vw] md:h-[6.40625vw] mx-[auto] bg-[#EDDB0F] rounded-[9px] flex justify-start items-center\r\npl-[16px] md:pl-[1.25vw]'>\r\n    <div className='flex items-center gap-x-[12px] md:gap-x-[0.9375vw]'>\r\n    <CircularProgress\r\n                size=\"2rem\"\r\n                style={{\r\n                    color: Color.RED,\r\n                    marginLeft: 10\r\n                }}\r\n            />\r\n        <span className='text-[18px] leading-[21.6px] md:text-[1.40625vw] md:leading-[1.6875] font-[700] text-[#1E131A]'> Fetching Address</span>\r\n    </div>\r\n        </div>\r\n      ) : (\r\n        <div className='flex w-[320px] h-[320px] flex-col items-center justify-center md:w-[25vw] md:h-[21.484375vw] z-[2] overflow-hidden relative'>\r\n        <div className='w-[273px] cursor-pointer z-[5] h-[82px] md:w-[21.328125vw] md:h-[6.40625vw] mx-[auto] bg-[#EDDB0F] rounded-[9px] mb-[16px] md:mb-[1.25vw]\r\n        flex justify-start items-center\r\n        pl-[16px] md:pl-[1.25vw] \r\n        '>\r\n            <div  onClick={() =>  handleClick(Wallet.ALGOSIGNER)\r\n                                                } className='flex items-center gap-x-[12px] md:gap-x-[0.9375vw]'>\r\n                <img src={algosigner} alt=\"Algosigner \" className='w-[50px] h-[50px] md:w-[3.90625vw] md:h-[3.90625vw]' />\r\n                <span className='text-[18px] leading-[21.6px] md:text-[1.40625vw] md:leading-[1.6875] font-[700] text-[#1E131A]'>Algosigner</span>\r\n            </div>\r\n        </div>\r\n        <div onClick={() => {\r\n                                setLoading(true);\r\n                                handleClick(\r\n                                    Wallet.MY_ALGO_WALLET\r\n                                );\r\n                            }} className='w-[273px] cursor-pointer z-[5] h-[82px] md:w-[21.328125vw] md:h-[6.40625vw] mx-[auto] bg-[#EDDB0F] rounded-[9px] flex justify-start items-center\r\n        pl-[16px] md:pl-[1.25vw]'>\r\n            <div className='flex items-center gap-x-[12px] md:gap-x-[0.9375vw]'>\r\n                <img src={myalgo} alt=\"Myalgo Walltet \" className='w-[50px] h-[50px] md:w-[3.90625vw] md:h-[3.90625vw]' />\r\n                <span className='text-[18px] leading-[21.6px] md:text-[1.40625vw] md:leading-[1.6875] font-[700] text-[#1E131A]'>Myalgo Walltet</span>\r\n            </div>\r\n        </div> \r\n        </div> ) }\r\n</div> }\r\n{showAddressInfo &&\r\n  <div>\r\n\r\n    <div className='pt-[26.95px] md:pt-[2.10546875vw] text-center '>\r\n        <h4 className='text-[20px] leading-[24px] md:leading-[1.875vw] md:text-[1.5625vw] text-[#FFFFFF] colus'>Select Address</h4>\r\n    </div>\r\n  <List sx={{ pt: 0 }}>\r\n      <div className=\"z-[5] flex mb-[22px] md:mb-[1.71875vw] font-[colus] text-[#FFFFFF]\">\r\n          <div className=\"w-full float-left\">Address</div>\r\n          <div className=\"w-full text-end\">Amount</div>\r\n      </div>\r\n      \r\n    {accountInfoArray.map((account, index) => {\r\n          const labelId = `checkbox-list-label-${index}`;\r\n          return (\r\n            <div           selected={\r\n                selectedAddress ===\r\n                account.address\r\n            }\r\n            onClick={() => {\r\n                setAddressInfo(\r\n                    account.address\r\n                );\r\n            }} id={labelId} className='flex justify-center  md:pb-[2.50390625vw] pb-[32px] pointer-cursor  text-center'>\r\n                    <div className='cursor-pointer'>\r\n                    <div  className='mx-[auto] w-[191px] mt-[9px]  h-[70px] md:w-[14.921875vw]  md:h-[5.46875vw] bg-[#FF005C] rounded-[8px] flex items-center gap-x-[11px]     justify-center '>\r\n                    <span className='text-[16px] leading-[22px] md:leading-[1.71875vw] md:text-[1.25vw] text-[#FFFFFF] font-[400]'>{account.address.substring(\r\n                                          0,\r\n                                          12\r\n                                      )}\r\n                                      ...</span>\r\n            \r\n                    </div>\r\n                    </div>\r\n                <div>\r\n                <div className='mx-[auto] w-[96px] mt-[9px] h-[70px] md:w-[7.5vw]  md:h-[5.46875vw] bg-[#EDDB0F] rounded-[8px] items-center justify-center\r\n                    flex\r\n                    '>\r\n                    <span className='text-[14px] leading-[19px] md:leading-[1.484375vw] md:text-[1.09375vw] text-[#15061E] font-[400]'>{account.amount}</span>\r\n            \r\n                    </div>\r\n                </div>\r\n                \r\n                </div>  \r\n          );\r\n      })}\r\n  </List>\r\n</div>\r\n}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      selected: state.wallet.selected,\r\n      address: state.wallet.address,\r\n      error: state.feedback.error,\r\n      account_store: state.wallet.account_store,\r\n      selected_network: state.wallet.selected_network\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n      updateAddress: (payload) => dispatch(updateAddress(payload)),\r\n      addError: (payload) => dispatch(addError(payload)),\r\n      addChainAddressStore: (payload) =>\r\n          dispatch(addChainAddressStore(payload)),\r\n      changeNetwork: (payload) => dispatch(changeNetwork(payload)),\r\n      updateAdminAddr: (payload) => dispatch(updateAdminAddr(payload)),\r\n      changeWebMode: (payload) => dispatch(changeWebMode(payload))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginModal);\r\n\r\n\r\n// export default LoginModal","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Layout.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\pages\\Home_Logged.jsx",["368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { useEffect, useState } from 'react'\r\nimport ServicesHero from '../components/heroes/ServicesHero'\r\nimport depositFunc from '../api/deposit'\r\nimport chairImg from '../assets/images/indivual/chair.jpg'\r\nimport mobBg from '../assets/images/indivual/mobBg.jpg'\r\nimport dottedBorder from '../assets/images/sevices/dottedBorder.svg'\r\nimport { connect } from 'react-redux';\r\nimport { changeWallet, updateAddress, updateAccountStore } from '../redux/wallet/actions';\r\nimport { Button, CircularProgress, Dialog } from '@mui/material';\r\n\r\nimport WithDraw from '../components/modal/WithDraw'\r\nimport {\r\n    ButtonTypes,\r\n    GlobalStateKeys,\r\n    ImageSrc,\r\n    Routes,\r\n    Color\r\n} from '../constants/constants';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { convertDateToSeconds } from '../constants/date';\r\n\r\nimport LotteryTable from '../components/LotteryTable';\r\nimport { getRewardAmt } from '../utils/dispense_lottery';\r\nimport { readAppGlobalState, localOPTBalances, getAssetHolding, OptAppID, OptAsaID } from '../utils/common';\r\n    \r\n \r\n\r\nconst Home_Logged = (props) => {\r\n    const [showFormModal, setShowFormModal] = useState(false);\r\n    const [formType, setFormType] = useState('');\r\n    const [isAdminLogged, setAdminLog] = useState(props.is_admin_logged);\r\n    const navigate = useNavigate();\r\n    const [isDepositValid, setDepositValid] = useState(true);\r\n    const [isLotteryModalActive, setLotterModal] = useState(false);\r\n    const [lotteryAmt, setLotteryAmt] = useState(0);\r\n    const [totalDistributedOPT, setTotalDistributedOPT] = useState(undefined);\r\n    const [lotteryloader, setLotteryLoader] = useState(false);\r\n    const [optLoader, setOPTLoader] = useState(false);\r\n    const [opLoader, setOPLoader] = useState(false);\r\n    const [optAmount, setOPTAmount] = useState(0);\r\n    const [OdssOfWinning, setOddsOfWinning] = useState(0);\r\n    const [userASAHolding, setUserASAHolding] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        setAdminLog(props.is_admin_logged);\r\n        checkDepositValid();\r\n        if (props.account_store.length !== 0) {\r\n            AccountOPT()\r\n        }\r\n    }, [props.address, props.is_admin_logged, props.selected_network]);\r\n    const [timeRemaining, setTimeRemaining] = useState({\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      });\r\n    \r\n      useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n          const currentDate = new Date();\r\n          const targetDate = new Date();\r\n          targetDate.setDate(targetDate.getDate() + (7 - targetDate.getDay()));\r\n          targetDate.setHours(22, 0, 0, 0);\r\n    \r\n          if (currentDate > targetDate) {\r\n            targetDate.setDate(targetDate.getDate() + 7);\r\n          }\r\n    \r\n          const diff = targetDate - currentDate;\r\n          const d = Math.floor(diff / 1000 / 60 / 60 / 24);\r\n          const h = Math.floor(diff / 1000 / 60 / 60) % 24;\r\n          const m = Math.floor(diff / 1000 / 60) % 60;\r\n          const s = Math.floor(diff / 1000) % 60;\r\n    \r\n          setTimeRemaining({\r\n            days: d,\r\n            hours: h,\r\n            minutes: m,\r\n            seconds: s,\r\n          });\r\n        }, 1000);\r\n    \r\n        return () => clearInterval(intervalId);\r\n      }, []);\r\n    useEffect(() => {\r\n        getOPTBalanceOfUser()\r\n    }, [])\r\n        useEffect(() => {\r\n        if (props.selected_network) {\r\n            getOPTBalanceOfUser()\r\n\r\n            getWeeklyLotteryAmt();\r\n        }\r\n       \r\n    }, [props.success, props.selected_network]); // update if OPT/algo is withrawn/deposited\r\n\r\n    const openForm = (type) => {\r\n        \r\n        if (props.address) {\r\n            setShowFormModal(true);\r\n            setFormType(type);\r\n        } else props.setShowWalletModal(true);\r\n    };\r\n    // note: this doesn't track the \"reward opt\" distributed to users\r\n    async function AccountOPT () {\r\n        // setOPLoader(true);\r\n\r\n        setOPTAmount(props.account_store[0].amount)\r\n        setOPLoader(true);\r\n    }\r\n\r\n    async function getOPTBalanceOfUser() {\r\n        \r\n        const balance = await getAssetHolding(\r\n            props.address,\r\n            OptAsaID(props.selected_network),\r\n            props.selected_network\r\n            );\r\n        \r\n        const amt = balance?.amount / 1e6;\r\n        if (isNaN(amt)) {\r\n            setUserASAHolding(0);\r\n        } else setUserASAHolding(amt ?? 0);\r\n        fetchTotalDistributedOPT()\r\n    }\r\n\r\n    async function fetchTotalDistributedOPT() {\r\n        setOPTLoader(true);\r\n        const localOptBalances = await localOPTBalances(props.selected_network);\r\n        let totalOPT = 0.0;\r\n        for (const v of Object.values(localOptBalances)) {\r\n            totalOPT += v;\r\n        }\r\n        setTotalDistributedOPT((totalOPT / 1e6).toFixed(3));\r\n        setOddsOfWinning((userASAHolding / totalDistributedOPT).toFixed(5))\r\n        setOPTLoader(false);\r\n    }\r\n\r\n    function checkDepositValid() {\r\n        if (props.selected_network && props.admin_addr) {\r\n            readAppGlobalState(\r\n                props.admin_addr,\r\n                OptAppID(props.selected_network),\r\n                props.selected_network\r\n            ).then((res) => {\r\n                let appGlobalState = res;\r\n                const registration_end = appGlobalState.get(\r\n                    GlobalStateKeys.REGISTRATION_END\r\n                );\r\n                const reward_distribution = appGlobalState.get(\r\n                    GlobalStateKeys.REWARD_DISTRIBUTION\r\n                );\r\n                if (registration_end && reward_distribution) {\r\n                    const range =\r\n                        reward_distribution <=\r\n                            convertDateToSeconds(new Date()) &&\r\n                        convertDateToSeconds(new Date()) <= registration_end;\r\n                    setDepositValid(range);\r\n                } else {\r\n                    // timelines are not set yet\r\n                    setDepositValid(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const LotteryDataModal = () => {\r\n        return (\r\n            <Dialog\r\n                onClose={() => setLotterModal(false)}\r\n                open={isLotteryModalActive}\r\n            >\r\n                <LotteryTable screen=\"Home\" />\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    async function getWeeklyLotteryAmt() {\r\n        setLotteryLoader(true);\r\n        const rewardAmt = await getRewardAmt(\r\n            props.selected_network,\r\n            props.admin_addr\r\n        );\r\n        if (!rewardAmt) {\r\n            setLotteryAmt(0);\r\n        } else setLotteryAmt((parseFloat(rewardAmt * 0.9) / 1e6).toFixed(6));\r\n        setLotteryLoader(false);\r\n    }\r\n\r\n    const Loader = () => {\r\n        return (\r\n            <span\r\n                style={{\r\n                    fontSize: '1.5rem'\r\n                }}\r\n            >\r\n                Calculating...{'  '}\r\n                <CircularProgress\r\n                    size={20}\r\n                    style={{ color: Color.DARK_YELLOW }}\r\n                />\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const [isMob,setIsMob] = useState(false)\r\n    useEffect(()=>{\r\n        setIsMob(window.innerWidth < 768)\r\n        const handleResize =()=>{\r\n        setIsMob(window.innerWidth < 768)\r\n\r\n        }\r\n        window.addEventListener('resize',handleResize)\r\n        return ()=> window.removeEventListener('resize',handleResize)\r\n    },[])\r\n  return (\r\n   \r\n\r\n<section className='relative min-h-[100vh] overflow-hidden'>\r\n{showFormModal && (\r\n        <WithDraw\r\n            closeModal={(state) => setShowFormModal(state)}\r\n            type={formType}\r\n            displayFlexDirection={\r\n                formType === ButtonTypes.WITHDRAW\r\n                    ? 'column-reverse'\r\n                    : 'column'\r\n            }\r\n            order={formType === ButtonTypes.WITHDRAW ? -1 : 1}\r\n        />\r\n)}\r\n           <span className='heroOverlayLeft absolute top-0 h-full  left-0 w-[120px] z-[3] '>\r\n\r\n</span>\r\n           <span className='heroOverlayRight absolute top-0 h-full  right-0 w-[120px] z-[3] '>\r\n\r\n</span>\r\n\r\n\r\n<span className='heroOverlayBottom1 absolute bottom-0 left-0 w-full h-[280.21px] z-[4]'>\r\n\r\n</span>\r\n<span className='heroOverlayBottom2 absolute bottom-[-122px]  w-full h-[363.14px] z-[5]'>\r\n\r\n</span>\r\n\r\n<span className='heroOverlayTop absolute top-0 left-0 w-full h-[262.12px] z-[5]'>\r\n\r\n</span>\r\n<img src={isMob?mobBg:chairImg} alt=\"Chair Image\" className='absolute md:w-[72.109375vw]  top-[110px] md:top-0 left-0 mix-blend-lighten' />\r\n        <ServicesHero/>\r\n        <div className='content md:w-[27.8125vw] top-[116.12px] h-[840px] md:h-[61vw]  left-[50%] transform translate-x-[-50%] md:translate-x-[0]   md:left-[65.703125vw] relative md:top-[10.56875vw] z-[7]'>\r\n        <div className='flex flex-col   items-center'>\r\n        <span class=\"colus inline-block tracking-[17.43px] text-[10px] leading-[12px] md:text-[0.73828125vw]  md:leading-[0.8859375vw] text-[#F5F5F5] md:tracking-[1.41796875vw]   font-[400]\">WELCOME TO</span>\r\n        <h1 class=\"md:text-[4.830296875vw] colus text-[#EDDB0F] md:leading-[5.79609375vw] text-[65.39px] leading-[78px] mt-[-2px] md:mt-[-4px]\">Optimum</h1>\r\n        <h4 class=\"md:text-[1.5546875vw] md:leading-[1.865625vw] colus leading-[31px] text-[26.2381px] font-[400] text-[#FFFFFF] mt-[-2px] md:mt-[-4px]\">NEW ERA OF STAKING</h4>\r\n       </div>\r\n\r\n        \r\n\r\n        <div className='flex justify-between mt-[43.65px] md:mb-[1.875vw] md:mt-[2.58515625vw] relative mb-[32px]\r\n             flex-col gap-y-[13px]  md:gap-y-[1.015625vw] items-center\r\n              '>\r\n\r\n\r\n\r\n<div className={`w-[320px] h-[101px] rounded-[24px] md:w-[25vw] md:h-[7.890625vw]   myTab2 md:rounded-[2.12vw] flex flex-col justify-center items-center text-[#FFFFFF]`}>\r\n<div className=\"myOverlay2\">\r\n        \r\n        </div>\r\n   <div className='myTabOverlays'>\r\n    <div className=\"overlay2\"></div>\r\n    <div className=\"overlay1\"></div>\r\n    </div>\r\n   \r\n        <span className='colus z-[5] text-[20px] leading-[24px] md:text-[1.5625vw] md:leading-[1.875vw]  z-[2]'>\r\n        OPT BALANCE\r\n        </span>\r\n        <span className='colus z-[5] text-[30.93px] leading-[37.11px]  md:text-[2.41640625vw] md:leading-[2.89921875vw]  z-[2]'>\r\n        {opLoader ? userASAHolding : <Loader />}\r\n        </span>\r\n    </div>\r\n        <div className={`w-[320px] h-[101px] rounded-[24px] md:w-[25vw] md:h-[7.890625vw]   myTab md:rounded-[2.12vw] flex flex-col justify-center items-center rightTab text-[#FFFFFF]`}>\r\n    <span className='tabOverlay1'></span>\r\n    <span className='tabOverlay2'></span>\r\n        <span className='colus text-[20px] leading-[24px] md:text-[1.5625vw] md:leading-[1.875vw]  z-[2]'>\r\n        ODDS OF WINNINGS\r\n        </span>\r\n        <span className='colus text-[30.93px] leading-[37.11px]  md:text-[2.41640625vw] md:leading-[2.89921875vw]  z-[2]'>\r\n       {OdssOfWinning}\r\n        </span>\r\n    </div>\r\n\r\n </div>\r\n\r\n\r\n <div className={`w-full md:w-[27.8125vw]   relative h-[74px] md:h-[5.78125vw]  flex items-cetner justify-center gap-x-[60px] md:gap-x-[4.6875vw] `}>\r\n    <span className='w-[1px] h-[52px] md:h-[4.0625vw] absolute top-[12px] md:top-[0.9375vw] border-l-[1px] border-  dotted border-[#99939C]'></span>\r\n    <img src={dottedBorder} alt=\"DottedBorder\" className='w-full object-cover   absolute top-0 left-0'/>\r\n    <img src={dottedBorder} alt=\"DottedBorder\" className='w-full   object-cover absolute bottom-0 left-0'/>\r\n    <div className='flex items-center  gap-x-[20px] md:gap-x-[1.5625vw] text-[#FFFFFF]'>\r\n        <span className='md:w-[1.89375vw] md:h-[1.25vw] w-[24.24px] h-[16px] bg-[#FF005C] clipPath2 '></span>\r\n        <span onClick={() =>\r\n                                      openForm(ButtonTypes.DEPOSIT)} className='font-[700] cursor-pointer text-[18px] md:text-[1.40625vw] leading-[27px] md:leading-[2.109375vw]'>Deposit</span>\r\n    </div>\r\n    <div className='flex items-center gap-x-[12px]  md:gap-x-[0.9375vw] text-[#FFFFFF]'>\r\n        <span className='md:w-[1.89375vw] md:h-[1.25vw] w-[24.24px] h-[16px] bg-[#EDDB0F] clipPath2 '></span>\r\n        <span className='font-[700] text-[18px] md:text-[1.40625vw] leading-[27px] md:leading-[2.109375vw] cursor-pointer' onClick={() => openForm(ButtonTypes.WITHDRAW)}>Withdraw</span>\r\n    </div>\r\n</div>\r\n       \r\n\r\n    <div className='flex flex-col items-center gap-y-[4px] mt-[32px] md:mt-[1.875vw] z-[5] relative'>\r\n      <span className='colus text-[20px] leading-[24px] md:text-[1.5625vw] md:leading-[1.875vw] text-[#EDDB0F]'>Next drawing</span>\r\n      <span className='colus text-[20px] leading-[24px] md:text-[2.34375vw] md:leading-[2.890625vw] text-[#FFFFFF]'>{timeRemaining.days} Days : {timeRemaining.hours} hours</span>\r\n      <span className='colus text-[20px] leading-[24px] md:text-[1.328125vw] md:leading-[1.5625vw] text-[#FFFFFF] mt-[3px]'>{timeRemaining.minutes} min : {timeRemaining.seconds} sec</span>\r\n    </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    </section>\r\n \r\n\r\n  )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selected: state.wallet.selected,\r\n        address: state.wallet.address,\r\n        account_store: state.wallet.account_store,\r\n        is_admin_logged: state.wallet.is_admin_logged,\r\n        selected_network: state.wallet.selected_network,\r\n        admin_addr: state.wallet.admin_addr,\r\n        success: state.feedback.success\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateAccountStore: (payload) => dispatch(updateAccountStore(payload)),\r\n        changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n        updateAddress: (payload) => dispatch(updateAddress(payload))\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home_Logged);","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\CurrentAccount.jsx",["384","385","386","387","388","389","390"],"import React from 'react'\r\nimport PopUpCloser from '../utils/PopUpCloser'\r\nimport Currentimg  from \"../../assets/images/currentaccount.svg\"\r\nimport {\r\n  SwipeableDrawer,\r\n  Button,\r\n  ListItem,\r\n  List,\r\n  styled,\r\n  Alert,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport { connect } from 'react-redux';\r\nimport { truncateString } from '../../constants/functions';\r\nimport { Color } from '../../constants/constants';\r\nimport { changeWallet, updateAddress } from '../../redux/wallet/actions';\r\n\r\n\r\nconst CurrentAccountComp = (props) => {\r\n  const [drawerState, setDrawerState] = React.useState(true);\r\n  const [toast, setToast] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n      props.closeModal(drawerState);\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [drawerState]);\r\n\r\n  const CssDrawer = styled(SwipeableDrawer)({\r\n      '& .MuiPaper-root-MuiDrawer-paper': {\r\n          backgroundColor: Color.RED\r\n      }\r\n  });\r\n  return (\r\n    <div className='active popupclass w-[100%] h-[100vh] fixed top-0 left-0  justify-center items-center z-[20] flex opacity-[0] pointer-events-none'>\r\n    <div className='w-[100%] h-[100%] absolute left-0 top-0  bg-[#11031A]  opacity-[0.8] '>\r\n         \r\n    </div>\r\n   <div className='relative flex flex-col items-center \r\n     gap-y-[32px] md:gap-y-[2.5vw]'>\r\n   <div className='current-account flex flex-col w-[288px] md:w-[22.5vw] h-[263px] md:h-[20.546875vw] bg-[#2F193D] rounded-[24px] gap-y-[24px] md:gap-y-[1.875vw] relative overflow-hidden'>\r\n\r\n   <div className= 'with-drawoverlays  absolute w-[775.41px] h-[712.56px] top-[-167.65px] left-[-237.56px] md:w-[60.57890625vw] md:h-[55.66875vw] md:top-[-13.09765625vw] md:left-[-18.559375vw]'>\r\n     \r\n     <span className='top-left'></span>\r\n     <span className='bottom-e2 z-[1]'></span>\r\n     \r\n     <span className='bottom-e3 z-[2]'></span>\r\n     </div>\r\n\r\n\r\n    <div className='pt-[26.95px] md:pt-[2.10546875vw] text-center '>\r\n        <h4 className='text-[20px] leading-[24px] md:leading-[1.875vw] md:text-[1.5625vw] text-[#FFFFFF] colus'>Current Account</h4>\r\n    </div>\r\n    <div className='flex flex-col gap-y-[16px] md:gap-y-[1.25vw]  md:pb-[2.50390625vw] pb-[32.05px]'>\r\n    <div  onClick={() => {\r\n                        navigator.clipboard.writeText(\r\n                            props.address\r\n                        );\r\n                        setToast(true);\r\n          }} className='mx-[auto] w-[223px] h-[70px] md:w-[17.421875vw]  md:h-[5.46875vw] bg-[#EDDB0F] rounded-[8px] flex items-center gap-x-[11px]  pl-[15px] cursor-pointer '>\r\n    <img src={Currentimg} alt=\"\" />\r\n    <span className='text-[16px] leading-[22px] md:leading-[1.71875vw] md:text-[1.25vw] text-[#37223B] font-[400]'>{truncateString(props.address, 13)}</span>\r\n\r\n    </div>\r\n    <div onClick={() => {\r\n                          props.changeWallet(null);\r\n                          props.updateAddress('');\r\n                          setDrawerState(false);\r\n                      }} className='cursor-pointer mx-[auto] w-[223px] h-[70px] md:w-[17.421875vw]  md:h-[5.46875vw] bg-[transparent] rounded-[8px] items-center justify-center\r\n    border-[1px] border-[#FFFFFF] flex\r\n    '>\r\n    <span className='text-[14px] leading-[19px] md:leading-[1.484375vw] md:text-[1.09375vw] text-[#FFFFFF] font-[400]'>Log Out</span>\r\n\r\n    </div>\r\n    </div>\r\n    \r\n   </div>\r\n    <PopUpCloser />\r\n   </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      selected: state.wallet.selected,\r\n      address: state.wallet.address\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n      updateAddress: (payload) => dispatch(updateAddress(payload))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentAccountComp);\r\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\AdminCards.js",["391","392"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\CustodialWalletTable.js",["393"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TableHead,\n    TablePagination,\n    TableRow,\n    useTheme,\n    Button,\n    Snackbar,\n    Alert,\n    CircularProgress\n} from '@mui/material';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport { Color, LocalStateKeys } from '../constants/constants';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport { connect } from 'react-redux';\nimport {\n    getCustodialWallets,\n    OptAppID,\n    readAppLocalState\n} from '../utils/common';\n\nconst CustodialWalletTable = (props) => {\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [toast, setToast] = React.useState(false);\n    const [rowsData, setRowsData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [paginationToken, setPaginationToken] = useState('');\n\n    function createData(address, register, vote, amount) {\n        return { address, register, vote, amount };\n    }\n\n    const getWalletInfo = async (calledFromAdminComponent = false) => {\n        setLoading(true);\n        const response = await getCustodialWallets(\n            OptAppID(props.selected_network),\n            undefined,\n            props.selected_network,\n            props.admin_addr,\n            100,\n            true,\n            calledFromAdminComponent ? undefined : paginationToken\n        );\n        setPaginationToken(response.nextToken);\n\n        if (response.custodialWallets.length) {\n            let data = [];\n            for (const acc of response.custodialWallets) {\n                const localState = await readAppLocalState(\n                    acc.address,\n                    OptAppID(props.selected_network),\n                    props.selected_network\n                );\n                if (localState === undefined) {\n                    continue;\n                }\n                const registered = localState.get(LocalStateKeys.REGISTERED);\n                const voted = localState.get(LocalStateKeys.VOTED);\n                const address = acc.address;\n                data.push(\n                    createData(address, registered, voted, acc.amount / 1e6)\n                );\n            }\n            const sortedArray = data.sort(function (a, b) {\n                return b.amount - a.amount;\n            });\n            if (calledFromAdminComponent) {\n                setRowsData(sortedArray);\n            } else {\n                setRowsData((existingData) => existingData.concat(sortedArray));\n            }\n        } else {\n            setRowsData(rowsData ?? []);\n        }\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        getWalletInfo(true);\n        setPage(0);\n    }, [props.updateCustodialWalletsData]);\n\n    useEffect(() => {\n        if (paginationToken) {\n            var paragraph = document.getElementsByClassName(\n                'MuiTablePagination-displayedRows'\n            )?.[0];\n            if (paragraph) {\n                paragraph.innerHTML = `Currently showing ${rowsData.length} results`;\n            }\n        }\n    });\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsData.length) : 0;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    function TablePaginationActions(props) {\n        const theme = useTheme();\n        const { count, page, rowsPerPage, onPageChange } = props;\n        const isLastPage = page >= Math.ceil(count / rowsPerPage) - 1;\n        const handleFirstPageButtonClick = (event) => {\n            onPageChange(event, 0);\n        };\n\n        const handleBackButtonClick = (event) => {\n            onPageChange(event, page - 1);\n        };\n\n        const handleNextButtonClick = async (event) => {\n            // token exists and fetch more data\n            if (isLastPage && paginationToken) {\n                setLoading(true);\n                await getWalletInfo();\n                setLoading(false);\n            } else {\n                onPageChange(event, page + 1);\n            }\n        };\n\n        const handleLastPageButtonClick = (event) => {\n            onPageChange(\n                event,\n                Math.max(0, Math.ceil(count / rowsPerPage) - 1)\n            );\n        };\n\n        return (\n            <div style={{ display: 'flex' }}>\n                <IconButton\n                    onClick={handleFirstPageButtonClick}\n                    disabled={page === 0}\n                    aria-label=\"first page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <LastPageIcon />\n                    ) : (\n                        <FirstPageIcon />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleBackButtonClick}\n                    disabled={page === 0}\n                    aria-label=\"previous page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <KeyboardArrowRight />\n                    ) : (\n                        <KeyboardArrowLeft />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleNextButtonClick}\n                    disabled={!paginationToken && isLastPage}\n                    aria-label=\"next page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <KeyboardArrowLeft />\n                    ) : (\n                        <KeyboardArrowRight />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleLastPageButtonClick}\n                    disabled={isLastPage}\n                    aria-label=\"last page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <FirstPageIcon />\n                    ) : (\n                        <LastPageIcon />\n                    )}\n                </IconButton>\n            </div>\n        );\n    }\n\n    TablePaginationActions.propTypes = {\n        count: PropTypes.number.isRequired,\n        onPageChange: PropTypes.func.isRequired,\n        page: PropTypes.number.isRequired,\n        rowsPerPage: PropTypes.number.isRequired\n    };\n\n    return (\n        <div>\n            <Paper elevation={24} className=\"stats_card\">\n                <div className=\"padding_sm\">\n                    <h1>Custodial Wallets Information</h1>\n                    {!loading && !rowsData.length ? (\n                        <h2 style={{ color: Color.RED }}>\n                            No Custodial wallets exists.\n                        </h2>\n                    ) : (\n                        <TableContainer>\n                            <Table\n                                sx={{\n                                    backgroundColor: Color.DARK_YELLOW\n                                }}\n                                aria-label=\"custom pagination table\"\n                            >\n                                <TableHead>\n                                    <TableRow\n                                        sx={{\n                                            borderBottom: `2px solid ${Color.RED}`,\n                                            '& th': {\n                                                fontSize: '1.25rem',\n                                                color: Color.RED,\n                                                fontWeight: 600\n                                            }\n                                        }}\n                                    >\n                                        <TableCell>Address</TableCell>\n                                        <TableCell align=\"right\">\n                                            Registered\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            Voted\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            Amount\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                {loading ? (\n                                    <TableRow>\n                                        <TableCell colSpan={4}>\n                                            <div\n                                                style={{\n                                                    textAlign: 'center'\n                                                }}\n                                            >\n                                                <CircularProgress\n                                                    size=\"5rem\"\n                                                    style={{\n                                                        color: Color.RED,\n                                                        justifyContent: 'center'\n                                                    }}\n                                                />\n                                            </div>\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    <TableBody>\n                                        {(rowsPerPage > 0\n                                            ? rowsData.slice(\n                                                  page * rowsPerPage,\n                                                  page * rowsPerPage +\n                                                      rowsPerPage\n                                              )\n                                            : rowsData\n                                        ).map((row) => (\n                                            <TableRow\n                                                key={row.address}\n                                                sx={{\n                                                    borderBottom:\n                                                        '1px solid black',\n                                                    '& th': {\n                                                        fontSize: '1rem',\n                                                        color: Color.RED,\n                                                        fontWeight: 600\n                                                    }\n                                                }}\n                                            >\n                                                <TableCell\n                                                    component=\"th\"\n                                                    scope=\"row\"\n                                                >\n                                                    <div className=\"flexBox_row_center\">\n                                                        {row.address.substring(\n                                                            0,\n                                                            15\n                                                        ) + '...'}\n\n                                                        <Button\n                                                            style={{\n                                                                margin: -10,\n                                                                color: Color.RED\n                                                            }}\n                                                            onClick={() => {\n                                                                setToast(true);\n                                                                navigator.clipboard.writeText(\n                                                                    row.address\n                                                                );\n                                                            }}\n                                                        >\n                                                            <ContentCopyIcon />\n                                                        </Button>\n                                                    </div>\n                                                </TableCell>\n\n                                                <TableCell\n                                                    component=\"th\"\n                                                    align=\"right\"\n                                                >\n                                                    {row.register}\n                                                </TableCell>\n                                                <TableCell\n                                                    component=\"th\"\n                                                    align=\"right\"\n                                                >\n                                                    {row.vote}\n                                                </TableCell>\n                                                <TableCell\n                                                    component=\"th\"\n                                                    align=\"right\"\n                                                >\n                                                    {row.amount}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n\n                                        {emptyRows > 0 && (\n                                            <TableRow\n                                                style={{\n                                                    height: 53 * emptyRows\n                                                }}\n                                            >\n                                                <TableCell colSpan={6} />\n                                            </TableRow>\n                                        )}\n                                    </TableBody>\n                                )}\n\n                                <TableFooter>\n                                    <TableRow>\n                                        <TablePagination\n                                            sx={{\n                                                fontSize: '1.5rem !important',\n                                                color: Color.RED\n                                            }}\n                                            rowsPerPageOptions={[\n                                                5,\n                                                10,\n                                                25,\n                                                { label: 'All', value: -1 }\n                                            ]}\n                                            colSpan={4}\n                                            count={rowsData.length}\n                                            rowsPerPage={rowsPerPage}\n                                            page={page}\n                                            SelectProps={{\n                                                inputProps: {\n                                                    'aria-label':\n                                                        'rows per page'\n                                                },\n                                                native: true\n                                            }}\n                                            onPageChange={handleChangePage}\n                                            onRowsPerPageChange={\n                                                handleChangeRowsPerPage\n                                            }\n                                            ActionsComponent={\n                                                TablePaginationActions\n                                            }\n                                        />\n                                    </TableRow>\n                                </TableFooter>\n                            </Table>\n                        </TableContainer>\n                    )}\n                </div>\n            </Paper>\n            <Snackbar\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n                open={toast}\n                onClose={() => setToast(false)}\n                autoHideDuration={1000}\n            >\n                <Alert\n                    variant=\"filled\"\n                    severity=\"error\"\n                    icon={false}\n                    className=\"font_size_small\"\n                >\n                    Copied\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selected: state.wallet.selected,\n        address: state.wallet.address,\n        error: state.feedback.error,\n        selected_network: state.wallet.selected_network,\n        admin_addr: state.wallet.admin_addr,\n        governance_addr: state.wallet.governance_addr,\n        web: state.wallet.webMode\n    };\n};\n\nexport default connect(mapStateToProps)(CustodialWalletTable);\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\CustomTextField.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Tooltip.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\LotteryTable.js",["394"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    CircularProgress,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableFooter,\n    TableHead,\n    TablePagination,\n    TableRow,\n    useTheme\n} from '@mui/material';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport { Color } from '../constants/constants';\nimport { connect } from 'react-redux';\nimport { localOPTRewardAmt } from '../utils/common';\nimport CelebrationIcon from '@mui/icons-material/Celebration';\nimport { addError } from '../redux/feedback_reducer';\n\nconst LotteryTable = (props) => {\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [rows, setRows] = useState([]);\n    const [showLoading, setLoading] = useState(false);\n\n    async function getLotteryData() {\n        setLoading(true);\n        const data = await localOPTRewardAmt(props.selected_network).catch(\n            (error) => {\n                setLoading(false);\n                props.addError(error.message);\n            }\n        );\n        if (data?.length > 0) {\n            if (props.screen === 'Home') {\n                const winnerData = data.filter(\n                    (item) => item.reward !== 'Nil' || item.reward > 0\n                );\n                setRows(winnerData);\n            } else {\n                const addressWithStake = data.filter(\n                    (item) => item.stake !== 'Nil' || item.stake > 0\n                );\n                setRows(addressWithStake);\n            }\n        }\n        setLoading(false);\n    }\n    useEffect(() => {\n        getLotteryData();\n    }, [props.updateData]);\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows =\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    function TablePaginationActions(props) {\n        const theme = useTheme();\n        const { count, page, rowsPerPage, onPageChange } = props;\n\n        const handleFirstPageButtonClick = (event) => {\n            onPageChange(event, 0);\n        };\n\n        const handleBackButtonClick = (event) => {\n            onPageChange(event, page - 1);\n        };\n\n        const handleNextButtonClick = (event) => {\n            onPageChange(event, page + 1);\n        };\n\n        const handleLastPageButtonClick = (event) => {\n            onPageChange(\n                event,\n                Math.max(0, Math.ceil(count / rowsPerPage) - 1)\n            );\n        };\n\n        return (\n            <div style={{ display: 'flex' }}>\n                <IconButton\n                    onClick={handleFirstPageButtonClick}\n                    disabled={page === 0}\n                    aria-label=\"first page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <LastPageIcon />\n                    ) : (\n                        <FirstPageIcon />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleBackButtonClick}\n                    disabled={page === 0}\n                    aria-label=\"previous page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <KeyboardArrowRight />\n                    ) : (\n                        <KeyboardArrowLeft />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleNextButtonClick}\n                    disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                    aria-label=\"next page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <KeyboardArrowLeft />\n                    ) : (\n                        <KeyboardArrowRight />\n                    )}\n                </IconButton>\n                <IconButton\n                    onClick={handleLastPageButtonClick}\n                    disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                    aria-label=\"last page\"\n                >\n                    {theme.direction === 'rtl' ? (\n                        <FirstPageIcon />\n                    ) : (\n                        <LastPageIcon />\n                    )}\n                </IconButton>\n            </div>\n        );\n    }\n\n    TablePaginationActions.propTypes = {\n        count: PropTypes.number.isRequired,\n        onPageChange: PropTypes.func.isRequired,\n        page: PropTypes.number.isRequired,\n        rowsPerPage: PropTypes.number.isRequired\n    };\n    return (\n        <div>\n            <Paper elevation={24} className=\"stats_card\">\n                <div className=\"padding_sm\">\n                    <h1>\n                        Prize Game Winners Information <CelebrationIcon />\n                    </h1>\n                    {showLoading ? (\n                        <div className=\"flexBox_center flex_row\">\n                            <CircularProgress\n                                style={{\n                                    color: Color.DARK_YELLOW,\n                                    backgroundColor: 'black'\n                                }}\n                            />\n                        </div>\n                    ) : (\n                        <div>\n                            {!rows.length ? (\n                                <h2 style={{ color: Color.RED }}>\n                                    No prize game has been drawn yet.\n                                </h2>\n                            ) : (\n                                <TableContainer>\n                                    <Table\n                                        sx={{\n                                            backgroundColor: Color.DARK_YELLOW\n                                        }}\n                                        aria-label=\"custom pagination table\"\n                                    >\n                                        <TableHead\n                                            sx={{\n                                                borderBottom: `2px solid ${Color.RED}`,\n                                                '& th': {\n                                                    fontSize: '1.25rem',\n                                                    color: Color.RED,\n                                                    fontWeight: 600\n                                                }\n                                            }}\n                                        >\n                                            <TableRow>\n                                                <TableCell\n                                                    align=\"center\"\n                                                    colSpan={1}\n                                                ></TableCell>\n                                                <TableCell\n                                                    align=\"center\"\n                                                    colSpan={3}\n                                                >\n                                                    (in OPT)\n                                                </TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell>Address</TableCell>\n                                                {/* <TableCell align=\"right\">\n                                                    Stake\n                                                </TableCell> */}\n\n                                                <TableCell align=\"right\">\n                                                    Reward\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {(rowsPerPage > 0\n                                                ? rows.slice(\n                                                      page * rowsPerPage,\n                                                      page * rowsPerPage +\n                                                          rowsPerPage\n                                                  )\n                                                : rows\n                                            ).map((row) => (\n                                                <TableRow\n                                                    key={row.address}\n                                                    sx={{\n                                                        borderBottom:\n                                                            '1px solid black',\n                                                        '& th': {\n                                                            fontSize: '1rem',\n                                                            color: Color.RED,\n                                                            fontWeight: 600\n                                                        }\n                                                    }}\n                                                >\n                                                    <TableCell\n                                                        component=\"th\"\n                                                        scope=\"row\"\n                                                    >\n                                                        <div className=\"flexBox_row_center\">\n                                                            {row.address}\n                                                        </div>\n                                                    </TableCell>\n\n                                                    {/* <TableCell\n                                                        component=\"th\"\n                                                        align=\"right\"\n                                                    >\n                                                        {row.stake}\n                                                    </TableCell> */}\n\n                                                    <TableCell\n                                                        component=\"th\"\n                                                        align=\"right\"\n                                                    >\n                                                        {row.reward}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n\n                                            {emptyRows > 0 && (\n                                                <TableRow\n                                                    style={{\n                                                        height: 53 * emptyRows\n                                                    }}\n                                                >\n                                                    <TableCell colSpan={6} />\n                                                </TableRow>\n                                            )}\n                                        </TableBody>\n                                        <TableFooter>\n                                            <TableRow>\n                                                <TablePagination\n                                                    sx={{\n                                                        fontSize:\n                                                            '1.5rem !important',\n                                                        color: Color.RED\n                                                    }}\n                                                    rowsPerPageOptions={[\n                                                        5,\n                                                        10,\n                                                        25,\n                                                        {\n                                                            label: 'All',\n                                                            value: -1\n                                                        }\n                                                    ]}\n                                                    colSpan={4}\n                                                    count={rows.length}\n                                                    rowsPerPage={rowsPerPage}\n                                                    page={page}\n                                                    SelectProps={{\n                                                        inputProps: {\n                                                            'aria-label':\n                                                                'rows per page'\n                                                        },\n                                                        native: true\n                                                    }}\n                                                    onPageChange={\n                                                        handleChangePage\n                                                    }\n                                                    onRowsPerPageChange={\n                                                        handleChangeRowsPerPage\n                                                    }\n                                                    ActionsComponent={\n                                                        TablePaginationActions\n                                                    }\n                                                />\n                                            </TableRow>\n                                        </TableFooter>\n                                    </Table>\n                                </TableContainer>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </Paper>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selected_network: state.wallet.selected_network\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addError: (payload) => dispatch(addError(payload))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LotteryTable);\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\constants.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\actions.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\reducer.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\gen_accts_and_whitelist.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\register.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\dispense_lottery.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\vote.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\close_custodial_wallets.js",["395","396","397","398"],"import { types } from '@algo-builder/web';\nimport { AppActions, LocalStateKeys } from '../constants/constants.js';\nimport { algodClient, indexerClient } from './algob.config.js';\nconst {\n    tryExecuteTx,\n    chunkArray,\n    readAppLocalState,\n    OptAppID,\n    executeRekeyedTx,\n    getCustodialWallets\n} = require('./common.js');\nconst { getApplicationAddress, default: algosdk } = require('algosdk');\n\n/**\n * Returns a list of custodial wallet addresses whose balance is above 10000 ALGO.\n * Inspiration: to take back the rewards gained by wallets during governance.\n * + Each account must be whitelisted and rekeyed to the optimum app.\n * + Each account must be registered and has voted to governance.\n * + We use the indexer to query all accounts opted in & rekeyed to app\n */\nasync function getCustodialWalletsToClose(network, adminAddr) {\n    const accounts = await getCustodialWallets(\n        OptAppID(network),\n        undefined,\n        network,\n        adminAddr,\n        200\n    );\n    const custodialWallets = [];\n    for (const acc of accounts) {\n        // check if there is \"residual balance\" in the custodial wallet (< 5 ALGO)\n        const bal = Math.floor(acc.amount);\n        if (bal < 5e6) {\n            custodialWallets.push(acc.address);\n        }\n    }\n\n    return custodialWallets;\n}\n\n/**\n * Find and withdraw from each custodial wallet(s) 10000 ALGO's. Returns if enough wallets\n * are not available to withdraw from (which shouldn't happen).\n * NOTE: withdraw amount is in microAlgos\n */\nasync function _closeCustodialWallets(\n    web,\n    custodialWallets,\n    adminAddr,\n    network,\n    selectedWalletType\n) {\n    // split whole custodial wallets array into chunks of 4\n    // as max 4 accounts can be passed in a tx group.\n    const txAccountArrays = chunkArray(custodialWallets, 4); // pass in tx.accounts\n\n    // 1. rekey all custodial wallets from contract -> admin\n    const rekeyTxArray = [];\n    for (let i = 0, j = 0; i < custodialWallets.length; i += 4, j++) {\n        // in each iteration we're withdrawing rewards from 4 wallets\n        rekeyTxArray.push({\n            type: types.TransactionType.CallApp,\n            sign: types.SignType.SecretKey,\n            fromAccountAddr: adminAddr,\n            appID: OptAppID(network),\n            payFlags: { totalFee: 1000 + 1000 * txAccountArrays[j].length },\n            accounts: txAccountArrays[j],\n            appArgs: [AppActions.CLOSE_CUSTODIAL_WALLETS]\n        });\n    }\n\n    // finally assemble transactions into groups of 16. Submit each group to network\n    const rekeyTxGroups = chunkArray(rekeyTxArray, 16);\n\n    for (const grp of rekeyTxGroups) {\n        await tryExecuteTx(web, grp);\n    }\n\n    const client = algodClient(network);\n\n    // 2. clear wallet state (clear tx appl call)\n    const clearTxArray = [];\n    for (let i = 0; i < custodialWallets.length; i++) {\n        const suggestedParams = await client.getTransactionParams().do();\n        suggestedParams.flatFee = true;\n        suggestedParams.fee = 1000;\n\n        // in each iteration we're withdrawing rewards from 4 wallets\n        clearTxArray.push(\n            algosdk.makeApplicationClearStateTxnFromObject({\n                from: custodialWallets[i],\n                suggestedParams: suggestedParams,\n                appIndex: OptAppID(network)\n            })\n        );\n    }\n\n    const clearTxGroups = chunkArray(clearTxArray, 16);\n    for (const grp of clearTxGroups) {\n        await executeRekeyedTx(web, grp, adminAddr, selectedWalletType);\n    }\n\n    // 3. close the wallet\n    const closeTxnArray = [];\n    for (let i = 0; i < custodialWallets.length; i++) {\n        const suggestedParams = await client.getTransactionParams().do();\n        suggestedParams.flatFee = true;\n        suggestedParams.fee = 1000;\n\n        closeTxnArray.push(\n            algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n                from: custodialWallets[i],\n                suggestedParams: suggestedParams,\n                closeRemainderTo: adminAddr,\n                amount: 0,\n                to: custodialWallets[i]\n            })\n        );\n    }\n\n    const closeTxGroups = chunkArray(closeTxnArray, 16);\n    for (const grp of closeTxGroups) {\n        await executeRekeyedTx(web, grp, adminAddr, selectedWalletType);\n    }\n}\n\n/**\n * 1. Get custodial wallets with extra bal ( < 5 ALGO )\n * 2. Trigger the smart contract to completely withdraw these algos from the custodial wallets back into the contract\n */\nexport async function closeCustodialWallets(\n    web,\n    network,\n    adminAddr,\n    selectedWalletType\n) {\n    const custodialWallets = await getCustodialWalletsToClose(\n        network,\n        adminAddr\n    );\n\n    await _closeCustodialWallets(\n        web,\n        custodialWallets,\n        adminAddr,\n        network,\n        selectedWalletType\n    );\n}\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\set_gov_reward_rate.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\withdraw_rewards.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\common.js",["399","400","401","402"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\deposit.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\ConnectWallet.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\Form.js",["403","404"],"/* global BigInt */\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Dialog, DialogTitle } from '@mui/material';\nimport { ButtonTypes, TEN_BILLION } from '../constants/constants';\nimport SwapVertIcon from '@mui/icons-material/SwapVert';\nimport { deposit, expectedOPTAmount } from '../utils/deposit';\nimport { computeAlgoWithdrawAmtFromOPT, withdraw } from '../utils/withdraw';\nimport { FEE_ADDR, getAssetHolding, OptAppID, OptAsaID } from '../utils/common';\nimport CustomTextField from './CustomTextField';\nimport { connect } from 'react-redux';\nimport { addError, addSuccess } from '../redux/feedback_reducer';\nimport Loader from './Loader';\nconst { getApplicationAddress } = require('algosdk');\n\nfunction Form(props) {\n    const [openModal, setOpenModal] = useState(true);\n    const handleCloseModal = () => setOpenModal(false);\n    const [algoAmt, setAlgoAmt] = useState(undefined);\n    const [opt, setOpt] = useState(undefined);\n    const [amtError, setAmtError] = useState('');\n    const [optError, setOptError] = useState('');\n    const [isOPTEdit, setIsOPTEdit] = useState(false);\n    const [isAlgoEdit, setIsAlgoEdit] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [userASAHolding, setUserASAHolding] = useState(0);\n    const [isBackdropActive, setBackdropActive] = useState(false);\n    const [algoExchangeAmt, setAlgoExchangeAmt] = useState(1);\n    const [OPTExchangeAmt, setOPTExchangeAmt] = useState(1);\n\n    useEffect(() => {\n        props.closeModal(openModal);\n        getOPTBalanceOfUser();\n        getAlgoExchangeAmt();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [openModal]);\n\n    useEffect(() => {\n        async function computeOPT() {\n            if (algoAmt) {\n                setLoading(true);\n                let opt = +(await expectedOPTAmount(\n                    algoAmt * 1e6,\n                    props.selected_network,\n                    props.admin_addr\n                ));\n                if (opt === 0) {\n                    // no prior deposit\n                    const appAccAddr = getApplicationAddress(\n                        OptAppID(props.selected_network)\n                    );\n                    const optHoldingOfApp = await getAssetHolding(\n                        appAccAddr,\n                        OptAsaID(props.selected_network),\n                        props.selected_network\n                    );\n                    if (BigInt(optHoldingOfApp.amount) === TEN_BILLION) {\n                        opt = algoAmt;\n                    }\n                }\n                setLoading(false);\n                return setOpt(opt);\n            } else {\n                setLoading(false);\n                return setOpt('');\n            }\n        }\n        if (isAlgoEdit) {\n            computeOPT();\n        }\n    }, [algoAmt, isAlgoEdit]);\n\n    useEffect(() => {\n        async function computeAlgo() {\n            if (opt) {\n                if (userASAHolding < opt) {\n                    setOptError(\n                        'Insufficient balance, not enough OPT in your account '\n                    );\n                }\n                setLoading(true);\n                const calculatedAmt =\n                    parseInt(\n                        await computeAlgoWithdrawAmtFromOPT(\n                            props.admin_addr,\n                            OptAppID(props.selected_network),\n                            OptAsaID(props.selected_network),\n                            opt,\n                            props.selected_network\n                        ).catch((error) => props.addError(error.message))\n                    ) / 1e6;\n                setLoading(false);\n                return setAlgoAmt(calculatedAmt);\n            } else {\n                setLoading(false);\n                return setAlgoAmt('');\n            }\n        }\n        if (isOPTEdit) {\n            computeAlgo();\n        }\n    }, [opt, isOPTEdit]);\n\n    const SwapIcon = (\n        <div\n            className=\"swap_icon_container\"\n            style={{ marginTop: amtError || optError ? '1rem' : 0 }}\n        >\n            <SwapVertIcon className=\"swap_icon\" />\n        </div>\n    );\n\n    const handleClick = async () => {\n        await getAlgoExchangeAmt();\n        if (props.type === ButtonTypes.DEPOSIT) {\n            if (!algoAmt) {\n                setAmtError('Please provide the algos to be deposited.');\n            } else {\n                setBackdropActive(true);\n                deposit(\n                    props.web,\n                    props.address,\n                    algoAmt * 1e6,\n                    props.selected_network,\n                    props.admin_addr\n                )\n                    .then(() => {\n                        setBackdropActive(false);\n                        props.addSuccess(\n                            `Your ${algoAmt} Algos is deposited successfully.`\n                        );\n                        handleCloseModal();\n                    })\n                    .catch((error) => {\n                        setBackdropActive(false);\n                        props.addError(error.message);\n                    });\n            }\n        } else {\n            if (!opt) {\n                setOptError('Please provide OPT to be withdrawn.');\n            } else {\n                setBackdropActive(true);\n                withdraw(\n                    props.web,\n                    props.address,\n                    FEE_ADDR,\n                    opt,\n                    props.selected_network,\n                    props.admin_addr\n                )\n                    .then(() => {\n                        setBackdropActive(false);\n                        props.addSuccess(\n                            `Your ${opt} OPT is exchanged successfully.`\n                        );\n                        handleCloseModal();\n                    })\n                    .catch((error) => {\n                        setBackdropActive(false);\n                        props.addError(error.message);\n                    });\n            }\n        }\n    };\n\n    async function getOPTBalanceOfUser() {\n        const balance = await getAssetHolding(\n            props.address,\n            OptAsaID(props.selected_network),\n            props.selected_network\n        );\n        const amt = balance?.amount / 1e6;\n        if (isNaN(amt)) {\n            setUserASAHolding(0);\n        } else setUserASAHolding(amt ?? 0);\n    }\n\n    async function getAlgoExchangeAmt() {\n        await getOPTExchangeAmt();\n        await expectedOPTAmount(1e6, props.selected_network, props.admin_addr)\n            .then((amt) => {\n                setAlgoExchangeAmt(amt);\n            })\n            .catch((error) => {\n                console.log(error);\n                setAlgoExchangeAmt(1);\n            });\n    }\n\n    async function getOPTExchangeAmt() {\n        await computeAlgoWithdrawAmtFromOPT(\n            props.admin_addr,\n            OptAppID(props.selected_network),\n            OptAsaID(props.selected_network),\n            1,\n            props.selected_network\n        )\n            .then((amt) => {\n                setOPTExchangeAmt((parseInt(amt) / 1e6).toFixed(5));\n            })\n            .catch((error) => {\n                console.log(error);\n                setOPTExchangeAmt(1);\n            });\n    }\n\n    return (\n        <Dialog onClose={handleCloseModal} open={openModal}>\n            <Loader loading={isBackdropActive} />\n            <div\n                className=\"modal\"\n                style={{ minHeight: '20rem', minWidth: '30rem' }}\n            >\n                <DialogTitle className=\"modal_heading\">\n                    {props.type}\n                </DialogTitle>\n                <div className=\"form_container\">\n                    <div>\n                        Exchange rate{' '}\n                        {props.type === ButtonTypes.WITHDRAW &&\n                            '(prior to a .1% fee)'}\n                    </div>\n                    <div className=\"padding_top_sm marginBottom_small\">\n                        {props.type === ButtonTypes.WITHDRAW\n                            ? `1 OPT ~ ${OPTExchangeAmt} ALGO`\n                            : `1 ALGO ~ ${algoExchangeAmt} OPT`}\n                    </div>\n                    <div\n                        className=\"flexBox_column\"\n                        style={{ flexDirection: props.displayFlexDirection }}\n                    >\n                        <CustomTextField\n                            error={amtError}\n                            key=\"algos\"\n                            label=\"Algos\"\n                            variant=\"filled\"\n                            className=\"textfield\"\n                            type=\"number\"\n                            value={algoAmt || ''}\n                            disabled={props.type === ButtonTypes.WITHDRAW}\n                            onChange={(event) => {\n                                setIsAlgoEdit(true);\n                                setIsOPTEdit(false);\n                                setAmtError('');\n                                setAlgoAmt(\n                                    (event.target.value * 1.0).toFixed(6)\n                                        ? +(event.target.value * 1.0).toFixed(6)\n                                        : '' // else when it is empty it shows 0\n                                );\n                            }}\n                            helperText={amtError}\n                            showLoader={\n                                props.type === ButtonTypes.WITHDRAW && loading\n                            }\n                        />\n                        {SwapIcon}\n                        <CustomTextField\n                            error={optError}\n                            disabled={props.type === ButtonTypes.DEPOSIT}\n                            key=\"opt\"\n                            label=\"OPT\"\n                            variant=\"filled\"\n                            className=\"textfield\"\n                            type=\"number\"\n                            value={opt || ''}\n                            onChange={(event) => {\n                                setIsAlgoEdit(false);\n                                setIsOPTEdit(true);\n                                setOptError('');\n                                setOpt(\n                                    (event.target.value * 1.0).toFixed(6)\n                                        ? +(event.target.value * 1.0).toFixed(6)\n                                        : ''\n                                );\n                            }}\n                            helperText={optError}\n                            showLoader={\n                                props.type !== ButtonTypes.WITHDRAW && loading\n                            }\n                        />\n\n                        <Button\n                            className=\"link_btn marginTop_small\"\n                            style={{ order: props.order }}\n                            onClick={handleClick}\n                            disabled={optError || amtError}\n                        >\n                            {props.type}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </Dialog>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        address: state.wallet.address,\n        error: state.feedback.error,\n        success: state.feedback.success,\n        selected_network: state.wallet.selected_network,\n        admin_addr: state.wallet.admin_addr,\n        web: state.wallet.webMode\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addError: (payload) => dispatch(addError(payload)),\n        addSuccess: (payload) => dispatch(addSuccess(payload))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\date.js",["405","406"],"import moment from 'moment';\n\nexport function convertDateToSeconds(value) {\n    return moment(value).unix();\n}\n\nexport function convertSecondsToDate(value) {\n    return moment.unix(value).format('yyyy-MM-DD' + 'T' + 'HH:mm');\n}\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\constants\\functions.js",["407"],"import React, { Component }  from 'react';\r\n\r\nexport function truncateString(str, n) {\r\n    return str.length > n ? <>{str.substr(0, n - 1)} &hellip;</> : str;\r\n}\r\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\modal\\WithDraw.jsx",["408","409","410","411","412","413","414","415","416","417","418"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomePara.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomeHeading.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Tagline.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Paragraph.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\BtnGroups.jsx",["419","420"],"import React from 'react'\nimport dottedBorder from '../../assets/images/sevices/dottedBorder.svg'\nimport CustomToolTip from '../../components/Tooltip';\n\nconst BtnGroups = ({props, classes,white, isDepositValid, ButtonTypes_DEPOSIT, ButtonTypes_WITHDRAW, openForm}) => {\n  const openLoginModal =()=>{\n     \n    document.getElementById('loginModal').classList.add('active')\n}\n  \n\n\n  return (\n    \n  <div className={`w-full md:w-[27.8125vw]   relative h-[74px] md:h-[5.78125vw]  flex items-cetner justify-center gap-x-[60px] md:gap-x-[4.6875vw] ${classes}`}>\n\n    <span className='w-[1px] h-[52px] md:h-[4.0625vw] absolute top-[12px] md:top-[0.9375vw] border-l-[1px] border-  dotted border-[#99939C]'></span>\n    <img src={dottedBorder} alt=\"DottedBorder\" className='w-full object-cover   absolute top-0 left-0'/>\n    \n    <img src={dottedBorder} alt=\"DottedBorder\" className='w-full   object-cover absolute bottom-0 left-0'/>\n    <div className='flex cursor-pointer items-center  gap-x-[20px] md:gap-x-[1.5625vw] '>\n      <span className='md:w-[1.89375vw] md:h-[1.25vw] w-[24.24px] h-[16px] bg-[#FF005C] clipPath2 '></span>\n      <span onClick={() =>\n                                      openForm(ButtonTypes_DEPOSIT)\n                                  } className={`font-[700] text-[18px] md:text-[1.40625vw] leading-[27px] md:leading-[2.109375vw] ${white &&\" text-white\"}`}>Desposit</span>\n  \n    </div>\n\n    <div className='flex cursor-pointer items-center gap-x-[12px]  md:gap-x-[0.9375vw] '>\n        <span className='md:w-[1.89375vw] md:h-[1.25vw] w-[24.24px] h-[16px] bg-[#EDDB0F] clipPath2 '></span>\n        <span onClick={() => openForm(ButtonTypes_WITHDRAW)}\n                         className={`font-[700] text-[18px] md:text-[1.40625vw] leading-[27px] md:leading-[2.109375vw] ${white &&\" text-white\"}`}>Withdraw</span>\n    </div>\n</div>\n  )\n}\n\nexport default BtnGroups","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Tab.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Heading.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\SubHeading.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\InfoGraphic.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\PrizeMoney.jsx",["421"],"import React from 'react'\r\nimport HomeHeading from '../utils/HomeHeading'\r\nimport HomeLink from '../utils/HomeLink'\r\nimport HomePara from '../utils/HomePara'\r\n\r\nconst PrizeMoney = () => {\r\n  return (\r\n    <section className='bg-[#11031A] relative pt-[53.6px] pb-[32px] md:py-[5.3125vw]'>\r\n    <div className='w-[79.93%] gap-y-[16px] md:w-[87.5vw] flex-col items-center md:items-start md:flex-row mx-auto flex justify-between' >\r\n  \r\n    <HomeHeading title={\"Where does the prize money come from?\"} classes={\" text-white md:w-[32.65625vw] w-[unset] \"}/>\r\n    <div> \r\n         <HomePara classes={'text-[#ADADAD] mb-[16px] md:mb-[1.25vw] md:w-[50vw] w-[unset] '} title={\"The Optimum app generates prizes from interest accrued on deposited funds by utilizing non-custodial Governance accounts, with automated voting and registration in line with Algorand Foundation recommendations. The majority of rewards goes to the prize pool, with a smaller portion distributed evenly among all Optimum participants.\"}/> \r\n            <button className='text-[#EDDB0F] text-[18px] md:text-[1.40625vw] font-[700]'>Learn More</button>\r\n        </div> \r\n    </div>\r\n</section>\r\n  )\r\n}\r\n\r\nexport default PrizeMoney","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Wallet.jsx",["422"],"import React from 'react'\r\nimport HomeHeading from '../utils/HomeHeading'\r\nimport HomeLink from '../utils/HomeLink'\r\nimport HomePara from '../utils/HomePara'\r\nimport wallet from '../../assets/images/home/wallet.svg'\r\nimport mobwallet from '../../assets/images/home/mobwallet.svg'\r\n\r\n\r\nconst Wallet = () => {\r\n  return (\r\n    <div className=\"relative\">\r\n    <div className='w-[79.93%] mx-[auto] md:mx-[unset] md:w-[35vw] top-[16vw] right-[8.28125vw] md:absolute text-center flex flex-col items-center gap-y-[16px] md:gap-y-[1.25vw]'>\r\n                <HomeHeading title={\"How are prizes distributed?\"}/>\r\n                <HomePara classes={\" text-[#ADADAD] md:w-[29.13515625vw] \"} title={\"Prizes are awarded in OPT and distributed automatically to the winning wallet address. These winners are posted to a public list, accessible through the web-based application.\"}/>\r\n    </div>\r\n    <div className=' relative top-[-35vw] h-[1108px] md:h-[unset]'>\r\n        <img src={wallet} alt=\"Wallet\"  className='w-[85vw] hidden md:block'/>\r\n        <img src={mobwallet} alt=\"Wallet\"  className='block md:hidden\r\n        w-[100%]  object-cover h-[1108px] absolute top-[-13%]\r\n        '/>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Wallet","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Ring.jsx",["423"],"import React from 'react'\r\nimport HomeHeading from '../utils/HomeHeading'\r\nimport HomeLink from '../utils/HomeLink'\r\nimport HomePara from '../utils/HomePara'\r\nimport weeklyPrize from '../../assets/images/home/weeklyPrize.svg'\r\nimport weeklyoverlay from '../../assets/images/home/weeklyoverlay.svg'\r\nimport weeklyarow from '../../assets/images/home/weeklyarrow.svg'\r\nimport weeklyleftcoin from '../../assets/images/home/weeklyleftcoin.svg'\r\nimport weeklyrightcoin from '../../assets/images/home/weeklyrightcoin.svg'\r\n\r\n\r\n\r\n\r\nconst Ring = () => {\r\n  return (\r\n    <div className=\"md:relative mt-[-470px] mb-[255.71px] md:mb-[0px]  md:mt-[0px] top-[-35vw]\">\r\n    <div className='w-[79.93%]  mx-[auto] md:w-[40.9375vw] z-[5] left-[7.1875vw] md:absolute text-center flex flex-col items-center gap-y-[16px] md:gap-y-[1.25vw]'>\r\n        <HomeHeading  classes={\"md:w-[35vw]\"} title={\"Do I have to enter for each weekly prize?\"}/>\r\n        <HomePara classes={\" text-[#ADADAD] \"} title={\"Deposits are automatically eligible for weekly prizes until withdrawn. As described in Terms and Conditions, mail in submissions can also be made within the first two weeks of a Governance period. Individuals submitting a mail-in entry will be treated as if depositing 10 ALGO.\"}/>\r\n    </div>\r\n    <div className=\" md:absolute mb-[560px] md:mb-[0px] right-0 top-[-29vw]\">\r\n        <img src={weeklyPrize} alt=\"Weekly Prize\" className='w-[69.375vw]   md:block hidden'/>\r\n        <div className='block md:hidden relative h-[184.77px]'>\r\n       <img src={weeklyoverlay} alt=\"\"  className='absolute w-[100%] object-cover top-[-100%]  left-0'/>\r\n       <img src={weeklyarow} alt=\"\" className='absolute top-[80%]\r\n       left-[50%] transform translate-x-[-50%] translate-y-[-20%] z-[2]\r\n        '/>\r\n       <img src={weeklyleftcoin} alt=\"\" className='absolute left-0 top-[40%]\r\ntransform\r\ntranslate-y-[22%] z-[3]'/>\r\n       <img src={weeklyrightcoin} alt=\"\" className='absolute right-0 top-[35%]'/>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Ring","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Table.jsx",["424"],"import React from 'react'\r\nimport HomeHeading from '../utils/HomeHeading'\r\nimport HomeLink from '../utils/HomeLink'\r\nimport HomePara from '../utils/HomePara'\r\n\r\nconst Table = () => {\r\n  return (\r\n    <div className=\"relative md:py-[9vw]\">\r\n    <div className='w-[79.93%] md:w-[35vw] mx-[auto] top-[14.078125vw] left-[8.75vw] md:absolute text-center flex flex-col items-center gap-y-[24px] md:gap-y-[1.875vw]'>\r\n                <HomeHeading title={\"How is a winner selected?\"}/>\r\n                <HomePara classes={\" text-[#ADADAD]  \"} title={\"At the time of prize drawing, a snapshot is secured of all current OPT holders and prize-eligible wallets. Utilizing this data, a cumulative probability distribution is generated. In conjunction a random number is generated and this is matched to the closest value within the probability range. \"}/>\r\n                <HomePara classes={\" text-[#ADADAD]  \"} title={\"The following table illustrates our mechanism with an example of five wallets participating with ascending OPT balances of 10, 20, 30, 40, and 50:\"}/>\r\n                \r\n\r\n                <button className='text-[#EDDB0F] text-[18px] md:text-[1.40625vw] font-[700]'>Learn More</button>\r\n    </div>\r\n    <div className='mt-[60.78px] md:mt-[0px] md:left-[50.9375vw] relative'>\r\n        <div className=\"tableEllpse\"></div>\r\n    <ul className='w-[335.53px] mx-[auto] \r\n    md:mx-[unset] pb-[96.16px] md:pb-[0px]\r\n    md:w-[42.8125vw] relative z-[2]'>\r\n    <li className='border-[#00F2F8]w-[326.29px] md:w-[unset] justify-between justify-[unset] pl-[0.625vw] items-center gap-x-[21.43px] md:gap-x-[2.734375vw] border-t border-b py-[14px] md:py-[1.7578125vw] flex text-[#00F2F8] colus text-[9.56px] leading-[11.47px] md:text-[1.219515625vw] md:leading-[1.484375vw]'>\r\n        <span className='w-[unset] md:w-[3.28125vw]'>User</span> \r\n        <span className='w-[unset] md:w-[9.346875vw]'>holding (opt)</span>\r\n        <span  className='w-[unset] md:w-[8.075vw]'>probability</span>\r\n        <span className='w-[unset] md:w-[12.890625vw]'>cumulative prob-y</span>\r\n    </li>\r\n    <li className='border-[#718787] py-[12px] pl-[0.625vw] gap-x-[48.05px] md:gap-x-[2.734375vw] items-center  border-b md:py-[1.7578125vw] flex text-[#fff]  md:text-[1.40625vw] text-[19px] leading-[25.65px] md:leading-[1.875vw]'>\r\n        <span className='w-[25.43px] h-[25.43px] md:w-[3.28125vw] flex justify-center items-center text-[9.53px] leading-[12.87px] md:text-[1.216640625vw] md:leading-[1.640625vw] text-[#00F2F8] rounded-full border-[0.865169px] border-[#718787] md:h-[3.28125vw]'>1</span> \r\n        <span className='w-[25px] md:w-[9.346875vw] text-center'>10</span>\r\n        <span  className='w-[49px] md:w-[8.075vw] text-center'>6.7%</span>\r\n        <span className='w-[55px] md:w-[12.890625vw] text-center'>0%</span>\r\n    </li>\r\n    <li className='border-[#718787] py-[12px] pl-[0.625vw] gap-x-[48.05px] md:gap-x-[2.734375vw] items-center  border-b md:py-[1.7578125vw] flex text-[#fff]  md:text-[1.40625vw] text-[19px] leading-[25.65px] md:leading-[1.875vw]'>\r\n        <span className='w-[25.43px] h-[25.43px] md:w-[3.28125vw] flex justify-center items-center text-[9.53px] leading-[12.87px] md:text-[1.216640625vw] md:leading-[1.640625vw] text-[#00F2F8] rounded-full border-[0.865169px] border-[#718787] md:h-[3.28125vw]'>2</span> \r\n        <span className='w-[25px] md:w-[9.346875vw] text-center'>20</span>\r\n        <span  className='w-[49px] md:w-[8.075vw] text-center'>13.3%</span>\r\n        <span className='w-[55px] md:w-[12.890625vw] text-center'>6.7%</span>\r\n    </li>\r\n    <li className='border-[#718787] py-[12px] pl-[0.625vw] gap-x-[48.05px] md:gap-x-[2.734375vw] items-center  border-b md:py-[1.7578125vw] flex text-[#fff]  md:text-[1.40625vw] text-[19px] leading-[25.65px] md:leading-[1.875vw]'>\r\n        <span className='w-[25.43px] h-[25.43px] md:w-[3.28125vw] flex justify-center items-center text-[9.53px] leading-[12.87px] md:text-[1.216640625vw] md:leading-[1.640625vw] text-[#00F2F8] rounded-full border-[0.865169px] border-[#718787] md:h-[3.28125vw]'>3</span> \r\n        <span className='w-[25px] md:w-[9.346875vw] text-center'>30</span>\r\n        <span  className='w-[49px] md:w-[8.075vw] text-center'>20%</span>\r\n        <span className='w-[55px] md:w-[12.890625vw] text-center'>20%</span>\r\n    </li>\r\n    <li className='border-[#718787] py-[12px] pl-[0.625vw] gap-x-[48.05px] md:gap-x-[2.734375vw] items-center  border-b md:py-[1.7578125vw] flex text-[#fff]  md:text-[1.40625vw] text-[19px] leading-[25.65px] md:leading-[1.875vw]'>\r\n        <span className='w-[25.43px] h-[25.43px] md:w-[3.28125vw] flex justify-center items-center text-[9.53px] leading-[12.87px] md:text-[1.216640625vw] md:leading-[1.640625vw] text-[#00F2F8] rounded-full border-[0.865169px] border-[#718787] md:h-[3.28125vw]'>4</span> \r\n        <span className='w-[25px] md:w-[9.346875vw] text-center'>40</span>\r\n        <span  className='w-[49px] md:w-[8.075vw] text-center'>26.7%</span>\r\n        <span className='w-[55px] md:w-[12.890625vw] text-center'>40%</span>\r\n    </li>\r\n    <li className='  py-[12px] pl-[0.625vw] gap-x-[48.05px] md:gap-x-[2.734375vw] items-center    md:py-[1.7578125vw] flex text-[#fff]  md:text-[1.40625vw] text-[19px] leading-[25.65px] md:leading-[1.875vw]'>\r\n        <span className='w-[25.43px] h-[25.43px] md:w-[3.28125vw] flex justify-center items-center text-[9.53px] leading-[12.87px] md:text-[1.216640625vw] md:leading-[1.640625vw] text-[#00F2F8] rounded-full border-[0.865169px] border-[#718787] md:h-[3.28125vw]'>5</span> \r\n        <span className='w-[25px] md:w-[9.346875vw] text-center'>50</span>\r\n        <span  className='w-[49px] md:w-[8.075vw] text-center'>33.3%</span>\r\n        <span className='w-[55px] md:w-[12.890625vw] text-center'>66.7%</span>\r\n    </li>\r\n    <li className='tableBtn flex justify-between items-center px-[3.3984375vw]'>\r\n    <span className=\"tableBtnOverlay\"></span>\r\n    <div className='tableBtnGradients'>\r\n    <div className=\"tableBtnGradient1\"></div>\r\n    <div className=\"tableBtnGradient2\"></div>\r\n    \r\n    </div>\r\n    <div className='flex gap-x-[8.57px] md:gap-x-[1.09375vw] items-center relative z-[5]'>\r\n        <span className='colus text-white text-[9.56px] leading-[11.47px] md:text-[1.219515625vw] md:leading-[1.484375vw]'>Random Number</span>\r\n        <span className='text-[#EDDB0F] font-[700] md:text-[1.40625vw] text-[11.02px] leading-[14.88px] md:leading-[1.875vw]'>0.6147556</span>\r\n    </div>\r\n    <div className='flex gap-x-[8.57px] md:gap-x-[1.09375vw] items-center relative z-[5]'>\r\n        <span className='colus text-white text-[9.56px] leading-[11.47px] md:text-[1.219515625vw] md:leading-[1.484375vw]'>Winner</span>\r\n        <span className='text-[#EDDB0F] font-[700] md:text-[1.40625vw] text-[11.02px] leading-[14.88px] md:leading-[1.875vw]'>User 4</span>\r\n    </div>\r\n    </li>\r\n    </ul>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Table","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Score.jsx",["425"],"import React from 'react'\r\nimport HomeHeading from '../utils/HomeHeading'\r\nimport HomeLink from '../utils/HomeLink'\r\nimport HomePara from '../utils/HomePara'\r\nimport historicalGovernanceFrame from '../../assets/images/home/historicalGovernanceFrame.svg'\r\nimport mobhistoricalGovernanceFrame from '../../assets/images/home/mobhistoricalGovernanceFrame.svg'\r\nimport coinLeft from '../../assets/images/home/coinLeft.png'\r\nimport mobleftcoin from '../../assets/images/home/mobleftcoin.svg'\r\nimport mobrightcoin from '../../assets/images/home/mobrightcoin.svg'\r\nimport ring from '../../assets/images/home/ring.png'\r\nimport coinRight from '../../assets/images/home/coinRight.png'\r\n\r\nconst Score = () => {\r\n  return (\r\n    <div className='relative pb-[190px] md:pb-[0px] top-[-10vw]'>\r\n    <div className=' w-[79.93%] mx-[auto] md:w-[35vw] top-[29.6875vw] pt-[40px] md:pt-[unset]  md:right-[10.390625vw] md:absolute gap-y-[16px] text-center flex flex-col items-center md:gap-y-[1.25vw]'>\r\n        <HomeHeading title={\"What is the prize amount?\"} />\r\n        <HomePara classes={\" text-[#ADADAD]  \"} title={\"The prize pool will be determined at the beginning of every week of a Governance quarter (13 weeks total). This will be determined by evaluating the current Governance period APR, which will be obtained from data posted on the Algorand Foundation Governance website.\"}/>\r\n        <button className='text-[#EDDB0F] text-[18px] md:text-[1.40625vw] font-[700]'>Learn More</button>\r\n    </div>\r\n    <div className='mt-[68.7px] md:mt-[unset]'>\r\n        <img src={historicalGovernanceFrame} alt=\"historicalGovernanceFrame\" className='w-[59.84375vw] md:block hidden' />\r\n        <div className='md:absolute md:w-[24.296875vw] left-[15.859375vw] top-[25.859375vw]  '>\r\n            <span className=\"yellowEllipse2 hidden md:block\">  </span>\r\n            <span className=\"yellowEllipse hidden md:block\">  </span>\r\n            <img src={ring} alt=\"Ring\" className='absolute min-w-[41.796875vw] mix-blend-lighten object-contain w-[41.796875vw] bottom-[-18.359375vw] left-[-10.15625vw] md:block hidden' />\r\n            <img src={coinLeft} alt=\"Coin Left \" className='absolute top-[-4.6875vw] left-[-11.015625vw] w-[17.3578125vw] object-contain h-[19.4703125vw] md:block hidden' />\r\n            <img src={coinRight} alt=\"Coin Right\" className='absolute right-[-10.9375vw] bottom-[-17.890625vw] w-[24.296875vw] object-contain h-[27.421875vw] md:block hidden' />\r\n                <h5 className='colus w-[311.7px] mx-[auto]  md:w-[unset] text-[24.63px] leading-[29.56px] text-center  md:text-[1.9241953125vw] md:leading-[2.34375vw] text-[#EDDB0F]'>Historical Governance querterly yields</h5>\r\n                <ul className='colus gap-y-[19.14px] mt-[42.5px]  md:mt-[3.515625vw] flex flex-col md:gap-y-[1.796875vw]\r\n                relative\r\n                '>\r\n                           \r\n                           <span className=\"yellowEllipse2 md:hidden block\">  </span>\r\n            <span className=\"yellowEllipse md:hidden block\">  </span>\r\n\r\n                <img src={mobhistoricalGovernanceFrame} alt=\"mobhistoricalGovernanceFrame\" className='w-[314.32px]\r\n                absolute bottom-[-45.24px] left-[50%]  transform translate-x-[-50%] block md:hidden\r\n                h-[468.28px] object-cover' />\r\n                 <img src={ring} alt=\"mobRing\" className='absolute  mix-blend-lighten object-contain h-[335.5px] w-[100%]\r\n                 bottom-[-232.72px]\r\n                  ' />\r\n\r\n\r\n<img src={mobleftcoin} alt=\"Coin Leftmob \" className='absolute top-[-178px] left-[-72.66px] \r\nw-[249.18px] h-[220.22px] object-contain  block md:hidden' />\r\n            <img src={mobrightcoin} alt=\"Coin Rightmob\" className='absolute right-[-23.18px] bottom-[-200px] w-[230.99px] h-[300px] object-contain  block md:hidden' />\r\n\r\n                   <li className='flex items-center gap-x-[79.51px] md:gap-x-[6.25vw] justify-center'><span className='md:leading-[2.109375vw] text-[#FF005C] text-[22.43px] leading-[26.92px] md:text-[1.752328125vw]'>Q1</span> <span className='text-[41.25px] leading-[49.5px] md:text-[3.22265625vw] text-[#fff] md:leading-[3.90625vw]'>3.51%</span></li> \r\n                   <li className='flex items-center gap-x-[79.51px] md:gap-x-[6.25vw] justify-center'><span className='md:leading-[2.109375vw] text-[#FF005C] text-[22.43px] leading-[26.92px] md:text-[1.752328125vw]'>Q2</span> <span className='text-[41.25px] leading-[49.5px] md:text-[3.22265625vw] text-[#fff] md:leading-[3.90625vw]'>2.51%</span></li> \r\n                   <li className='flex items-center gap-x-[79.51px] md:gap-x-[6.25vw] justify-center'><span className='md:leading-[2.109375vw] text-[#FF005C] text-[22.43px] leading-[26.92px] md:text-[1.752328125vw]'>Q3</span> <span className='text-[41.25px] leading-[49.5px] md:text-[3.22265625vw] text-[#fff] md:leading-[3.90625vw]'>1.91%</span></li> \r\n                   <li className='flex items-center gap-x-[79.51px] md:gap-x-[6.25vw] justify-center'><span className='md:leading-[2.109375vw] text-[#FF005C] text-[22.43px] leading-[26.92px] md:text-[1.752328125vw]'>Q4</span> <span className='text-[41.25px] leading-[49.5px] md:text-[3.22265625vw] text-[#fff] md:leading-[3.90625vw]'>1.93%</span></li> \r\n                </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Score","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\SmallHeading.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\home\\Hero.jsx",["426","427","428"],"import React from 'react'\r\nimport bg from '../../assets/images/home/bg.jpg'\r\nimport mobbg from '../../assets/images/home/mobbg.svg'\r\nimport backgroundVideo from '../../assets/videos/homeVideo.mp4'\r\nimport frame from '../../assets/images/home/frame.svg'\r\nimport mobframe from '../../assets/images/home/mobframe.svg'\r\nimport BtnGroups from '../utils/BtnGroups'\r\nimport HomePara from '../utils/HomePara'\r\n\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <section className='bg-[#11031A] relative min-h-[110vh] overflow-hidden md:pb-[10.3125vw]'>\r\n        <img src={bg} alt=\"Background Image\" className='w-full object-cover top-[93.25px] md:top-0 fixed md:left-0 hidden md:block' />\r\n        <img src={mobbg} alt=\"Background Image\" className='w-full object-cover top-[93.25px] h-[706.52px] relative md:left-0 md:hidden block' />\r\n       \r\n        <video src={backgroundVideo} autoPlay loop muted className='w-full h-[429.5px] object-cover left-[50%] md:w-[70.546875vw] top-[247.56px] md:h-[unset] md:left-[-1vw] md:top-[20vw] absolute \r\n        md:fixed mix-blend-lighten transform translate-x-[-50%] skew-x-[22deg] skew-y-[2deg] md:translate-x-[unset] md:skew-y-[10deg] md:skew-x-[10deg]'/>\r\n\r\n        <div className='w-[18.671875vw] h-[33.984375vw] absolute right-[-13.046875vw] top-[22.5vw] border border-red-400  homeAboutGradient hidden md:block'>\r\n            <span className='homeAboutGradient1'></span>\r\n            <span className='homeAboutGradient2'></span>\r\n        </div>\r\n        <div className='h-[736px] md:w-[31.25vw] md:h-[57.5vw] md:top-[10.3125vw] relative md:left-[62.8125vw] flex flex-col items-center'>\r\n        <img src={frame} alt=\"Frame\" className='absolute top-0 left-0 w-full h-full object-contain hidden md:block' />\r\n        <img src={mobframe} alt=\"Frame\" className='absolute top-0   w-[380.61px] h-[unset] object-cover md:hidden block' />\r\n          \r\n    <h2 className={`text-[#EDDB0F] text-[20.9px] leading-[25.08px]  \r\n    tracking-[21px] mb-[28px] mt-[72.4px]\r\n    colus md:text-[1.6328125vw] md:leading-[1.959375vw]  md:tracking-[1.640625vw] md:mb-[2.1875vw] md:mt-[5.9375vw]`}>About</h2>\r\n           \r\n            <div className='w-[305px] md:w-[23.828125vw] md:mb-[1.875vw] flex text-center flex-col gap-y-[12px] mb-[32.2px] md:gap-y-[0.9375vw] text-[#8C7998]'>\r\n               <HomePara classes={\"text-[#8C7998]\"} title={\"We are reintroducing the Algorand blockchain to prize-linked staking, which combines low-yield staking with a weekly prize game! Prizes are generated on the interest earned on deposited funds through participation in the Algorand Foundation Governance program. By leveraging this low-risk mechanism, we are able to guarantee a prize pool and an exciting weekly community event!\"}/>\r\n               <HomePara classes={\"text-[#8C7998]\"} title={\" \"}/> \r\n           \r\n            </div>\r\n  \r\n        </div>\r\n\r\n     </section>\r\n  )\r\n}\r\n\r\nexport default Hero","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\Faqs.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\heroes\\ServicesHero.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\algob.config.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\PopUpCloser.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\redux\\wallet\\types.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\utils\\withdraw.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Faq.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\HomeLink.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Question.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\utils\\Answer.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Footer.jsx",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\components\\layout\\Header.jsx",["429","430","431","432","433"],"\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from '../../assets/images/Logo.svg'\r\nimport { truncateString } from '../../constants/functions';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { ImageSrc, Routes } from '../../constants/constants';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button } from '@mui/material';\r\n\r\nconst Header = (props) => {\r\n    const handleWalletModal = () => props.setShowWalletModal(true);\r\n    const handleCurrentModal = () => props.setShowCurrentModal(true);\r\n  \r\n  return (\r\n    <header className='absolute top-[2.734375vw] w-full z-[15]'>\r\n    <div className=' w-[94vw] mx-auto relative z-[5] flex justify-between items-center'>\r\n    <Link to={\"/\"}>\r\n        <img src={logo} alt=\"Logo\" className='w-[224px] md:w-[18.046875vw]' />\r\n    </Link>\r\n    <ul className='hidden md:flex font-[700] absolute left-[50%] top-[50%] transform translate-y-[-50%] translate-x-[-50%]  text-white text-[1.40625vw] flex gap-x-[3.984375vw] items-center'>\r\n        <li>\r\n            <Link to={\"/About\"}>\r\n                About\r\n            </Link>\r\n        </li>\r\n        {props.is_admin_logged && \r\n            <li>\r\n                <Link to={\"/admin\"}>\r\n                    Admin\r\n                </Link>\r\n            </li>\r\n        }\r\n        <li>\r\n            <Link   to='#'\r\n            onClick={(e) => {\r\n                window.location.href = \"mailto:admin@optimumstaking.finance\";\r\n                e.preventDefault();\r\n            }}\r\n        > \r\n                Contact Us\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n    {/* <Link onClick={openLoginModal}  className='hidden md:flex w-[15vw] h-[3.75vw] font-[700] text-[#11031A] clipPathButton flex justify-center bg-[#EDDB0F] text-[1.3876328125vw] items-center'>  */}\r\n    <Link onClick={\r\n                        props.address ? handleCurrentModal : handleWalletModal\r\n                    } className='hidden md:flex w-[15vw] h-[3.75vw] font-[700] text-[#11031A] clipPathButton flex justify-center bg-[#EDDB0F] text-[1.3876328125vw] items-center'> \r\n    {props.selected\r\n        ? truncateString(props.address, 10)\r\n        : 'Connect Wallet'}\r\n    </Link>\r\n        <button className='md:hidden w-[64px] h-[50px] bg-[#EDDB0F] flex flex-col justify-center items-center gap-y-[4.3px] clipPathButtonMob'>\r\n            <div className='h-[3px] w-[27.75px] bg-[#14041B] ml-[5.06px] block'></div>\r\n            <div className='h-[3px] w-[27.75px] bg-[#14041B] ml-[2.53px] block'></div>\r\n            <div className='h-[3px] w-[27.75px] bg-[#14041B] block'></div>\r\n        </button>\r\n    </div> \r\n</header>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selected: state.wallet.selected,\r\n        address: state.wallet.address\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\deposit.js",["434"],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\vrf_randomizer.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\send_vrf.js",[],"C:\\Users\\user\\Desktop\\Optimum-Staking-main\\Optimum-Staking-main\\frontend\\src\\api\\reveal_vrf.js",[],{"ruleId":"435","replacedBy":"436"},{"ruleId":"437","replacedBy":"438"},{"ruleId":"439","severity":1,"message":"440","line":84,"column":25,"nodeType":"441","messageId":"442","endLine":84,"endColumn":93},{"ruleId":"443","severity":1,"message":"444","line":64,"column":12,"nodeType":"445","messageId":"446","endLine":64,"endColumn":22},{"ruleId":"443","severity":1,"message":"447","line":64,"column":24,"nodeType":"445","messageId":"446","endLine":64,"endColumn":38},{"ruleId":"443","severity":1,"message":"448","line":78,"column":12,"nodeType":"445","messageId":"446","endLine":78,"endColumn":19},{"ruleId":"449","severity":1,"message":"450","line":84,"column":15,"nodeType":"451","endLine":90,"endColumn":6},{"ruleId":"449","severity":1,"message":"452","line":90,"column":8,"nodeType":"453","endLine":90,"endColumn":10,"suggestions":"454"},{"ruleId":"443","severity":1,"message":"455","line":152,"column":13,"nodeType":"445","messageId":"446","endLine":152,"endColumn":21},{"ruleId":"449","severity":1,"message":"456","line":56,"column":8,"nodeType":"453","endLine":56,"endColumn":10,"suggestions":"457"},{"ruleId":"443","severity":1,"message":"458","line":77,"column":19,"nodeType":"445","messageId":"446","endLine":77,"endColumn":23},{"ruleId":"443","severity":1,"message":"459","line":3,"column":17,"nodeType":"445","messageId":"446","endLine":3,"endColumn":26},{"ruleId":"443","severity":1,"message":"460","line":2,"column":10,"nodeType":"445","messageId":"446","endLine":2,"endColumn":16},{"ruleId":"443","severity":1,"message":"461","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":21},{"ruleId":"443","severity":1,"message":"462","line":4,"column":8,"nodeType":"445","messageId":"446","endLine":4,"endColumn":12},{"ruleId":"443","severity":1,"message":"463","line":8,"column":5,"nodeType":"445","messageId":"446","endLine":8,"endColumn":13},{"ruleId":"443","severity":1,"message":"464","line":9,"column":5,"nodeType":"445","messageId":"446","endLine":9,"endColumn":11},{"ruleId":"443","severity":1,"message":"465","line":23,"column":10,"nodeType":"445","messageId":"446","endLine":23,"endColumn":31},{"ruleId":"443","severity":1,"message":"466","line":43,"column":12,"nodeType":"445","messageId":"446","endLine":43,"endColumn":25},{"ruleId":"443","severity":1,"message":"467","line":44,"column":11,"nodeType":"445","messageId":"446","endLine":44,"endColumn":19},{"ruleId":"443","severity":1,"message":"468","line":47,"column":12,"nodeType":"445","messageId":"446","endLine":47,"endColumn":22},{"ruleId":"443","severity":1,"message":"469","line":48,"column":12,"nodeType":"445","messageId":"446","endLine":48,"endColumn":31},{"ruleId":"443","severity":1,"message":"470","line":49,"column":12,"nodeType":"445","messageId":"446","endLine":49,"endColumn":25},{"ruleId":"443","severity":1,"message":"471","line":50,"column":12,"nodeType":"445","messageId":"446","endLine":50,"endColumn":21},{"ruleId":"449","severity":1,"message":"472","line":55,"column":8,"nodeType":"453","endLine":55,"endColumn":70,"suggestions":"473"},{"ruleId":"449","severity":1,"message":"474","line":62,"column":8,"nodeType":"453","endLine":62,"endColumn":47,"suggestions":"475"},{"ruleId":"443","severity":1,"message":"476","line":112,"column":11,"nodeType":"445","messageId":"446","endLine":112,"endColumn":27},{"ruleId":"443","severity":1,"message":"477","line":135,"column":11,"nodeType":"445","messageId":"446","endLine":135,"endColumn":17},{"ruleId":"443","severity":1,"message":"460","line":13,"column":10,"nodeType":"445","messageId":"446","endLine":13,"endColumn":16},{"ruleId":"443","severity":1,"message":"461","line":14,"column":8,"nodeType":"445","messageId":"446","endLine":14,"endColumn":21},{"ruleId":"443","severity":1,"message":"462","line":15,"column":8,"nodeType":"445","messageId":"446","endLine":15,"endColumn":12},{"ruleId":"443","severity":1,"message":"463","line":19,"column":5,"nodeType":"445","messageId":"446","endLine":19,"endColumn":13},{"ruleId":"443","severity":1,"message":"464","line":20,"column":5,"nodeType":"445","messageId":"446","endLine":20,"endColumn":11},{"ruleId":"443","severity":1,"message":"465","line":33,"column":10,"nodeType":"445","messageId":"446","endLine":33,"endColumn":31},{"ruleId":"443","severity":1,"message":"478","line":36,"column":10,"nodeType":"445","messageId":"446","endLine":36,"endColumn":23},{"ruleId":"443","severity":1,"message":"479","line":37,"column":10,"nodeType":"445","messageId":"446","endLine":37,"endColumn":18},{"ruleId":"443","severity":1,"message":"466","line":38,"column":10,"nodeType":"445","messageId":"446","endLine":38,"endColumn":23},{"ruleId":"443","severity":1,"message":"467","line":39,"column":9,"nodeType":"445","messageId":"446","endLine":39,"endColumn":17},{"ruleId":"443","severity":1,"message":"468","line":42,"column":10,"nodeType":"445","messageId":"446","endLine":42,"endColumn":20},{"ruleId":"443","severity":1,"message":"469","line":43,"column":10,"nodeType":"445","messageId":"446","endLine":43,"endColumn":29},{"ruleId":"443","severity":1,"message":"470","line":44,"column":10,"nodeType":"445","messageId":"446","endLine":44,"endColumn":23},{"ruleId":"443","severity":1,"message":"471","line":45,"column":10,"nodeType":"445","messageId":"446","endLine":45,"endColumn":19},{"ruleId":"449","severity":1,"message":"472","line":50,"column":6,"nodeType":"453","endLine":50,"endColumn":68,"suggestions":"480"},{"ruleId":"449","severity":1,"message":"474","line":57,"column":6,"nodeType":"453","endLine":57,"endColumn":45,"suggestions":"481"},{"ruleId":"443","severity":1,"message":"476","line":107,"column":9,"nodeType":"445","messageId":"446","endLine":107,"endColumn":25},{"ruleId":"443","severity":1,"message":"477","line":130,"column":9,"nodeType":"445","messageId":"446","endLine":130,"endColumn":15},{"ruleId":"482","severity":1,"message":"483","line":161,"column":9,"nodeType":"441","endLine":161,"endColumn":125},{"ruleId":"482","severity":1,"message":"483","line":162,"column":9,"nodeType":"441","endLine":162,"endColumn":126},{"ruleId":"443","severity":1,"message":"460","line":7,"column":5,"nodeType":"445","messageId":"446","endLine":7,"endColumn":11},{"ruleId":"443","severity":1,"message":"484","line":9,"column":5,"nodeType":"445","messageId":"446","endLine":9,"endColumn":11},{"ruleId":"443","severity":1,"message":"485","line":10,"column":5,"nodeType":"445","messageId":"446","endLine":10,"endColumn":16},{"ruleId":"443","severity":1,"message":"486","line":12,"column":5,"nodeType":"445","messageId":"446","endLine":12,"endColumn":13},{"ruleId":"443","severity":1,"message":"487","line":13,"column":5,"nodeType":"445","messageId":"446","endLine":13,"endColumn":19},{"ruleId":"443","severity":1,"message":"488","line":14,"column":5,"nodeType":"445","messageId":"446","endLine":14,"endColumn":17},{"ruleId":"443","severity":1,"message":"489","line":34,"column":21,"nodeType":"445","messageId":"446","endLine":34,"endColumn":33},{"ruleId":"490","severity":1,"message":"491","line":165,"column":25,"nodeType":"492","messageId":"493","endLine":165,"endColumn":27},{"ruleId":"443","severity":1,"message":"494","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":19},{"ruleId":"443","severity":1,"message":"460","line":9,"column":10,"nodeType":"445","messageId":"446","endLine":9,"endColumn":16},{"ruleId":"443","severity":1,"message":"463","line":15,"column":5,"nodeType":"445","messageId":"446","endLine":15,"endColumn":13},{"ruleId":"443","severity":1,"message":"464","line":16,"column":5,"nodeType":"445","messageId":"446","endLine":16,"endColumn":11},{"ruleId":"443","severity":1,"message":"466","line":32,"column":12,"nodeType":"445","messageId":"446","endLine":32,"endColumn":25},{"ruleId":"443","severity":1,"message":"467","line":33,"column":11,"nodeType":"445","messageId":"446","endLine":33,"endColumn":19},{"ruleId":"443","severity":1,"message":"495","line":34,"column":12,"nodeType":"445","messageId":"446","endLine":34,"endColumn":26},{"ruleId":"443","severity":1,"message":"468","line":36,"column":12,"nodeType":"445","messageId":"446","endLine":36,"endColumn":22},{"ruleId":"443","severity":1,"message":"470","line":38,"column":12,"nodeType":"445","messageId":"446","endLine":38,"endColumn":25},{"ruleId":"443","severity":1,"message":"471","line":39,"column":12,"nodeType":"445","messageId":"446","endLine":39,"endColumn":21},{"ruleId":"443","severity":1,"message":"496","line":41,"column":12,"nodeType":"445","messageId":"446","endLine":41,"endColumn":21},{"ruleId":"449","severity":1,"message":"497","line":52,"column":8,"nodeType":"453","endLine":52,"endColumn":70,"suggestions":"498"},{"ruleId":"449","severity":1,"message":"499","line":89,"column":8,"nodeType":"453","endLine":89,"endColumn":10,"suggestions":"500"},{"ruleId":"449","severity":1,"message":"501","line":97,"column":8,"nodeType":"453","endLine":97,"endColumn":47,"suggestions":"502"},{"ruleId":"443","severity":1,"message":"476","line":169,"column":11,"nodeType":"445","messageId":"446","endLine":169,"endColumn":27},{"ruleId":"482","severity":1,"message":"483","line":252,"column":1,"nodeType":"441","endLine":252,"endColumn":140},{"ruleId":"443","severity":1,"message":"460","line":6,"column":3,"nodeType":"445","messageId":"446","endLine":6,"endColumn":9},{"ruleId":"443","severity":1,"message":"486","line":7,"column":3,"nodeType":"445","messageId":"446","endLine":7,"endColumn":11},{"ruleId":"443","severity":1,"message":"503","line":8,"column":3,"nodeType":"445","messageId":"446","endLine":8,"endColumn":7},{"ruleId":"443","severity":1,"message":"504","line":10,"column":3,"nodeType":"445","messageId":"446","endLine":10,"endColumn":8},{"ruleId":"443","severity":1,"message":"505","line":11,"column":3,"nodeType":"445","messageId":"446","endLine":11,"endColumn":11},{"ruleId":"443","severity":1,"message":"506","line":21,"column":10,"nodeType":"445","messageId":"446","endLine":21,"endColumn":15},{"ruleId":"443","severity":1,"message":"507","line":28,"column":9,"nodeType":"445","messageId":"446","endLine":28,"endColumn":18},{"ruleId":"449","severity":1,"message":"450","line":39,"column":15,"nodeType":"451","endLine":41,"endColumn":6},{"ruleId":"449","severity":1,"message":"508","line":41,"column":8,"nodeType":"453","endLine":41,"endColumn":10,"suggestions":"509"},{"ruleId":"449","severity":1,"message":"510","line":94,"column":8,"nodeType":"453","endLine":94,"endColumn":42,"suggestions":"511"},{"ruleId":"449","severity":1,"message":"512","line":60,"column":8,"nodeType":"453","endLine":60,"endColumn":26,"suggestions":"513"},{"ruleId":"443","severity":1,"message":"514","line":2,"column":22,"nodeType":"445","messageId":"446","endLine":2,"endColumn":36},{"ruleId":"443","severity":1,"message":"515","line":3,"column":23,"nodeType":"445","messageId":"446","endLine":3,"endColumn":36},{"ruleId":"443","severity":1,"message":"516","line":7,"column":5,"nodeType":"445","messageId":"446","endLine":7,"endColumn":22},{"ruleId":"443","severity":1,"message":"517","line":12,"column":9,"nodeType":"445","messageId":"446","endLine":12,"endColumn":30},{"ruleId":"443","severity":1,"message":"518","line":1,"column":10,"nodeType":"445","messageId":"446","endLine":1,"endColumn":20},{"ruleId":"443","severity":1,"message":"519","line":1,"column":22,"nodeType":"445","messageId":"446","endLine":1,"endColumn":24},{"ruleId":"443","severity":1,"message":"520","line":64,"column":19,"nodeType":"445","messageId":"446","endLine":64,"endColumn":30},{"ruleId":"443","severity":1,"message":"520","line":75,"column":19,"nodeType":"445","messageId":"446","endLine":75,"endColumn":30},{"ruleId":"449","severity":1,"message":"521","line":71,"column":8,"nodeType":"453","endLine":71,"endColumn":29,"suggestions":"522"},{"ruleId":"449","severity":1,"message":"523","line":102,"column":8,"nodeType":"453","endLine":102,"endColumn":24,"suggestions":"524"},{"ruleId":"525","severity":1,"message":"526","line":8,"column":51,"nodeType":"492","messageId":"527","endLine":8,"endColumn":52},{"ruleId":"525","severity":1,"message":"526","line":8,"column":57,"nodeType":"492","messageId":"527","endLine":8,"endColumn":58},{"ruleId":"443","severity":1,"message":"459","line":1,"column":17,"nodeType":"445","messageId":"446","endLine":1,"endColumn":26},{"ruleId":"443","severity":1,"message":"528","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":19},{"ruleId":"443","severity":1,"message":"460","line":6,"column":10,"nodeType":"445","messageId":"446","endLine":6,"endColumn":16},{"ruleId":"443","severity":1,"message":"484","line":6,"column":18,"nodeType":"445","messageId":"446","endLine":6,"endColumn":24},{"ruleId":"443","severity":1,"message":"485","line":6,"column":26,"nodeType":"445","messageId":"446","endLine":6,"endColumn":37},{"ruleId":"443","severity":1,"message":"529","line":9,"column":10,"nodeType":"445","messageId":"446","endLine":9,"endColumn":17},{"ruleId":"443","severity":1,"message":"530","line":15,"column":8,"nodeType":"445","messageId":"446","endLine":15,"endColumn":14},{"ruleId":"443","severity":1,"message":"531","line":30,"column":12,"nodeType":"445","messageId":"446","endLine":30,"endColumn":28},{"ruleId":"449","severity":1,"message":"521","line":73,"column":8,"nodeType":"453","endLine":73,"endColumn":29,"suggestions":"532"},{"ruleId":"449","severity":1,"message":"523","line":103,"column":8,"nodeType":"453","endLine":103,"endColumn":24,"suggestions":"533"},{"ruleId":"443","severity":1,"message":"534","line":215,"column":10,"nodeType":"445","messageId":"446","endLine":215,"endColumn":16},{"ruleId":"443","severity":1,"message":"535","line":220,"column":9,"nodeType":"445","messageId":"446","endLine":220,"endColumn":21},{"ruleId":"443","severity":1,"message":"536","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":21},{"ruleId":"443","severity":1,"message":"537","line":6,"column":9,"nodeType":"445","messageId":"446","endLine":6,"endColumn":23},{"ruleId":"443","severity":1,"message":"538","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":16},{"ruleId":"443","severity":1,"message":"538","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":16},{"ruleId":"443","severity":1,"message":"538","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":16},{"ruleId":"443","severity":1,"message":"538","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":16},{"ruleId":"443","severity":1,"message":"538","line":3,"column":8,"nodeType":"445","messageId":"446","endLine":3,"endColumn":16},{"ruleId":"443","severity":1,"message":"539","line":7,"column":8,"nodeType":"445","messageId":"446","endLine":7,"endColumn":17},{"ruleId":"482","severity":1,"message":"483","line":14,"column":9,"nodeType":"441","endLine":14,"endColumn":135},{"ruleId":"482","severity":1,"message":"483","line":15,"column":9,"nodeType":"441","endLine":15,"endColumn":145},{"ruleId":"443","severity":1,"message":"540","line":6,"column":10,"nodeType":"445","messageId":"446","endLine":6,"endColumn":21},{"ruleId":"443","severity":1,"message":"541","line":6,"column":23,"nodeType":"445","messageId":"446","endLine":6,"endColumn":34},{"ruleId":"443","severity":1,"message":"463","line":7,"column":10,"nodeType":"445","messageId":"446","endLine":7,"endColumn":18},{"ruleId":"443","severity":1,"message":"464","line":7,"column":20,"nodeType":"445","messageId":"446","endLine":7,"endColumn":26},{"ruleId":"443","severity":1,"message":"460","line":10,"column":10,"nodeType":"445","messageId":"446","endLine":10,"endColumn":16},{"ruleId":"443","severity":1,"message":"542","line":5,"column":5,"nodeType":"445","messageId":"446","endLine":5,"endColumn":13},"no-native-reassign",["543"],"no-negated-in-lhs",["544"],"react/jsx-pascal-case","Imported JSX component Home_Logged must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-unused-vars","'vrfRespose' is assigned a value but never used.","Identifier","unusedVar","'setVrfResponse' is assigned a value but never used.","'sendVrf' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getContractStatus', 'getGlobalState', 'getGovernanceNonce', and 'updateStats'. Either include them or remove the dependency array.","ArrayExpression",["545"],"'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRewardRate'. Either include it or remove the dependency array.",["546"],"'addr' is assigned a value but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'ConnectWallet' is defined but never used.","'Form' is defined but never used.","'ImageSrc' is defined but never used.","'Routes' is defined but never used.","'getApplicationAddress' is defined but never used.","'isAdminLogged' is assigned a value but never used.","'navigate' is assigned a value but never used.","'lotteryAmt' is assigned a value but never used.","'totalDistributedOPT' is assigned a value but never used.","'lotteryloader' is assigned a value but never used.","'optLoader' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkDepositValid'. Either include it or remove the dependency array.",["547"],"React Hook useEffect has missing dependencies: 'fetchTotalDistributedOPT' and 'getWeeklyLotteryAmt'. Either include them or remove the dependency array.",["548"],"'LotteryDataModal' is assigned a value but never used.","'Loader' is assigned a value but never used.","'showFormModal' is assigned a value but never used.","'formType' is assigned a value but never used.",["549"],["550"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'ListItem' is defined but never used.","'ListItemButton' is defined but never used.","'ListItemText' is defined but never used.","'setOpenModal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'depositFunc' is defined but never used.","'isDepositValid' is assigned a value but never used.","'optAmount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AccountOPT', 'checkDepositValid', and 'props.account_store.length'. Either include them or remove the dependency array.",["551"],"React Hook useEffect has a missing dependency: 'getOPTBalanceOfUser'. Either include it or remove the dependency array.",["552"],"React Hook useEffect has missing dependencies: 'getOPTBalanceOfUser' and 'getWeeklyLotteryAmt'. Either include them or remove the dependency array.",["553"],"'List' is defined but never used.","'Alert' is defined but never used.","'Snackbar' is defined but never used.","'toast' is assigned a value but never used.","'CssDrawer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getGovTimeslines'. Either include it or remove the dependency array.",["554"],"React Hook useEffect has a missing dependency: 'getWalletInfo'. Either include it or remove the dependency array.",["555"],"React Hook useEffect has a missing dependency: 'getLotteryData'. Either include it or remove the dependency array.",["556"],"'LocalStateKeys' is defined but never used.","'indexerClient' is defined but never used.","'readAppLocalState' is assigned a value but never used.","'getApplicationAddress' is assigned a value but never used.","'mkTxParams' is defined but never used.","'tx' is defined but never used.","'confirmedTx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.admin_addr' and 'props.selected_network'. Either include them or remove the dependency array.",["557"],"React Hook useEffect has missing dependencies: 'props' and 'userASAHolding'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["558"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Withdrawimg' is defined but never used.","'deposit' is defined but never used.","'Loader' is defined but never used.","'isBackdropActive' is assigned a value but never used.",["559"],["560"],"'states' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'CustomToolTip' is defined but never used.","'openLoginModal' is assigned a value but never used.","'HomeLink' is defined but never used.","'BtnGroups' is defined but never used.","'useLocation' is defined but never used.","'useNavigate' is defined but never used.","'OptAsaID' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"565","fix":"569"},{"desc":"567","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"583","fix":"587"},{"desc":"585","fix":"588"},"Update the dependencies array to be: [getContractStatus, getGlobalState, getGovernanceNonce, updateStats]",{"range":"589","text":"590"},"Update the dependencies array to be: [getRewardRate]",{"range":"591","text":"592"},"Update the dependencies array to be: [checkDepositValid, props.address, props.is_admin_logged, props.selected_network]",{"range":"593","text":"594"},"Update the dependencies array to be: [props.success, props.selected_network, fetchTotalDistributedOPT, getWeeklyLotteryAmt]",{"range":"595","text":"596"},{"range":"597","text":"594"},{"range":"598","text":"596"},"Update the dependencies array to be: [AccountOPT, checkDepositValid, props.account_store.length, props.address, props.is_admin_logged, props.selected_network]",{"range":"599","text":"600"},"Update the dependencies array to be: [getOPTBalanceOfUser]",{"range":"601","text":"602"},"Update the dependencies array to be: [props.success, props.selected_network, getOPTBalanceOfUser, getWeeklyLotteryAmt]",{"range":"603","text":"604"},"Update the dependencies array to be: [getGovTimeslines]",{"range":"605","text":"606"},"Update the dependencies array to be: [getWalletInfo, props.updateCustodialWalletsData]",{"range":"607","text":"608"},"Update the dependencies array to be: [getLotteryData, props.updateData]",{"range":"609","text":"610"},"Update the dependencies array to be: [algoAmt, isAlgoEdit, props.admin_addr, props.selected_network]",{"range":"611","text":"612"},"Update the dependencies array to be: [opt, isOPTEdit, userASAHolding, props]",{"range":"613","text":"614"},{"range":"615","text":"612"},{"range":"616","text":"614"},[3233,3235],"[getContractStatus, getGlobalState, getGovernanceNonce, updateStats]",[2148,2150],"[getRewardRate]",[2384,2446],"[checkDepositValid, props.address, props.is_admin_logged, props.selected_network]",[2609,2648],"[props.success, props.selected_network, fetchTotalDistributedOPT, getWeeklyLotteryAmt]",[2064,2126],[2277,2316],[2138,2200],"[AccountOPT, checkDepositValid, props.account_store.length, props.address, props.is_admin_logged, props.selected_network]",[3344,3346],"[getOPTBalanceOfUser]",[3515,3554],"[props.success, props.selected_network, getOPTBalanceOfUser, getWeeklyLotteryAmt]",[1375,1377],"[getGovTimeslines]",[3064,3098],"[getWalletInfo, props.updateCustodialWalletsData]",[1899,1917],"[getLotteryData, props.updateData]",[2840,2861],"[algoAmt, isAlgoEdit, props.admin_addr, props.selected_network]",[3940,3956],"[opt, isOPTEdit, userASAHolding, props]",[3098,3119],[4243,4259]]