{"ast":null,"code":"const sha256 = require('js-sha256');\nconst {\n  keccak256\n} = require('js-sha3');\nconst logic = require('../logic/logic');\nconst logicSig = require('../logicsig');\nconst templates = require('./templates');\nconst transaction = require('../transaction');\nclass HTLC {\n  /**\n   * HTLC allows a user to receive the Algo prior to a deadline (in terms of a round) by proving a knowledge\n   * of a special value or to forfeit the ability to claim, returning it to the payer.\n   * This contract is usually used to perform cross-chained atomic swaps\n   *\n   * More formally -\n   * Algos can be transferred under only two circumstances:\n   * 1. To receiver if hash_function(arg_0) = hash_value\n   * 2. To owner if txn.FirstValid > expiry_round\n   * ...\n   *\n   * @deprecated This feature will be removed in v2.\n   *\n   *Parameters\n   *----------\n   * @param {string} owner: an address that can receive the asset after the expiry round\n   * @param {string} receiver: address to receive Algos\n   * @param {string} hashFunction: the hash function to be used (must be either sha256 or keccak256)\n   * @param {string} hashImage: the hash image in base64\n   * @param {int} expiryRound: the round on which the assets can be transferred back to owner\n   * @param {int} maxFee: the maximum fee that can be paid to the network by the account\n   * @returns {HTLC}\n   */\n  constructor(owner, receiver, hashFunction, hashImage, expiryRound, maxFee) {\n    // don't need to validate owner, receiver - they'll be validated by template.insert\n    if (!Number.isSafeInteger(expiryRound) || expiryRound < 0) throw Error('expiryRound must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(maxFee) || maxFee < 0) throw Error('maxFee must be a positive number and smaller than 2^53-1');\n    let referenceProgramB64 = '';\n    if (hashFunction === 'sha256') {\n      referenceProgramB64 = 'ASAECAEACSYDIOaalh5vLV96yGYHkmVSvpgjXtMzY8qIkYu5yTipFbb5IH+DsWV/8fxTuS3BgUih1l38LUsfo9Z3KErd0gASbZBpIP68oLsUSlpOp7Q4pGgayA5soQW8tgf8VlMlyVaV9qITMQEiDjEQIxIQMQcyAxIQMQgkEhAxCSgSLQEpEhAxCSoSMQIlDRAREA==';\n    } else if (hashFunction === 'keccak256') {\n      referenceProgramB64 = 'ASAECAEACSYDIOaalh5vLV96yGYHkmVSvpgjXtMzY8qIkYu5yTipFbb5IH+DsWV/8fxTuS3BgUih1l38LUsfo9Z3KErd0gASbZBpIP68oLsUSlpOp7Q4pGgayA5soQW8tgf8VlMlyVaV9qITMQEiDjEQIxIQMQcyAxIQMQgkEhAxCSgSLQIpEhAxCSoSMQIlDRAREA==';\n    } else {\n      throw Error('hash function unrecognized');\n    }\n    // validate hashImage length\n    const hashImageBytes = Buffer.from(hashImage, 'base64');\n    if (hashImageBytes.length !== 32) throw Error('hash image must be 32 bytes');\n    const referenceProgramBytes = Buffer.from(referenceProgramB64, 'base64');\n    const referenceOffsets = [3 /* expiryRound */, 6 /* receiver */, 10 /* hashImage */, 42 /* owner */, 76];\n    const injectionVector = [maxFee, expiryRound, receiver, hashImage, owner];\n    const injectionTypes = [templates.valTypes.INT, templates.valTypes.INT, templates.valTypes.ADDRESS, templates.valTypes.BASE64, templates.valTypes.ADDRESS];\n    const injectedBytes = templates.inject(referenceProgramBytes, referenceOffsets, injectionVector, injectionTypes);\n    this.programBytes = injectedBytes;\n    const lsig = new logicSig.LogicSig(injectedBytes, undefined);\n    this.address = lsig.address();\n  }\n  /**\n   * returns the program bytes\n   * @returns {Uint8Array}\n   */\n  getProgram() {\n    return this.programBytes;\n  }\n  /**\n   * returns the string address of the contract\n   * @returns {string}\n   */\n  getAddress() {\n    return this.address;\n  }\n}\n/**\n *  signTransactionWithHTLCUnlock accepts a transaction, such as a payment, and builds the HTLC-unlocking signature around that transaction\n *\n * @deprecated This feature will be removed in v2.\n *\n * @param {Uint8Array} contract : byte representation of the HTLC\n * @param {Object} txn dictionary containing constructor arguments for a transaction\n * @param {string} preImageAsBase64 : preimage of the hash as base64 string\n *\n * @returns {Object} Object containing txID and blob representing signed transaction.\n * @throws error on validation failure\n */\nfunction signTransactionWithHTLCUnlock(contract, txn, preImageAsBase64) {\n  const preImageBytes = Buffer.from(preImageAsBase64, 'base64');\n  // hash validation\n  const readResult = logic.readProgram(contract, undefined);\n  const ints = readResult[0];\n  const byteArrays = readResult[1];\n  const expectedHashedOutput = byteArrays[1];\n  const hashFunction = contract[contract.length - 15];\n  if (hashFunction === 1) {\n    const hash = sha256.create();\n    hash.update(preImageBytes);\n    const actualHashedOutput = Buffer.from(hash.hex(), 'hex');\n    if (!actualHashedOutput.equals(expectedHashedOutput)) {\n      throw new Error('sha256 hash of preimage did not match stored contract hash');\n    }\n  } else if (hashFunction === 2) {\n    const hash = keccak256.create();\n    hash.update(preImageBytes);\n    const actualHashedOutput = Buffer.from(hash.hex(), 'hex');\n    if (!actualHashedOutput.equals(expectedHashedOutput)) {\n      throw new Error('keccak256 hash of preimage did not match stored contract hash');\n    }\n  } else {\n    throw new Error('hash function in contract unrecognized');\n  }\n  const args = [preImageBytes]; // array of one element, the Uint8Array preimage\n  const lsig = new logicSig.LogicSig(contract, args);\n  // clear out receiver just in case\n  // eslint-disable-next-line no-param-reassign\n  delete txn.to;\n  const maxFee = ints[0];\n  // check fee\n  const tempTxn = new transaction.Transaction(txn);\n  if (tempTxn.fee > maxFee) {\n    throw new Error(`final fee of payment transaction${tempTxn.fee.toString()}greater than transaction max fee${maxFee.toString()}`);\n  }\n  return logicSig.signLogicSigTransaction(txn, lsig);\n}\nmodule.exports = {\n  HTLC,\n  signTransactionWithHTLCUnlock\n};","map":{"version":3,"mappings":"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","names":["sha256","require","keccak256","logic","logicSig","templates","transaction","HTLC","constructor","owner","receiver","hashFunction","hashImage","expiryRound","maxFee","Number","isSafeInteger","Error","referenceProgramB64","hashImageBytes","Buffer","from","length","referenceProgramBytes","referenceOffsets","injectionVector","injectionTypes","valTypes","INT","ADDRESS","BASE64","injectedBytes","inject","programBytes","lsig","LogicSig","undefined","address","getProgram","getAddress","signTransactionWithHTLCUnlock","contract","txn","preImageAsBase64","preImageBytes","readResult","readProgram","ints","byteArrays","expectedHashedOutput","hash","create","update","actualHashedOutput","hex","equals","args","to","tempTxn","Transaction","fee","toString","signLogicSigTransaction","module","exports"],"sourceRoot":"","sources":["../../../src/logicTemplates/htlc.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}