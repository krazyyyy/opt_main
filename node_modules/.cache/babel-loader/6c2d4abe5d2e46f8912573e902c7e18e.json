{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Optimum-Staking-main\\\\Optimum-Staking-main\\\\frontend\\\\src\\\\components\\\\ConnectWallet.js\",\n  _s = $RefreshSig$();\n/* global AlgoSigner */\nimport * as React from 'react';\nimport { Button, CircularProgress, Dialog, DialogTitle, List, ListItem, ListItemButton, ListItemText } from '@mui/material';\nimport { connect } from 'react-redux';\nimport { addChainAddressStore, changeNetwork, changeWallet, changeWebMode, updateAddress, updateAdminAddr } from '../redux/wallet/actions';\nimport { addError } from '../redux/feedback_reducer';\nimport { Color, Wallet, CurrentNetwork } from '../constants/constants';\nimport { OptAppID, readAppGlobalState } from '../utils/common';\nimport { getNetworkAlgodConfig, indexerClient } from '../utils/algob.config';\nimport { MyAlgoWalletSession, WebMode } from '@algo-builder/web';\nimport { encodeAddress } from 'algosdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConnectWallet(props) {\n  _s();\n  const [openModal, setOpenModal] = React.useState(true);\n  const [loading, setLoading] = React.useState(false);\n  const [showAddressInfo, setShowAddressInfo] = React.useState(props.selected);\n  const [accountInfoArray, setAccountInfoArray] = React.useState(props.account_store ? props.account_store : []);\n  const [selectedAddress, setSelectedAddress] = React.useState(props.address ? props.address : undefined);\n  const [selectedNetwork, setSelectedNetwork] = React.useState(props.selected_network);\n  const handleCloseModal = () => setOpenModal(false);\n  async function handleNetworkSelection() {\n    let network = CurrentNetwork;\n    props.changeNetwork(network);\n    setSelectedNetwork(network);\n    await addAdminAddr(network);\n  }\n  React.useEffect(() => {\n    props.closeModal(openModal);\n    handleNetworkSelection();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [openModal]);\n  async function getAccountInfo(value) {\n    let accountStore = [];\n    for (const acc of value) {\n      if (acc && acc.address) {\n        const accountInfo = await indexerClient(selectedNetwork).lookupAccountByID(acc.address).do();\n        let account = accountInfo.account;\n        accountStore.push({\n          address: account.address,\n          amount: account.amount / 1e6\n        });\n      }\n    }\n    setAccountInfoArray(accountStore);\n    return accountStore;\n  }\n  const handleClick = async selectedWallet => {\n    if (selectedWallet === Wallet.ALGOSIGNER) {\n      if (typeof AlgoSigner === 'undefined') {\n        AlgoSigner.connect().then(async d => {\n          var _await$AlgoSigner$acc;\n          const address = (_await$AlgoSigner$acc = await AlgoSigner.accounts({\n            ledger: selectedNetwork\n          })) !== null && _await$AlgoSigner$acc !== void 0 ? _await$AlgoSigner$acc : [];\n          if (address.length) {\n            props.changeWallet(Wallet.ALGOSIGNER);\n            props.changeWebMode(new WebMode(AlgoSigner, selectedNetwork));\n            // fetching only if new address is added to wallet (since network change is not allowed by sign out)\n            if (address.length === accountInfoArray.length) {\n              setLoading(true);\n              const accountInfo = await getAccountInfo(address);\n              setLoading(false);\n              props.addChainAddressStore(accountInfo);\n            }\n            setShowAddressInfo(true);\n          }\n        }).catch(e => {\n          console.error(e);\n          props.addError(JSON.stringify(e));\n          handleCloseModal();\n        });\n      } else {\n        props.addError('AlgoSigner is NOT installed.');\n        handleCloseModal();\n      }\n    } else if (selectedWallet === Wallet.MY_ALGO_WALLET) {\n      let myAlgo = new MyAlgoWalletSession(getNetworkAlgodConfig(selectedNetwork));\n      await myAlgo.connectToMyAlgo().catch(e => {\n        console.error(e);\n        props.addError(JSON.stringify(e));\n        handleCloseModal();\n      });\n      props.changeWebMode(myAlgo);\n      if (myAlgo.accounts.length) {\n        setLoading(true);\n        const accountInfo = await getAccountInfo(myAlgo.accounts);\n        setLoading(false);\n        props.addChainAddressStore(accountInfo);\n        props.changeWallet(Wallet.MY_ALGO_WALLET);\n        setShowAddressInfo(true);\n      }\n    }\n  };\n  async function addAdminAddr(network) {\n    const globalState = await readAppGlobalState(selectedAddress, OptAppID(network), network);\n    const address = encodeAddress(Buffer.from(globalState.get('admin'), 'base64'));\n    props.updateAdminAddr(address);\n  }\n  function setAddressInfo(address) {\n    setSelectedAddress(address);\n    props.updateAddress(address);\n    setTimeout(() => {\n      handleCloseModal();\n    }, 500);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      onClose: handleCloseModal,\n      open: openModal,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: !showAddressInfo ?\n        /*#__PURE__*/\n        // wallet config\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            className: \"modal_heading\",\n            children: \"Connect to Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            sx: {\n              pt: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItem, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"modal_option\",\n                onClick: () => handleClick(Wallet.ALGOSIGNER),\n                children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [\"Fetching Address\", /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    size: \"2rem\",\n                    style: {\n                      color: Color.RED,\n                      marginLeft: 10\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 45\n                }, this) : 'AlgoSigner'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), !loading && /*#__PURE__*/_jsxDEV(ListItem, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"modal_option\",\n                onClick: () => {\n                  setLoading(true);\n                  handleClick(Wallet.MY_ALGO_WALLET);\n                },\n                children: \"MyAlgo Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this) :\n        /*#__PURE__*/\n        // address config\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            className: \"modal_heading\",\n            children: \"Select Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            sx: {\n              pt: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"address_list_container padding_sm list_header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this), accountInfoArray.map((account, index) => {\n              const labelId = `checkbox-list-label-${index}`;\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                style: {\n                  padding: 0\n                },\n                children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n                  selected: selectedAddress === account.address,\n                  onClick: () => {\n                    setAddressInfo(account.address);\n                  },\n                  dense: true,\n                  className: \"padding_extra_sm\",\n                  children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                    className: \"padding_sm\",\n                    style: {\n                      backgroundColor: selectedAddress === account.address ? Color.DARK_YELLOW : Color.RED\n                    },\n                    id: labelId,\n                    primary: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"address_list_container list_item\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [account.address.substring(0, 12), \"...\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 250,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: account.amount\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 257,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 249,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 41\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n_s(ConnectWallet, \"N3QSQlvrOkOr/C4llt+iPGNGhBo=\");\n_c = ConnectWallet;\nconst mapStateToProps = state => {\n  return {\n    selected: state.wallet.selected,\n    address: state.wallet.address,\n    error: state.feedback.error,\n    account_store: state.wallet.account_store,\n    selected_network: state.wallet.selected_network\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeWallet: payload => dispatch(changeWallet(payload)),\n    updateAddress: payload => dispatch(updateAddress(payload)),\n    addError: payload => dispatch(addError(payload)),\n    addChainAddressStore: payload => dispatch(addChainAddressStore(payload)),\n    changeNetwork: payload => dispatch(changeNetwork(payload)),\n    updateAdminAddr: payload => dispatch(updateAdminAddr(payload)),\n    changeWebMode: payload => dispatch(changeWebMode(payload))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ConnectWallet);\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"names":["React","Button","CircularProgress","Dialog","DialogTitle","List","ListItem","ListItemButton","ListItemText","connect","addChainAddressStore","changeNetwork","changeWallet","changeWebMode","updateAddress","updateAdminAddr","addError","Color","Wallet","CurrentNetwork","OptAppID","readAppGlobalState","getNetworkAlgodConfig","indexerClient","MyAlgoWalletSession","WebMode","encodeAddress","ConnectWallet","props","openModal","setOpenModal","useState","loading","setLoading","showAddressInfo","setShowAddressInfo","selected","accountInfoArray","setAccountInfoArray","account_store","selectedAddress","setSelectedAddress","address","undefined","selectedNetwork","setSelectedNetwork","selected_network","handleCloseModal","handleNetworkSelection","network","addAdminAddr","useEffect","closeModal","getAccountInfo","value","accountStore","acc","accountInfo","lookupAccountByID","do","account","push","amount","handleClick","selectedWallet","ALGOSIGNER","AlgoSigner","then","d","accounts","ledger","length","catch","e","console","error","JSON","stringify","MY_ALGO_WALLET","myAlgo","connectToMyAlgo","globalState","Buffer","from","get","setAddressInfo","setTimeout","pt","color","RED","marginLeft","map","index","labelId","padding","backgroundColor","DARK_YELLOW","substring","mapStateToProps","state","wallet","feedback","mapDispatchToProps","dispatch","payload"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/components/ConnectWallet.js"],"sourcesContent":["/* global AlgoSigner */\r\nimport * as React from 'react';\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogTitle,\r\n    List,\r\n    ListItem,\r\n    ListItemButton,\r\n    ListItemText\r\n} from '@mui/material';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    addChainAddressStore,\r\n    changeNetwork,\r\n    changeWallet,\r\n    changeWebMode,\r\n    updateAddress,\r\n    updateAdminAddr\r\n} from '../redux/wallet/actions';\r\nimport { addError } from '../redux/feedback_reducer';\r\n\r\nimport { Color, Wallet, CurrentNetwork } from '../constants/constants';\r\nimport { OptAppID, readAppGlobalState } from '../utils/common';\r\nimport { getNetworkAlgodConfig, indexerClient } from '../utils/algob.config';\r\nimport { MyAlgoWalletSession, WebMode } from '@algo-builder/web';\r\nimport { encodeAddress } from 'algosdk';\r\n\r\nfunction ConnectWallet(props) {\r\n    const [openModal, setOpenModal] = React.useState(true);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [showAddressInfo, setShowAddressInfo] = React.useState(\r\n        props.selected\r\n    );\r\n    const [accountInfoArray, setAccountInfoArray] = React.useState(\r\n        props.account_store ? props.account_store : []\r\n    );\r\n    const [selectedAddress, setSelectedAddress] = React.useState(\r\n        props.address ? props.address : undefined\r\n    );\r\n\r\n    const [selectedNetwork, setSelectedNetwork] = React.useState(\r\n        props.selected_network\r\n    );\r\n    const handleCloseModal = () => setOpenModal(false);\r\n\r\n    async function handleNetworkSelection() {\r\n        let network = CurrentNetwork;\r\n        props.changeNetwork(network);\r\n        setSelectedNetwork(network);\r\n        await addAdminAddr(network);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        props.closeModal(openModal);\r\n        handleNetworkSelection();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [openModal]);\r\n\r\n    async function getAccountInfo(value) {\r\n        let accountStore = [];\r\n        for (const acc of value) {\r\n            if (acc && acc.address) {\r\n                const accountInfo = await indexerClient(selectedNetwork)\r\n                    .lookupAccountByID(acc.address)\r\n                    .do();\r\n\r\n                let account = accountInfo.account;\r\n                accountStore.push({\r\n                    address: account.address,\r\n                    amount: account.amount / 1e6\r\n                });\r\n            }\r\n        }\r\n        setAccountInfoArray(accountStore);\r\n        return accountStore;\r\n    }\r\n\r\n    const handleClick = async (selectedWallet) => {\r\n        if (selectedWallet === Wallet.ALGOSIGNER) {\r\n            if (typeof AlgoSigner === 'undefined') {\r\n                AlgoSigner.connect()\r\n                    .then(async (d) => {\r\n                        const address =\r\n                            (await AlgoSigner.accounts({\r\n                                ledger: selectedNetwork\r\n                            })) ?? [];\r\n                        if (address.length) {\r\n                            props.changeWallet(Wallet.ALGOSIGNER);\r\n                            props.changeWebMode(\r\n                                new WebMode(AlgoSigner, selectedNetwork)\r\n                            );\r\n                            // fetching only if new address is added to wallet (since network change is not allowed by sign out)\r\n                            if (address.length === accountInfoArray.length) {\r\n                                setLoading(true);\r\n                                const accountInfo = await getAccountInfo(\r\n                                    address\r\n                                );\r\n                                setLoading(false);\r\n                                props.addChainAddressStore(accountInfo);\r\n                            }\r\n                            setShowAddressInfo(true);\r\n                        }\r\n                    })\r\n                    .catch((e) => {\r\n                        console.error(e);\r\n                        props.addError(JSON.stringify(e));\r\n                        handleCloseModal();\r\n                    });\r\n            } else {\r\n                props.addError('AlgoSigner is NOT installed.');\r\n                handleCloseModal();\r\n            }\r\n        } else if (selectedWallet === Wallet.MY_ALGO_WALLET) {\r\n            let myAlgo = new MyAlgoWalletSession(\r\n                getNetworkAlgodConfig(selectedNetwork)\r\n            );\r\n            await myAlgo.connectToMyAlgo().catch((e) => {\r\n                console.error(e);\r\n                props.addError(JSON.stringify(e));\r\n                handleCloseModal();\r\n            });\r\n            props.changeWebMode(myAlgo);\r\n            if (myAlgo.accounts.length) {\r\n                setLoading(true);\r\n                const accountInfo = await getAccountInfo(myAlgo.accounts);\r\n                setLoading(false);\r\n                props.addChainAddressStore(accountInfo);\r\n                props.changeWallet(Wallet.MY_ALGO_WALLET);\r\n                setShowAddressInfo(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    async function addAdminAddr(network) {\r\n        const globalState = await readAppGlobalState(\r\n            selectedAddress,\r\n            OptAppID(network),\r\n            network\r\n        );\r\n        const address = encodeAddress(\r\n            Buffer.from(globalState.get('admin'), 'base64')\r\n        );\r\n        props.updateAdminAddr(address);\r\n    }\r\n\r\n    function setAddressInfo(address) {\r\n        setSelectedAddress(address);\r\n        props.updateAddress(address);\r\n        setTimeout(() => {\r\n            handleCloseModal();\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog onClose={handleCloseModal} open={openModal}>\r\n                <div className=\"modal\">\r\n                    {!showAddressInfo ? (\r\n                        // wallet config\r\n                        <div>\r\n                            <DialogTitle className=\"modal_heading\">\r\n                                Connect to Wallet\r\n                            </DialogTitle>\r\n                            <List sx={{ pt: 0 }}>\r\n                                <ListItem>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        className=\"modal_option\"\r\n                                        onClick={() =>\r\n                                            handleClick(Wallet.ALGOSIGNER)\r\n                                        }\r\n                                    >\r\n                                        {loading ? (\r\n                                            <div>\r\n                                                Fetching Address\r\n                                                <CircularProgress\r\n                                                    size=\"2rem\"\r\n                                                    style={{\r\n                                                        color: Color.RED,\r\n                                                        marginLeft: 10\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        ) : (\r\n                                            'AlgoSigner'\r\n                                        )}\r\n                                    </Button>\r\n                                </ListItem>\r\n                                {!loading && (\r\n                                    <ListItem>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            className=\"modal_option\"\r\n                                            onClick={() => {\r\n                                                setLoading(true);\r\n                                                handleClick(\r\n                                                    Wallet.MY_ALGO_WALLET\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            MyAlgo Wallet\r\n                                        </Button>\r\n                                    </ListItem>\r\n                                )}\r\n                            </List>\r\n                        </div>\r\n                    ) : (\r\n                        // address config\r\n                        <div>\r\n                            <DialogTitle className=\"modal_heading\">\r\n                                Select Address\r\n                            </DialogTitle>\r\n                            <List sx={{ pt: 0 }}>\r\n                                <div className=\"address_list_container padding_sm list_header\">\r\n                                    <div>Address</div>\r\n                                    <div>Amount</div>\r\n                                </div>\r\n                                {accountInfoArray.map((account, index) => {\r\n                                    const labelId = `checkbox-list-label-${index}`;\r\n                                    return (\r\n                                        <ListItem style={{ padding: 0 }}>\r\n                                            <ListItemButton\r\n                                                selected={\r\n                                                    selectedAddress ===\r\n                                                    account.address\r\n                                                }\r\n                                                onClick={() => {\r\n                                                    setAddressInfo(\r\n                                                        account.address\r\n                                                    );\r\n                                                }}\r\n                                                dense\r\n                                                className=\"padding_extra_sm\"\r\n                                            >\r\n                                                <ListItemText\r\n                                                    className=\"padding_sm\"\r\n                                                    style={{\r\n                                                        backgroundColor:\r\n                                                            selectedAddress ===\r\n                                                            account.address\r\n                                                                ? Color.DARK_YELLOW\r\n                                                                : Color.RED\r\n                                                    }}\r\n                                                    id={labelId}\r\n                                                    primary={\r\n                                                        <div className=\"address_list_container list_item\">\r\n                                                            <div>\r\n                                                                {account.address.substring(\r\n                                                                    0,\r\n                                                                    12\r\n                                                                )}\r\n                                                                ...\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                {account.amount}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    }\r\n                                                />\r\n                                            </ListItemButton>\r\n                                        </ListItem>\r\n                                    );\r\n                                })}\r\n                            </List>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selected: state.wallet.selected,\r\n        address: state.wallet.address,\r\n        error: state.feedback.error,\r\n        account_store: state.wallet.account_store,\r\n        selected_network: state.wallet.selected_network\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeWallet: (payload) => dispatch(changeWallet(payload)),\r\n        updateAddress: (payload) => dispatch(updateAddress(payload)),\r\n        addError: (payload) => dispatch(addError(payload)),\r\n        addChainAddressStore: (payload) =>\r\n            dispatch(addChainAddressStore(payload)),\r\n        changeNetwork: (payload) => dispatch(changeNetwork(payload)),\r\n        updateAdminAddr: (payload) => dispatch(updateAdminAddr(payload)),\r\n        changeWebMode: (payload) => dispatch(changeWebMode(payload))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConnectWallet);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}