{"ast":null,"code":"const {\n  default: HTTPClient\n} = require('./client');\nconst {\n  setSendTransactionHeaders\n} = require('./v2/algod/sendRawTransaction');\n/** @deprecated v1 algod APIs are deprecated, please use the v2 client */\nfunction Algod() {\n  var _this = this;\n  let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let baseServer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'http://r2.algorand.network';\n  let port = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4180;\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // workaround to allow backwards compatibility for multiple headers\n  let tokenHeader = token;\n  if (typeof tokenHeader === 'string') {\n    tokenHeader = {\n      'X-Algo-API-Token': tokenHeader\n    };\n  }\n  // Get client\n  const c = new HTTPClient(tokenHeader, baseServer, port, headers);\n  /**\n   * Takes an object and convert its note field to Buffer, if exist.\n   * @param o\n   * @returns {*}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  function noteb64ToNote(o) {\n    if (!(o.noteb64 === undefined || o.noteb64 === null)) {\n      // eslint-disable-next-line no-param-reassign\n      o.note = Buffer.from(o.noteb64, 'base64');\n    }\n    return o;\n  }\n  /**\n   * status retrieves the StatusResponse from the running node\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.status = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/v1/status', {}, headerObj);\n    return res.body;\n  };\n  /**\n   * healthCheck returns an empty object iff the node is running\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.healthCheck = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/health', {}, headerObj);\n    if (!res.ok) {\n      throw new Error(`Health response: ${res.status}`);\n    }\n    return {};\n  };\n  /**\n   * statusAfterBlock waits for round roundNumber to occur then returns the StatusResponse for this round.\n   * This call blocks\n   * @param roundNumber\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.statusAfterBlock = async function (roundNumber) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Number.isInteger(roundNumber)) throw Error('roundNumber should be an integer');\n    const res = await c.get(`/v1/status/wait-for-block-after/${roundNumber}`, {}, headerObj);\n    return res.body;\n  };\n  /**\n   * pendingTransactions asks algod for a snapshot of current pending txns on the node, bounded by maxTxns.\n   * If maxTxns = 0, fetches as many transactions as possible.\n   * @param maxTxns - number\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.pendingTransactions = async function (maxTxns) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Number.isInteger(maxTxns)) throw Error('maxTxns should be an integer');\n    const res = await c.get('/v1/transactions/pending', {\n      max: maxTxns\n    }, headerObj);\n    if (res.statusCode === 200 && res.body.truncatedTxns.transactions !== undefined) {\n      for (let i = 0; i < res.body.truncatedTxns.transactions.length; i++) {\n        res.body.truncatedTxns.transactions[i] = noteb64ToNote(res.body.truncatedTxns.transactions[i]);\n      }\n    }\n    return res.body;\n  };\n  /**\n   * versions retrieves the VersionResponse from the running node\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.versions = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/versions', {}, headerObj);\n    return res.body;\n  };\n  /**\n   * LedgerSupply gets the supply details for the specified node's Ledger\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.ledgerSupply = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/v1/ledger/supply', {}, headerObj);\n    return res.body;\n  };\n  /**\n   * transactionsByAddress returns all transactions for a PK [addr] in the [first, last] rounds range.\n   * @param addr - string\n   * @param first - number, optional\n   * @param last - number, optional\n   * @param maxTxns - number, optional\n   * @param headers, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.transactionByAddress = async function (addr) {\n    let first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let last = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let maxTxns = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let headerObj = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (first !== null && !Number.isInteger(first)) {\n      throw Error('first round should be an integer');\n    }\n    if (last !== null && !Number.isInteger(last)) {\n      throw Error('last round should be an integer');\n    }\n    const res = await c.get(`/v1/account/${addr}/transactions`, {\n      firstRound: first,\n      lastRound: last,\n      max: maxTxns\n    }, headerObj);\n    if (res.statusCode === 200 && res.body.transactions !== undefined) {\n      for (let i = 0; i < res.body.transactions.length; i++) {\n        res.body.transactions[i] = noteb64ToNote(res.body.transactions[i]);\n      }\n    }\n    return res.body;\n  };\n  /**\n   * transactionsByAddressAndDate returns all transactions for a PK [addr] in the [fromDate, toDate] date range.\n   * The date is a string in the YYYY-MM-DD format.\n   * @param addr - string\n   * @param fromDate - string\n   * @param toDate - string\n   * @param maxTxns - number, optional\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.transactionByAddressAndDate = async function (addr, fromDate, toDate) {\n    let maxTxns = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let headerObj = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const res = await c.get(`/v1/account/${addr}/transactions`, {\n      fromDate,\n      toDate,\n      max: maxTxns\n    }, headerObj);\n    if (res.statusCode === 200 && res.body.transactions !== undefined) {\n      for (let i = 0; i < res.body.transactions.length; i++) {\n        res.body.transactions[i] = noteb64ToNote(res.body.transactions[i]);\n      }\n    }\n    return res.body;\n  };\n  /**\n   * transactionById returns the a transaction information of a specific txid [txId]\n   * Note - This method is allowed only when Indexer is enabled.\n   * @param txid\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.transactionById = async function (txid) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await c.get(`/v1/transaction/${txid}`, {}, headerObj);\n    if (res.statusCode === 200) {\n      res.body = noteb64ToNote(res.body);\n    }\n    return res.body;\n  };\n  /**\n   * transactionInformation returns the transaction information of a specific txid and an address\n   * @param addr\n   * @param txid\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.transactionInformation = async function (addr, txid) {\n    let headerObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const res = await c.get(`/v1/account/${addr}/transaction/${txid}`, {}, headerObj);\n    if (res.statusCode === 200) {\n      res.body = noteb64ToNote(res.body);\n    }\n    return res.body;\n  };\n  /**\n   * pendingTransactionInformation returns the transaction information for a specific txid of a pending transaction\n   * @param txid\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.pendingTransactionInformation = async function (txid) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await c.get(`/v1/transactions/pending/${txid}`, {}, headerObj);\n    if (res.statusCode === 200) {\n      res.body = noteb64ToNote(res.body);\n    }\n    return res.body;\n  };\n  /**\n   * accountInformation returns the passed account's information\n   * @param addr - string\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.accountInformation = async function (addr) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await c.get(`/v1/account/${addr}`, {}, headerObj);\n    return res.body;\n  };\n  /**\n   * assetInformation returns the information for the asset with the passed creator and index\n   * @param index - number\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.assetInformation = async function (index) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await c.get(`/v1/asset/${index}`, {}, headerObj);\n    return res.body;\n  };\n  /**\n   * suggestedFee gets the recommended transaction fee from the node\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.suggestedFee = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/v1/transactions/fee', {}, headerObj);\n    return res.body;\n  };\n  /**\n   * sendRawTransaction gets an encoded SignedTxn and broadcasts it to the network\n   * @param txn - Uin8Array\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.sendRawTransaction = async function (txn) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const txHeaders = setSendTransactionHeaders(headerObj);\n    const res = await c.post('/v1/transactions', Buffer.from(txn), txHeaders);\n    return res.body;\n  };\n  /**\n   * sendRawTransactions gets a list of encoded SignedTxns and broadcasts it to the network\n   * @param txn - Array of Uin8Array\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.sendRawTransactions = async function (txns) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const txHeaders = setSendTransactionHeaders(headerObj);\n    const merged = Array.prototype.concat(...txns.map(arr => Array.from(arr)));\n    const res = await c.post('/v1/transactions', Buffer.from(merged), txHeaders);\n    return res.body;\n  };\n  /**\n   * getTransactionParams returns to common needed parameters for a new transaction\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.getTransactionParams = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await c.get('/v1/transactions/params', {}, headerObj);\n    return res.body;\n  };\n  /**\n   * suggestParams returns to common needed parameters for a new transaction, in a format the transaction builder expects\n   * @param headerObj, optional\n   * @returns {Object}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.suggestParams = async function () {\n    let headerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const result = await _this.getTransactionParams(headerObj);\n    return {\n      flatFee: false,\n      fee: result.fee,\n      firstRound: result.lastRound,\n      lastRound: result.lastRound + 1000,\n      genesisID: result.genesisID,\n      genesisHash: result.genesishashb64\n    };\n  };\n  /**\n   * block gets the block info for the given round This call blocks\n   * @param roundNumber\n   * @param headerObj, optional\n   * @returns {Promise<*>}\n   * @deprecated v1 algod APIs are deprecated, please use the v2 client\n   */\n  this.block = async function (roundNumber) {\n    let headerObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Number.isInteger(roundNumber)) throw Error('roundNumber should be an integer');\n    const res = await c.get(`/v1/block/${roundNumber}`, {}, headerObj);\n    if (res.statusCode === 200 && res.body.txns.transactions !== undefined) {\n      for (let i = 0; i < res.body.txns.transactions.length; i++) {\n        res.body.txns.transactions[i] = noteb64ToNote(res.body.txns.transactions[i]);\n      }\n    }\n    return res.body;\n  };\n}\nmodule.exports = {\n  Algod\n};","map":{"version":3,"mappings":"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","names":["default","HTTPClient","require","setSendTransactionHeaders","Algod","token","baseServer","port","headers","tokenHeader","c","noteb64ToNote","o","noteb64","undefined","note","Buffer","from","status","headerObj","res","get","body","healthCheck","ok","Error","statusAfterBlock","roundNumber","Number","isInteger","pendingTransactions","maxTxns","max","statusCode","truncatedTxns","transactions","i","length","versions","ledgerSupply","transactionByAddress","addr","first","last","firstRound","lastRound","transactionByAddressAndDate","fromDate","toDate","transactionById","txid","transactionInformation","pendingTransactionInformation","accountInformation","assetInformation","index","suggestedFee","sendRawTransaction","txn","txHeaders","post","sendRawTransactions","txns","merged","Array","prototype","concat","map","arr","getTransactionParams","suggestParams","result","flatFee","fee","genesisID","genesisHash","genesishashb64","block","module","exports"],"sourceRoot":"","sources":["../../../src/client/algod.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}