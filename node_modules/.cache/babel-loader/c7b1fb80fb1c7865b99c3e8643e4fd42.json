{"ast":null,"code":"/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor(_ref) {\n    let {\n      address,\n      amount,\n      amountWithoutPendingRewards,\n      minBalance,\n      pendingRewards,\n      rewards,\n      round,\n      status,\n      totalAppsOptedIn,\n      totalAssetsOptedIn,\n      totalCreatedApps,\n      totalCreatedAssets,\n      appsLocalState,\n      appsTotalExtraPages,\n      appsTotalSchema,\n      assets,\n      authAddr,\n      createdApps,\n      createdAssets,\n      participation,\n      rewardBase,\n      sigType,\n      totalBoxBytes,\n      totalBoxes\n    } = _ref;\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n    if (typeof data['min-balance'] === 'undefined') throw new Error(`Response is missing required field 'min-balance': ${data}`);\n    if (typeof data['pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n    if (typeof data['rewards'] === 'undefined') throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined') throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n    if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n    if (typeof data['total-created-apps'] === 'undefined') throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n    if (typeof data['total-created-assets'] === 'undefined') throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n      assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n      authAddr: data['auth-addr'],\n      createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n      createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n      participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse extends BaseModel {\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor(_ref2) {\n    let {\n      round,\n      appLocalState,\n      createdApp\n    } = _ref2;\n    super();\n    this.round = round;\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n    this.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountApplicationResponse({\n      round: data['round'],\n      appLocalState: typeof data['app-local-state'] !== 'undefined' ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state']) : undefined,\n      createdApp: typeof data['created-app'] !== 'undefined' ? ApplicationParams.from_obj_for_encoding(data['created-app']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse extends BaseModel {\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor(_ref3) {\n    let {\n      round,\n      assetHolding,\n      createdAsset\n    } = _ref3;\n    super();\n    this.round = round;\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n    this.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetResponse({\n      round: data['round'],\n      assetHolding: typeof data['asset-holding'] !== 'undefined' ? AssetHolding.from_obj_for_encoding(data['asset-holding']) : undefined,\n      createdAsset: typeof data['created-asset'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['created-asset']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor(_ref4) {\n    let {\n      selectionParticipationKey,\n      voteFirstValid,\n      voteKeyDilution,\n      voteLastValid,\n      voteParticipationKey,\n      stateProofKey\n    } = _ref4;\n    super();\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n    if (typeof data['vote-first-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n    if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n    if (typeof data['vote-last-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n    if (typeof data['vote-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor(_ref5) {\n    let {\n      address,\n      delta\n    } = _ref5;\n    super();\n    this.address = address;\n    this.delta = delta;\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta'])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor(_ref6) {\n    let {\n      id,\n      params\n    } = _ref6;\n    super();\n    this.id = id;\n    this.params = params;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor(_ref7) {\n    let {\n      id,\n      schema,\n      keyValue\n    } = _ref7;\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.keyValue = keyValue;\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined') throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor(_ref8) {\n    let {\n      approvalProgram,\n      clearStateProgram,\n      creator,\n      extraProgramPages,\n      globalState,\n      globalStateSchema,\n      localStateSchema\n    } = _ref8;\n    super();\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined') throw new Error(`Response is missing required field 'approval-program': ${data}`);\n    if (typeof data['clear-state-program'] === 'undefined') throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numUint - (nui) num of uints.\n   * @param numByteSlice - (nbs) num of byte slices.\n   */\n  constructor(_ref9) {\n    let {\n      numUint,\n      numByteSlice\n    } = _ref9;\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    return new ApplicationStateSchema({\n      numUint: data['num-uint'],\n      numByteSlice: data['num-byte-slice']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor(_ref10) {\n    let {\n      index,\n      params\n    } = _ref10;\n    super();\n    this.index = index;\n    this.params = params;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor(_ref11) {\n    let {\n      amount,\n      assetId,\n      isFrozen\n    } = _ref11;\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor(_ref12) {\n    let {\n      creator,\n      decimals,\n      total,\n      clawback,\n      defaultFrozen,\n      freeze,\n      manager,\n      metadataHash,\n      name,\n      nameB64,\n      reserve,\n      unitName,\n      unitNameB64,\n      url,\n      urlB64\n    } = _ref12;\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined') throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined') throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse extends BaseModel {\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor(_ref13) {\n    let {\n      blockhash\n    } = _ref13;\n    super();\n    this.blockhash = blockhash;\n    this.attribute_map = {\n      blockhash: 'blockHash'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['blockHash'] === 'undefined') throw new Error(`Response is missing required field 'blockHash': ${data}`);\n    return new BlockHashResponse({\n      blockhash: data['blockHash']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Encoded block object.\n */\nexport class BlockResponse extends BaseModel {\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor(_ref14) {\n    let {\n      block,\n      cert\n    } = _ref14;\n    super();\n    this.block = block;\n    this.cert = cert;\n    this.attribute_map = {\n      block: 'block',\n      cert: 'cert'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['block'] === 'undefined') throw new Error(`Response is missing required field 'block': ${data}`);\n    return new BlockResponse({\n      block: data['block'],\n      cert: data['cert']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor(_ref15) {\n    let {\n      name,\n      value\n    } = _ref15;\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      name: 'name',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor(_ref16) {\n    let {\n      name\n    } = _ref16;\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor(_ref17) {\n    let {\n      boxes\n    } = _ref17;\n    super();\n    this.boxes = boxes;\n    this.attribute_map = {\n      boxes: 'boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['boxes'])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n    return new BoxesResponse({\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class BuildVersion extends BaseModel {\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor(_ref18) {\n    let {\n      branch,\n      buildNumber,\n      channel,\n      commitHash,\n      major,\n      minor\n    } = _ref18;\n    super();\n    this.branch = branch;\n    this.buildNumber = buildNumber;\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = major;\n    this.minor = minor;\n    this.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['branch'] === 'undefined') throw new Error(`Response is missing required field 'branch': ${data}`);\n    if (typeof data['build_number'] === 'undefined') throw new Error(`Response is missing required field 'build_number': ${data}`);\n    if (typeof data['channel'] === 'undefined') throw new Error(`Response is missing required field 'channel': ${data}`);\n    if (typeof data['commit_hash'] === 'undefined') throw new Error(`Response is missing required field 'commit_hash': ${data}`);\n    if (typeof data['major'] === 'undefined') throw new Error(`Response is missing required field 'major': ${data}`);\n    if (typeof data['minor'] === 'undefined') throw new Error(`Response is missing required field 'minor': ${data}`);\n    return new BuildVersion({\n      branch: data['branch'],\n      buildNumber: data['build_number'],\n      channel: data['channel'],\n      commitHash: data['commit_hash'],\n      major: data['major'],\n      minor: data['minor']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Teal compile Result\n */\nexport class CompileResponse extends BaseModel {\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor(_ref19) {\n    let {\n      hash,\n      result,\n      sourcemap\n    } = _ref19;\n    super();\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n    this.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['hash'] === 'undefined') throw new Error(`Response is missing required field 'hash': ${data}`);\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new CompileResponse({\n      hash: data['hash'],\n      result: data['result'],\n      sourcemap: data['sourcemap']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse extends BaseModel {\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor(_ref20) {\n    let {\n      result\n    } = _ref20;\n    super();\n    this.result = result;\n    this.attribute_map = {\n      result: 'result'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new DisassembleResponse({\n      result: data['result']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest extends BaseModel {\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor(_ref21) {\n    let {\n      accounts,\n      apps,\n      latestTimestamp,\n      protocolVersion,\n      round,\n      sources,\n      txns\n    } = _ref21;\n    super();\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = latestTimestamp;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.sources = sources;\n    this.txns = txns;\n    this.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts'])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n    if (!Array.isArray(data['apps'])) throw new Error(`Response is missing required array field 'apps': ${data}`);\n    if (typeof data['latest-timestamp'] === 'undefined') throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (!Array.isArray(data['sources'])) throw new Error(`Response is missing required array field 'sources': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunRequest({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      apps: data['apps'].map(Application.from_obj_for_encoding),\n      latestTimestamp: data['latest-timestamp'],\n      protocolVersion: data['protocol-version'],\n      round: data['round'],\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n      txns: data['txns']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse extends BaseModel {\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor(_ref22) {\n    let {\n      error,\n      protocolVersion,\n      txns\n    } = _ref22;\n    super();\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n    this.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['error'] === 'undefined') throw new Error(`Response is missing required field 'error': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunResponse({\n      error: data['error'],\n      protocolVersion: data['protocol-version'],\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource extends BaseModel {\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   * @param appIndex -\n   */\n  constructor(_ref23) {\n    let {\n      fieldName,\n      source,\n      txnIndex,\n      appIndex\n    } = _ref23;\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['field-name'] === 'undefined') throw new Error(`Response is missing required field 'field-name': ${data}`);\n    if (typeof data['source'] === 'undefined') throw new Error(`Response is missing required field 'source': ${data}`);\n    if (typeof data['txn-index'] === 'undefined') throw new Error(`Response is missing required field 'txn-index': ${data}`);\n    if (typeof data['app-index'] === 'undefined') throw new Error(`Response is missing required field 'app-index': ${data}`);\n    return new DryrunSource({\n      fieldName: data['field-name'],\n      source: data['source'],\n      txnIndex: data['txn-index'],\n      appIndex: data['app-index']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState extends BaseModel {\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor(_ref24) {\n    let {\n      line,\n      pc,\n      stack,\n      error,\n      scratch\n    } = _ref24;\n    super();\n    this.line = line;\n    this.pc = pc;\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n    this.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['line'] === 'undefined') throw new Error(`Response is missing required field 'line': ${data}`);\n    if (typeof data['pc'] === 'undefined') throw new Error(`Response is missing required field 'pc': ${data}`);\n    if (!Array.isArray(data['stack'])) throw new Error(`Response is missing required array field 'stack': ${data}`);\n    return new DryrunState({\n      line: data['line'],\n      pc: data['pc'],\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\n      error: data['error'],\n      scratch: typeof data['scratch'] !== 'undefined' ? data['scratch'].map(TealValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult extends BaseModel {\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor(_ref25) {\n    let {\n      disassembly,\n      appCallMessages,\n      appCallTrace,\n      budgetAdded,\n      budgetConsumed,\n      globalDelta,\n      localDeltas,\n      logicSigDisassembly,\n      logicSigMessages,\n      logicSigTrace,\n      logs\n    } = _ref25;\n    super();\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = budgetAdded;\n    this.budgetConsumed = budgetConsumed;\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n    this.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['disassembly'])) throw new Error(`Response is missing required array field 'disassembly': ${data}`);\n    return new DryrunTxnResult({\n      disassembly: data['disassembly'],\n      appCallMessages: data['app-call-messages'],\n      appCallTrace: typeof data['app-call-trace'] !== 'undefined' ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      budgetAdded: data['budget-added'],\n      budgetConsumed: data['budget-consumed'],\n      globalDelta: typeof data['global-delta'] !== 'undefined' ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      localDeltas: typeof data['local-deltas'] !== 'undefined' ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logicSigDisassembly: data['logic-sig-disassembly'],\n      logicSigMessages: data['logic-sig-messages'],\n      logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      logs: data['logs']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse extends BaseModel {\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor(_ref26) {\n    let {\n      message,\n      data\n    } = _ref26;\n    super();\n    this.message = message;\n    this.data = data;\n    this.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor(_ref27) {\n    let {\n      action,\n      bytes,\n      uint\n    } = _ref27;\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined') throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor(_ref28) {\n    let {\n      key,\n      value\n    } = _ref28;\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof extends BaseModel {\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor(_ref29) {\n    let {\n      index,\n      proof,\n      treedepth\n    } = _ref29;\n    super();\n    this.index = index;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.treedepth = treedepth;\n    this.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new LightBlockHeaderProof({\n      index: data['index'],\n      proof: data['proof'],\n      treedepth: data['treedepth']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class NodeStatusResponse extends BaseModel {\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   */\n  constructor(_ref30) {\n    let {\n      catchupTime,\n      lastRound,\n      lastVersion,\n      nextVersion,\n      nextVersionRound,\n      nextVersionSupported,\n      stoppedAtUnsupportedRound,\n      timeSinceLastRound,\n      catchpoint,\n      catchpointAcquiredBlocks,\n      catchpointProcessedAccounts,\n      catchpointProcessedKvs,\n      catchpointTotalAccounts,\n      catchpointTotalBlocks,\n      catchpointTotalKvs,\n      catchpointVerifiedAccounts,\n      catchpointVerifiedKvs,\n      lastCatchpoint\n    } = _ref30;\n    super();\n    this.catchupTime = catchupTime;\n    this.lastRound = lastRound;\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = nextVersionRound;\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = timeSinceLastRound;\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\n    this.catchpointTotalKvs = catchpointTotalKvs;\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    this.lastCatchpoint = lastCatchpoint;\n    this.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['catchup-time'] === 'undefined') throw new Error(`Response is missing required field 'catchup-time': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['last-version'] === 'undefined') throw new Error(`Response is missing required field 'last-version': ${data}`);\n    if (typeof data['next-version'] === 'undefined') throw new Error(`Response is missing required field 'next-version': ${data}`);\n    if (typeof data['next-version-round'] === 'undefined') throw new Error(`Response is missing required field 'next-version-round': ${data}`);\n    if (typeof data['next-version-supported'] === 'undefined') throw new Error(`Response is missing required field 'next-version-supported': ${data}`);\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined') throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);\n    if (typeof data['time-since-last-round'] === 'undefined') throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);\n    return new NodeStatusResponse({\n      catchupTime: data['catchup-time'],\n      lastRound: data['last-round'],\n      lastVersion: data['last-version'],\n      nextVersion: data['next-version'],\n      nextVersionRound: data['next-version-round'],\n      nextVersionSupported: data['next-version-supported'],\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n      timeSinceLastRound: data['time-since-last-round'],\n      catchpoint: data['catchpoint'],\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n      lastCatchpoint: data['last-catchpoint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse extends BaseModel {\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor(_ref31) {\n    let {\n      poolError,\n      txn,\n      applicationIndex,\n      assetClosingAmount,\n      assetIndex,\n      closeRewards,\n      closingAmount,\n      confirmedRound,\n      globalStateDelta,\n      innerTxns,\n      localStateDelta,\n      logs,\n      receiverRewards,\n      senderRewards\n    } = _ref31;\n    super();\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = applicationIndex;\n    this.assetClosingAmount = assetClosingAmount;\n    this.assetIndex = assetIndex;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = receiverRewards;\n    this.senderRewards = senderRewards;\n    this.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['pool-error'] === 'undefined') throw new Error(`Response is missing required field 'pool-error': ${data}`);\n    if (typeof data['txn'] === 'undefined') throw new Error(`Response is missing required field 'txn': ${data}`);\n    return new PendingTransactionResponse({\n      poolError: data['pool-error'],\n      txn: data['txn'],\n      applicationIndex: data['application-index'],\n      assetClosingAmount: data['asset-closing-amount'],\n      assetIndex: data['asset-index'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(PendingTransactionResponse.from_obj_for_encoding) : undefined,\n      localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logs: data['logs'],\n      receiverRewards: data['receiver-rewards'],\n      senderRewards: data['sender-rewards']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse extends BaseModel {\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor(_ref32) {\n    let {\n      topTransactions,\n      totalTransactions\n    } = _ref32;\n    super();\n    this.topTransactions = topTransactions;\n    this.totalTransactions = totalTransactions;\n    this.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['top-transactions'])) throw new Error(`Response is missing required array field 'top-transactions': ${data}`);\n    if (typeof data['total-transactions'] === 'undefined') throw new Error(`Response is missing required field 'total-transactions': ${data}`);\n    return new PendingTransactionsResponse({\n      topTransactions: data['top-transactions'],\n      totalTransactions: data['total-transactions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse extends BaseModel {\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor(_ref33) {\n    let {\n      txid\n    } = _ref33;\n    super();\n    this.txid = txid;\n    this.attribute_map = {\n      txid: 'txId'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['txId'] === 'undefined') throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new PostTransactionsResponse({\n      txid: data['txId']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof extends BaseModel {\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor(_ref34) {\n    let {\n      message,\n      stateproof\n    } = _ref34;\n    super();\n    this.message = message;\n    this.stateproof = typeof stateproof === 'string' ? new Uint8Array(Buffer.from(stateproof, 'base64')) : stateproof;\n    this.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['Message'] === 'undefined') throw new Error(`Response is missing required field 'Message': ${data}`);\n    if (typeof data['StateProof'] === 'undefined') throw new Error(`Response is missing required field 'StateProof': ${data}`);\n    return new StateProof({\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\n      stateproof: data['StateProof']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage extends BaseModel {\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor(_ref35) {\n    let {\n      blockheaderscommitment,\n      firstattestedround,\n      lastattestedround,\n      lnprovenweight,\n      voterscommitment\n    } = _ref35;\n    super();\n    this.blockheaderscommitment = typeof blockheaderscommitment === 'string' ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64')) : blockheaderscommitment;\n    this.firstattestedround = firstattestedround;\n    this.lastattestedround = lastattestedround;\n    this.lnprovenweight = lnprovenweight;\n    this.voterscommitment = typeof voterscommitment === 'string' ? new Uint8Array(Buffer.from(voterscommitment, 'base64')) : voterscommitment;\n    this.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['BlockHeadersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);\n    if (typeof data['FirstAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);\n    if (typeof data['LastAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);\n    if (typeof data['LnProvenWeight'] === 'undefined') throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);\n    if (typeof data['VotersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);\n    return new StateProofMessage({\n      blockheaderscommitment: data['BlockHeadersCommitment'],\n      firstattestedround: data['FirstAttestedRound'],\n      lastattestedround: data['LastAttestedRound'],\n      lnprovenweight: data['LnProvenWeight'],\n      voterscommitment: data['VotersCommitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse extends BaseModel {\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor(_ref36) {\n    let {\n      currentRound,\n      onlineMoney,\n      totalMoney\n    } = _ref36;\n    super();\n    this.currentRound = currentRound;\n    this.onlineMoney = onlineMoney;\n    this.totalMoney = totalMoney;\n    this.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current_round'] === 'undefined') throw new Error(`Response is missing required field 'current_round': ${data}`);\n    if (typeof data['online-money'] === 'undefined') throw new Error(`Response is missing required field 'online-money': ${data}`);\n    if (typeof data['total-money'] === 'undefined') throw new Error(`Response is missing required field 'total-money': ${data}`);\n    return new SupplyResponse({\n      currentRound: data['current_round'],\n      onlineMoney: data['online-money'],\n      totalMoney: data['total-money']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor(_ref37) {\n    let {\n      key,\n      value\n    } = _ref37;\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * Creates a new `TealValue` object.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param bytes - (tb) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor(_ref38) {\n    let {\n      type,\n      bytes,\n      uint\n    } = _ref38;\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['bytes'] === 'undefined') throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['uint'] === 'undefined') throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor(_ref39) {\n    let {\n      consensusVersion,\n      fee,\n      genesisHash,\n      genesisId,\n      lastRound,\n      minFee\n    } = _ref39;\n    super();\n    this.consensusVersion = consensusVersion;\n    this.fee = fee;\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = lastRound;\n    this.minFee = minFee;\n    this.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['consensus-version'] === 'undefined') throw new Error(`Response is missing required field 'consensus-version': ${data}`);\n    if (typeof data['fee'] === 'undefined') throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['genesis-hash'] === 'undefined') throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n    if (typeof data['genesis-id'] === 'undefined') throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['min-fee'] === 'undefined') throw new Error(`Response is missing required field 'min-fee': ${data}`);\n    return new TransactionParametersResponse({\n      consensusVersion: data['consensus-version'],\n      fee: data['fee'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      lastRound: data['last-round'],\n      minFee: data['min-fee']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor(_ref40) {\n    let {\n      idx,\n      proof,\n      stibhash,\n      treedepth,\n      hashtype\n    } = _ref40;\n    super();\n    this.idx = idx;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.stibhash = typeof stibhash === 'string' ? new Uint8Array(Buffer.from(stibhash, 'base64')) : stibhash;\n    this.treedepth = treedepth;\n    this.hashtype = hashtype;\n    this.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['idx'] === 'undefined') throw new Error(`Response is missing required field 'idx': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['stibhash'] === 'undefined') throw new Error(`Response is missing required field 'stibhash': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new TransactionProofResponse({\n      idx: data['idx'],\n      proof: data['proof'],\n      stibhash: data['stibhash'],\n      treedepth: data['treedepth'],\n      hashtype: data['hashtype']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * algod version information.\n */\nexport class Version extends BaseModel {\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor(_ref41) {\n    let {\n      build,\n      genesisHashB64,\n      genesisId,\n      versions\n    } = _ref41;\n    super();\n    this.build = build;\n    this.genesisHashB64 = typeof genesisHashB64 === 'string' ? new Uint8Array(Buffer.from(genesisHashB64, 'base64')) : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n    this.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['build'] === 'undefined') throw new Error(`Response is missing required field 'build': ${data}`);\n    if (typeof data['genesis_hash_b64'] === 'undefined') throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);\n    if (typeof data['genesis_id'] === 'undefined') throw new Error(`Response is missing required field 'genesis_id': ${data}`);\n    if (!Array.isArray(data['versions'])) throw new Error(`Response is missing required array field 'versions': ${data}`);\n    return new Version({\n      build: BuildVersion.from_obj_for_encoding(data['build']),\n      genesisHashB64: data['genesis_hash_b64'],\n      genesisId: data['genesis_id'],\n      versions: data['versions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}","map":{"version":3,"mappings":"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","names":["Buffer","BaseModel","Account","constructor","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","createdApps","createdAssets","participation","rewardBase","sigType","totalBoxBytes","totalBoxes","attribute_map","from_obj_for_encoding","data","Error","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","AccountApplicationResponse","appLocalState","createdApp","ApplicationParams","AccountAssetResponse","assetHolding","createdAsset","AssetParams","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountStateDelta","delta","Array","isArray","EvalDeltaKeyValue","id","params","schema","keyValue","TealKeyValue","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","numUint","numByteSlice","index","assetId","isFrozen","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","BlockHashResponse","blockhash","BlockResponse","block","cert","Box","value","BoxDescriptor","BoxesResponse","boxes","BuildVersion","branch","buildNumber","channel","commitHash","major","minor","CompileResponse","hash","result","sourcemap","DisassembleResponse","DryrunRequest","accounts","apps","latestTimestamp","protocolVersion","sources","txns","DryrunSource","DryrunResponse","error","DryrunTxnResult","fieldName","source","txnIndex","appIndex","DryrunState","line","pc","stack","scratch","TealValue","disassembly","appCallMessages","appCallTrace","budgetAdded","budgetConsumed","globalDelta","localDeltas","logicSigDisassembly","logicSigMessages","logicSigTrace","logs","ErrorResponse","message","EvalDelta","action","bytes","uint","key","LightBlockHeaderProof","proof","treedepth","NodeStatusResponse","catchupTime","lastRound","lastVersion","nextVersion","nextVersionRound","nextVersionSupported","stoppedAtUnsupportedRound","timeSinceLastRound","catchpoint","catchpointAcquiredBlocks","catchpointProcessedAccounts","catchpointProcessedKvs","catchpointTotalAccounts","catchpointTotalBlocks","catchpointTotalKvs","catchpointVerifiedAccounts","catchpointVerifiedKvs","lastCatchpoint","PendingTransactionResponse","poolError","txn","applicationIndex","assetClosingAmount","assetIndex","closeRewards","closingAmount","confirmedRound","globalStateDelta","innerTxns","localStateDelta","receiverRewards","senderRewards","PendingTransactionsResponse","topTransactions","totalTransactions","PostTransactionsResponse","txid","StateProof","stateproof","StateProofMessage","blockheaderscommitment","firstattestedround","lastattestedround","lnprovenweight","voterscommitment","SupplyResponse","currentRound","onlineMoney","totalMoney","type","TransactionParametersResponse","consensusVersion","fee","genesisHash","genesisId","minFee","TransactionProofResponse","idx","stibhash","hashtype","Version","build","genesisHashB64","versions"],"sourceRoot":"","sources":["../../../../../../src/client/v2/algod/models/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}