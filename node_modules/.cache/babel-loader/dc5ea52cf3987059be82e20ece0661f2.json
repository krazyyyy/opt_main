{"ast":null,"code":"const {\n  types\n} = require('@algo-builder/web');\nconst {\n  getApplicationAddress\n} = require('algosdk');\nconst {\n  OptAsaID,\n  OptAppID\n} = require('../utils/common.js');\nexport default async function depositFunc(web, wallet_address, algo_amt, network) {\n  var raw = {\n    \"sender_wallet\": wallet_address,\n    \"algo_amt\": algo_amt\n  };\n  var requestOptions = {\n    method: 'POST',\n    body: JSON.stringify(raw),\n    redirect: 'follow',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  let txnParams = {\n    type: types.TransactionType.TransferAlgo,\n    sign: types.SignType.SecretKey,\n    fromAccountAddr: wallet_address,\n    toAccountAddr: getApplicationAddress(165037939),\n    amountMicroAlgos: algo_amt,\n    payFlags: {\n      totalFee: 1000\n    }\n  };\n  // web.executeTx(\n  //   txnParameters\n  // )\n  let res = await tryExecuteTx(web, txnParams);\n  console.log(res);\n  fetch(\"http://127.0.0.1:5000/blockchain/deposit\", requestOptions).then(response => response.text()).then(result => {\n    console.log(result);\n  }).catch(error => console.log('error', error));\n}\nasync function tryExecuteTx(web, txnParams) {\n  try {\n    const txnParameters = Array.isArray(txnParams) ? txnParams : [txnParams];\n    console.log(txnParameters);\n    return await web.executeTx(txnParameters);\n  } catch (e) {\n    console.error('Transaction Failed', e);\n    throw e;\n  }\n}","map":{"version":3,"names":["types","require","getApplicationAddress","OptAsaID","OptAppID","depositFunc","web","wallet_address","algo_amt","network","raw","requestOptions","method","body","JSON","stringify","redirect","headers","txnParams","type","TransactionType","TransferAlgo","sign","SignType","SecretKey","fromAccountAddr","toAccountAddr","amountMicroAlgos","payFlags","totalFee","res","tryExecuteTx","console","log","fetch","then","response","text","result","catch","error","txnParameters","Array","isArray","executeTx","e"],"sources":["C:/Users/user/Desktop/Optimum-Staking-main/Optimum-Staking-main/frontend/src/api/deposit.js"],"sourcesContent":["\r\nconst { types } = require('@algo-builder/web');\r\nconst { getApplicationAddress } = require('algosdk');\r\nconst {\r\n    OptAsaID,\r\n    OptAppID,\r\n} = require('../utils/common.js');\r\n\r\n\r\nexport default async function depositFunc(web, wallet_address, algo_amt, network) {\r\n    var raw = {\r\n          \"sender_wallet\": wallet_address,\r\n          \"algo_amt\": algo_amt\r\n        }\r\n\r\n    var requestOptions = {\r\n      method: 'POST',\r\n      body: JSON.stringify(raw),\r\n      redirect: 'follow',\r\n      headers : {\r\n          'Content-Type' : 'application/json'\r\n      }\r\n    };\r\n    let txnParams = {\r\n            type: types.TransactionType.TransferAlgo,\r\n            sign: types.SignType.SecretKey,\r\n            fromAccountAddr: wallet_address,\r\n            toAccountAddr: getApplicationAddress(165037939),\r\n            amountMicroAlgos: algo_amt,\r\n            payFlags: { totalFee: 1000 }\r\n        }\r\n    // web.executeTx(\r\n    //   txnParameters\r\n    // )\r\n    let res = await tryExecuteTx(web, txnParams)\r\n    console.log(res)\r\n    fetch(\"http://127.0.0.1:5000/blockchain/deposit\", requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => {\r\n      console.log(result)\r\n    })\r\n    .catch(error => console.log('error', error));\r\n  }  \r\n\r\nasync function tryExecuteTx(web, txnParams) {\r\n  try {\r\n      const txnParameters = Array.isArray(txnParams)\r\n          ? txnParams\r\n          : [txnParams];\r\n      console.log(txnParameters)\r\n      return await web.executeTx(txnParameters);\r\n  } catch (e) {\r\n      console.error('Transaction Failed', e);\r\n      throw e;\r\n  }\r\n}"],"mappings":"AACA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAM;EAAEC;AAAsB,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AACpD,MAAM;EACFE,QAAQ;EACRC;AACJ,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAGjC,eAAe,eAAeI,WAAW,CAACC,GAAG,EAAEC,cAAc,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC9E,IAAIC,GAAG,GAAG;IACJ,eAAe,EAAEH,cAAc;IAC/B,UAAU,EAAEC;EACd,CAAC;EAEL,IAAIG,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC;IACzBM,QAAQ,EAAE,QAAQ;IAClBC,OAAO,EAAG;MACN,cAAc,EAAG;IACrB;EACF,CAAC;EACD,IAAIC,SAAS,GAAG;IACRC,IAAI,EAAEnB,KAAK,CAACoB,eAAe,CAACC,YAAY;IACxCC,IAAI,EAAEtB,KAAK,CAACuB,QAAQ,CAACC,SAAS;IAC9BC,eAAe,EAAElB,cAAc;IAC/BmB,aAAa,EAAExB,qBAAqB,CAAC,SAAS,CAAC;IAC/CyB,gBAAgB,EAAEnB,QAAQ;IAC1BoB,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAK;EAC/B,CAAC;EACL;EACA;EACA;EACA,IAAIC,GAAG,GAAG,MAAMC,YAAY,CAACzB,GAAG,EAAEY,SAAS,CAAC;EAC5Cc,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;EAChBI,KAAK,CAAC,0CAA0C,EAAEvB,cAAc,CAAC,CAChEwB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;IACdN,OAAO,CAACC,GAAG,CAACK,MAAM,CAAC;EACrB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIR,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEO,KAAK,CAAC,CAAC;AAC9C;AAEF,eAAeT,YAAY,CAACzB,GAAG,EAAEY,SAAS,EAAE;EAC1C,IAAI;IACA,MAAMuB,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACzB,SAAS,CAAC,GACxCA,SAAS,GACT,CAACA,SAAS,CAAC;IACjBc,OAAO,CAACC,GAAG,CAACQ,aAAa,CAAC;IAC1B,OAAO,MAAMnC,GAAG,CAACsC,SAAS,CAACH,aAAa,CAAC;EAC7C,CAAC,CAAC,OAAOI,CAAC,EAAE;IACRb,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEK,CAAC,CAAC;IACtC,MAAMA,CAAC;EACX;AACF"},"metadata":{},"sourceType":"module"}